[{"path":[]},{"path":"https://maialab.org/quincunx/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://maialab.org/quincunx/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://maialab.org/quincunx/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://maialab.org/quincunx/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://maialab.org/quincunx/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://maialab.org/quincunx/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://maialab.org/quincunx/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://maialab.org/quincunx/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://maialab.org/quincunx/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://maialab.org/quincunx/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://maialab.org/quincunx/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://maialab.org/quincunx/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Ramiro Magno Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://maialab.org/quincunx/articles/cohorts-samples-sample-sets.html","id":"cohorts","dir":"Articles","previous_headings":"","what":"Cohorts","title":"Cohorts, Samples and Sample Sets","text":"cohort group individuals shared characteristic. Cohorts identified quincunx cohort_symbol variable. See vignette('getting-cohorts') find associated polygenic scores.  Using get_cohorts() retrieve associated PGS identifiers cohort \"PROMIS\":","code":"get_cohorts('PROMIS') #> An object of class \"cohorts\" #> Slot \"cohorts\": #> # A tibble: 1 × 2 #>   cohort_symbol cohort_name                                      #>   <chr>         <chr>                                            #> 1 PROMIS        The Pakistan Risk Of Myocardial Infarction Study #>  #> Slot \"pgs_ids\": #> # A tibble: 14 × 3 #>    cohort_symbol pgs_id    stage    #>    <chr>         <chr>     <chr>    #>  1 PROMIS        PGS000011 gwas/dev #>  2 PROMIS        PGS000012 gwas/dev #>  3 PROMIS        PGS000013 gwas/dev #>  4 PROMIS        PGS000018 gwas/dev #>  5 PROMIS        PGS000019 gwas/dev #>  6 PROMIS        PGS000020 gwas/dev #>  7 PROMIS        PGS000058 gwas/dev #>  8 PROMIS        PGS000349 gwas/dev #>  9 PROMIS        PGS000746 gwas/dev #> 10 PROMIS        PGS000747 gwas/dev #> 11 PROMIS        PGS000748 gwas/dev #> 12 PROMIS        PGS000749 gwas/dev #> 13 PROMIS        PGS000818 gwas/dev #> 14 PROMIS        PGS000899 gwas/dev"},{"path":"https://maialab.org/quincunx/articles/cohorts-samples-sample-sets.html","id":"samples","dir":"Articles","previous_headings":"","what":"Samples","title":"Cohorts, Samples and Sample Sets","text":"sample group participants associated none, one catalogued cohorts. selection cohort can either subset totality. Samples identified PGS Catalog global unique identifier, quincunx assigns surrogate identifier (sample_id) allow relations tables.  Sample composition provided slot cohorts objects scores returned get_scores() function. know details samples, look samples slot object scores:","code":"library(dplyr, warn.conflicts = FALSE)  # PGS000011 is one of the polygenic scores that is based upon participants from # cohort PROMIS pgs_11 <- get_scores('PGS000011')  # Cohort PROMIS is included in sample no. 2, along with LOLIPOP filter(pgs_11@cohorts, sample_id == 2L) #> # A tibble: 2 × 4 #>   pgs_id    sample_id cohort_symbol cohort_name                                  #>   <chr>         <int> <chr>         <chr>                                        #> 1 PGS000011         2 PROMIS        The Pakistan Risk Of Myocardial Infarction … #> 2 PGS000011         2 LOLIPOP       London Life Sciences Population Study filter(pgs_11@samples, sample_id == 2L) #> # A tibble: 1 × 15 #>   pgs_id   sampl…¹ stage sampl…² sampl…³ sampl…⁴ sampl…⁵ pheno…⁶ ances…⁷ ances…⁸ #>   <chr>      <int> <chr>   <int>   <int>   <int>   <dbl> <chr>   <chr>   <chr>   #> 1 PGS0000…       2 gwas     8653    4394    4259      NA NA      South … NA      #> # … with 5 more variables: country <chr>, #> #   ancestry_additional_description <chr>, study_id <chr>, pubmed_id <chr>, #> #   cohorts_additional_description <chr>, and abbreviated variable names #> #   ¹​sample_id, ²​sample_size, ³​sample_cases, ⁴​sample_controls, #> #   ⁵​sample_percent_male, ⁶​phenotype_description, ⁷​ancestry_category, ⁸​ancestry #> # ℹ Use `colnames()` to see all variable names"},{"path":"https://maialab.org/quincunx/articles/cohorts-samples-sample-sets.html","id":"sample-sets","dir":"Articles","previous_headings":"","what":"Sample sets","title":"Cohorts, Samples and Sample Sets","text":"sample set group samples used polygenic score evaluation. sample set identified PGS Catalog unique sample set identifier (pss_id).  find sample sets included specific cohort, start getting PGS identifiers associated cohort, e.g. MHI: PGS000013 one polygenic scores whose evaluation used participants cohort MHI. retrieve now sample sets used evaluation PGS000013: One sample sets used evaluate PGS000013 PSS000020. can retrieve sample_set object contains composition, .e., samples cohorts included, along details:","code":"# Note that by the definition of sample set, samples included in sample sets # are only used at PGS evaluation stages. filter(get_cohorts('MHI')@pgs_ids, stage == 'eval') #> # A tibble: 2 × 3 #>   cohort_symbol pgs_id    stage #>   <chr>         <chr>     <chr> #> 1 MHI           PGS000013 eval  #> 2 MHI           PGS000018 eval # Sample sets used in the evaluation of the PGS000013 pgs_13_sset <- get_sample_sets(pgs_id = 'PGS000013') glimpse(pgs_13_sset@sample_sets) #> Rows: 45 #> Columns: 1 #> $ pss_id <chr> \"PSS000015\", \"PSS000019\", \"PSS000020\", \"PSS000021\", \"PSS000022\"… get_sample_sets('PSS000020') #> An object of class \"sample_sets\" #> Slot \"sample_sets\": #> # A tibble: 1 × 1 #>   pss_id    #>   <chr>     #> 1 PSS000020 #>  #> Slot \"samples\": #> # A tibble: 2 × 15 #>   pss_id   sampl…¹ stage sampl…² sampl…³ sampl…⁴ sampl…⁵ pheno…⁶ ances…⁷ ances…⁸ #>   <chr>      <int> <chr>   <int>   <int>   <int>   <dbl> <chr>   <chr>   <chr>   #> 1 PSS0000…       1 eval      862     446     416      NA Recurr… Europe… French… #> 2 PSS0000…       2 eval     2333     937    1396      NA Recurr… Europe… French… #> # … with 5 more variables: country <chr>, #> #   ancestry_additional_description <chr>, study_id <chr>, pubmed_id <chr>, #> #   cohorts_additional_description <chr>, and abbreviated variable names #> #   ¹​sample_id, ²​sample_size, ³​sample_cases, ⁴​sample_controls, #> #   ⁵​sample_percent_male, ⁶​phenotype_description, ⁷​ancestry_category, ⁸​ancestry #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"demographics\": #> # A tibble: 0 × 11 #> # … with 11 variables: pss_id <chr>, sample_id <int>, variable <chr>, #> #   estimate_type <chr>, estimate <dbl>, unit <chr>, variability_type <chr>, #> #   variability <dbl>, interval_type <chr>, interval_lower <dbl>, #> #   interval_upper <dbl> #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"cohorts\": #> # A tibble: 2 × 4 #>   pss_id    sample_id cohort_symbol cohort_name                      #>   <chr>         <int> <chr>         <chr>                            #> 1 PSS000020         1 MHI           Montreal Heart Institute Biobank #> 2 PSS000020         2 MHI           Montreal Heart Institute Biobank"},{"path":"https://maialab.org/quincunx/articles/getting-cohorts.html","id":"cohorts","dir":"Articles","previous_headings":"","what":"Cohorts","title":"Getting Cohorts","text":"cohort group individuals shared characteristic. Cohorts identified quincunx cohort_symbol variable. Participants cohorts used define samples, turn, used assemble sample sets. details relationship concepts cohorts, samples sample sets, see vignette('cohorts-samples-sample-sets'). Given study participants typically come one catalogued cohorts cohorts can strong bias ancestry composition — .e., cohorts mostly composed European-ancestry individuals —, can really important know cohorts used different stages Polygenic Score (PGS) life cycle assess transferability PGS performance1–3.","code":""},{"path":"https://maialab.org/quincunx/articles/getting-cohorts.html","id":"getting-cohorts","dir":"Articles","previous_headings":"","what":"Getting cohorts","title":"Getting Cohorts","text":"know beforehand cohort acronyms (e.g., \"23andMe\") interested , can get full name associated PGS identifiers using get_cohorts() function providing symbols parameter cohort_symbol: pgs_ids slot contains tibble associated PGS identifiers queried cohorts. stage variable indicates PGS stage cohort used. get catalogued cohorts PGS Catalog, leave cohort_symbol parameter NULL (default). Note , case, may take minutes download complete.","code":"library(quincunx) get_cohorts(cohort_symbol = '23andMe') #> An object of class \"cohorts\" #> Slot \"cohorts\": #> # A tibble: 1 × 2 #>   cohort_symbol cohort_name #>   <chr>         <chr>       #> 1 23andMe       23andMe     #>  #> Slot \"pgs_ids\": #> # A tibble: 18 × 3 #>    cohort_symbol pgs_id    stage    #>    <chr>         <chr>     <chr>    #>  1 23andMe       PGS000336 gwas/dev #>  2 23andMe       PGS000730 gwas/dev #>  3 23andMe       PGS000731 gwas/dev #>  4 23andMe       PGS000732 gwas/dev #>  5 23andMe       PGS000766 gwas/dev #>  6 23andMe       PGS000767 gwas/dev #>  7 23andMe       PGS000780 gwas/dev #>  8 23andMe       PGS000790 gwas/dev #>  9 23andMe       PGS000800 gwas/dev #> 10 23andMe       PGS000810 gwas/dev #> 11 23andMe       PGS000867 gwas/dev #> 12 23andMe       PGS000902 gwas/dev #> 13 23andMe       PGS000903 gwas/dev #> 14 23andMe       PGS001774 gwas/dev #> 15 23andMe       PGS002235 gwas/dev #> 16 23andMe       PGS000730 eval     #> 17 23andMe       PGS000731 eval     #> 18 23andMe       PGS000732 eval"},{"path":"https://maialab.org/quincunx/articles/getting-cohorts.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Getting Cohorts","text":"1. Reisberg, S., Iljasenko, T., Läll, K., Fischer, K. & Vilo, J. Comparing distributions polygenic risk scores type 2 diabetes coronary heart disease within different populations. PLOS ONE 12, e0179238 (2017). 2. Martin, . R. et al. Clinical use current polygenic risk scores may exacerbate health disparities. Nature Genetics 51, 584–591 (2019). 3. Duncan, L. et al. Analysis polygenic risk score usage performance diverse human populations. Nature Communications 10, (2019).","code":""},{"path":"https://maialab.org/quincunx/articles/getting-pgs-performance-metrics.html","id":"pgs-performance-metrics","dir":"Articles","previous_headings":"","what":"PGS performance metrics","title":"Getting PGS Performance Metrics","text":"Performance metrics assess validity PGS Sample Set. assessment performed samples used score development. Performance metrics retrieved function get_performance_metrics(). returned data provided S4 object class performance_metrics. Common metrics include: standardized effect sizes: odds ratios hazard ratios, regression coefficients \\(\\beta\\), see slot pgs_effect_sizes; classification accuracy metrics: area receiver operating characteristic curve, C-index area precision-recall curve, see slot pgs_classification_metrics; relevant metrics: calibration (\\(\\chi^2\\))), see slot pgs_other_metrics. covariates used model (commonly age, sex genetic principal components account population structure) also recorded set metrics. can found slot demographics.","code":""},{"path":"https://maialab.org/quincunx/articles/getting-pgs-performance-metrics.html","id":"getting-pgs-performance-metrics","dir":"Articles","previous_headings":"","what":"Getting PGS performance metrics","title":"Getting PGS Performance Metrics","text":"PGS Catalog, performance metrics catalogued associated identifier starts prefix \"PPM\". retrieve performance metrics associated one assessment polygenic score, can use directly identifier:","code":"library(quincunx)  get_performance_metrics(ppm_id = 'PPM000001') #> An object of class \"performance_metrics\" #> Slot \"performance_metrics\": #> # A tibble: 1 × 5 #>   ppm_id    pgs_id    reported_trait    covariates comments #>   <chr>     <chr>     <chr>             <chr>      <chr>    #> 1 PPM000001 PGS000001 All breast cancer NA         NA       #>  #> Slot \"publications\": #> # A tibble: 1 × 8 #>   ppm_id    pgp_id    pubmed_id publication_date publication title autho…¹ doi   #>   <chr>     <chr>     <chr>     <date>           <chr>       <chr> <chr>   <chr> #> 1 PPM000001 PGP000001 25855707  2015-04-08       J Natl Can… Pred… Mavadd… 10.1… #> # … with abbreviated variable name ¹​author_fullname #>  #> Slot \"sample_sets\": #> # A tibble: 1 × 2 #>   ppm_id    pss_id    #>   <chr>     <chr>     #> 1 PPM000001 PSS000001 #>  #> Slot \"samples\": #> # A tibble: 1 × 16 #>   ppm_id    pss_id sampl…¹ stage sampl…² sampl…³ sampl…⁴ sampl…⁵ pheno…⁶ ances…⁷ #>   <chr>     <chr>    <int> <chr>   <int>   <int>   <int>   <dbl> <chr>   <chr>   #> 1 PPM000001 PSS00…       1 eval    67054   33673   33381      NA All br… Europe… #> # … with 6 more variables: ancestry <chr>, country <chr>, #> #   ancestry_additional_description <chr>, study_id <chr>, pubmed_id <chr>, #> #   cohorts_additional_description <chr>, and abbreviated variable names #> #   ¹​sample_id, ²​sample_size, ³​sample_cases, ⁴​sample_controls, #> #   ⁵​sample_percent_male, ⁶​phenotype_description, ⁷​ancestry_category #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"demographics\": #> # A tibble: 0 × 12 #> # … with 12 variables: ppm_id <chr>, pss_id <chr>, sample_id <int>, #> #   variable <chr>, estimate_type <chr>, estimate <dbl>, unit <chr>, #> #   variability_type <chr>, variability <dbl>, interval_type <chr>, #> #   interval_lower <dbl>, interval_upper <dbl> #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"cohorts\": #> # A tibble: 33 × 5 #>    ppm_id    pss_id    sample_id cohort_symbol cohort_name                       #>    <chr>     <chr>         <int> <chr>         <chr>                             #>  1 PPM000001 PSS000001         1 ABCFS         Australian Breast Cancer Family … #>  2 PPM000001 PSS000001         1 MCCS          Melbourne Collaborative Cohort S… #>  3 PPM000001 PSS000001         1 HMBCS         Hannover-Minsk Breast Cancer Stu… #>  4 PPM000001 PSS000001         1 LMBC          Leuven Multidisciplinary Breast … #>  5 PPM000001 PSS000001         1 MTLGEBCS      Montreal Gene-Environment Breast… #>  6 PPM000001 PSS000001         1 CGPS          Copenhagen General Population St… #>  7 PPM000001 PSS000001         1 KBCP          Kuopio Breast Cancer Project      #>  8 PPM000001 PSS000001         1 OBCS          Oulu Breast Cancer Study          #>  9 PPM000001 PSS000001         1 CECILE        CECILE Breast Cancer Study        #> 10 PPM000001 PSS000001         1 BBCC          Bavarian Breast Cancer Cases and… #> # … with 23 more rows #> # ℹ Use `print(n = ...)` to see more rows #>  #> Slot \"pgs_effect_sizes\": #> # A tibble: 1 × 11 #>   ppm_id   effec…¹ estim…² estim…³ estim…⁴ unit  varia…⁵ varia…⁶ inter…⁷ inter…⁸ #>   <chr>      <int> <chr>   <chr>     <dbl> <chr> <chr>     <dbl> <chr>     <dbl> #> 1 PPM0000…       1 Odds R… OR         1.55 NA    se           NA ci         1.52 #> # … with 1 more variable: interval_upper <dbl>, and abbreviated variable names #> #   ¹​effect_size_id, ²​estimate_type_long, ³​estimate_type, ⁴​estimate, #> #   ⁵​variability_type, ⁶​variability, ⁷​interval_type, ⁸​interval_lower #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"pgs_classification_metrics\": #> # A tibble: 1 × 11 #>   ppm_id   class…¹ estim…² estim…³ estim…⁴ unit  varia…⁵ varia…⁶ inter…⁷ inter…⁸ #>   <chr>      <int> <chr>   <chr>     <dbl> <chr> <chr>     <dbl> <chr>     <dbl> #> 1 PPM0000…       1 Concor… C-index   0.622 NA    se           NA ci        0.619 #> # … with 1 more variable: interval_upper <dbl>, and abbreviated variable names #> #   ¹​classification_metrics_id, ²​estimate_type_long, ³​estimate_type, ⁴​estimate, #> #   ⁵​variability_type, ⁶​variability, ⁷​interval_type, ⁸​interval_lower #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"pgs_other_metrics\": #> # A tibble: 0 × 11 #> # … with 11 variables: ppm_id <chr>, other_metrics_id <int>, #> #   estimate_type_long <chr>, estimate_type <chr>, estimate <dbl>, unit <chr>, #> #   variability_type <chr>, variability <dbl>, interval_type <chr>, #> #   interval_lower <dbl>, interval_upper <dbl> #> # ℹ Use `colnames()` to see all variable names"},{"path":"https://maialab.org/quincunx/articles/getting-pgs-performance-metrics.html","id":"searching-by-pgs-identifier","dir":"Articles","previous_headings":"","what":"Searching by PGS identifier","title":"Getting PGS Performance Metrics","text":"Alternatively, also search associated PGS identifier, .e. \"PGS000001\": can see, search 'PGS000001', get multiple PPM identifiers (PPM000001 included). PGS assessed multiple independent times, assessment resulting performance metrics data entry, associated identifier.","code":"get_performance_metrics(pgs_id = 'PGS000001') #> An object of class \"performance_metrics\" #> Slot \"performance_metrics\": #> # A tibble: 13 × 5 #>    ppm_id    pgs_id    reported_trait                            covar…¹ comme…² #>    <chr>     <chr>     <chr>                                     <chr>   <chr>   #>  1 PPM000001 PGS000001 All breast cancer                         NA      NA      #>  2 PPM000011 PGS000001 Invasive breast cancer                    study,… NA      #>  3 PPM000114 PGS000001 Breast cancer in BRCA1 mutation carriers  Countr… NA      #>  4 PPM000117 PGS000001 Breast cancer in BRCA2 mutation carriers  Countr… NA      #>  5 PPM000944 PGS000001 Metachronous contralateral breast cancer  Country NA      #>  6 PPM000945 PGS000001 Invasive metachronous contralateral brea… Country NA      #>  7 PPM000961 PGS000001 Metachronous contralateral breast cancer  Country NA      #>  8 PPM000962 PGS000001 Invasive metachronous contralateral brea… Country NA      #>  9 PPM002150 PGS000001 Breast cancer in CHEK2 mutation carriers  Year o… Only 7… #> 10 PPM002151 PGS000001 Breast cancer in CHEK2 mutation carriers  Year o… Only 7… #> 11 PPM002152 PGS000001 Breast cancer in CHEK2 mutation carriers… Year o… Only 7… #> 12 PPM002153 PGS000001 Breast cancer in CHEK2 mutation carriers… Year o… Only 7… #> 13 PPM002154 PGS000001 Breast cancer in CHEK2 mutation carriers… Year o… Only 7… #> # … with abbreviated variable names ¹​covariates, ²​comments #>  #> Slot \"publications\": #> # A tibble: 13 × 8 #>    ppm_id    pgp_id    pubmed_id publication_date publicat…¹ title autho…² doi   #>    <chr>     <chr>     <chr>     <date>           <chr>      <chr> <chr>   <chr> #>  1 PPM000001 PGP000001 25855707  2015-04-08       J Natl Ca… Pred… Mavadd… 10.1… #>  2 PPM000011 PGP000002 30554720  2018-12-13       Am J Hum … Poly… Mavadd… 10.1… #>  3 PPM000114 PGP000033 28376175  2017-07-01       J Natl Ca… Eval… Kuchen… 10.1… #>  4 PPM000117 PGP000033 28376175  2017-07-01       J Natl Ca… Eval… Kuchen… 10.1… #>  5 PPM000944 PGP000109 33022221  2020-10-05       Am J Hum … Brea… Kramer… 10.1… #>  6 PPM000945 PGP000109 33022221  2020-10-05       Am J Hum … Brea… Kramer… 10.1… #>  7 PPM000961 PGP000109 33022221  2020-10-05       Am J Hum … Brea… Kramer… 10.1… #>  8 PPM000962 PGP000109 33022221  2020-10-05       Am J Hum … Brea… Kramer… 10.1… #>  9 PPM002150 PGP000198 33372680  2020-12-29       J Natl Ca… Perf… Borde J 10.1… #> 10 PPM002151 PGP000198 33372680  2020-12-29       J Natl Ca… Perf… Borde J 10.1… #> 11 PPM002152 PGP000198 33372680  2020-12-29       J Natl Ca… Perf… Borde J 10.1… #> 12 PPM002153 PGP000198 33372680  2020-12-29       J Natl Ca… Perf… Borde J 10.1… #> 13 PPM002154 PGP000198 33372680  2020-12-29       J Natl Ca… Perf… Borde J 10.1… #> # … with abbreviated variable names ¹​publication, ²​author_fullname #>  #> Slot \"sample_sets\": #> # A tibble: 13 × 2 #>    ppm_id    pss_id    #>    <chr>     <chr>     #>  1 PPM000001 PSS000001 #>  2 PPM000011 PSS000004 #>  3 PPM000114 PSS000070 #>  4 PPM000117 PSS000071 #>  5 PPM000944 PSS000484 #>  6 PPM000945 PSS000486 #>  7 PPM000961 PSS000484 #>  8 PPM000962 PSS000486 #>  9 PPM002150 PSS001054 #> 10 PPM002151 PSS001054 #> 11 PPM002152 PSS001054 #> 12 PPM002153 PSS001054 #> 13 PPM002154 PSS001054 #>  #> Slot \"samples\": #> # A tibble: 13 × 16 #>    ppm_id   pss_id sampl…¹ stage sampl…² sampl…³ sampl…⁴ sampl…⁵ pheno…⁶ ances…⁷ #>    <chr>    <chr>    <int> <chr>   <int>   <int>   <int>   <dbl> <chr>   <chr>   #>  1 PPM0000… PSS00…       1 eval    67054   33673   33381      NA \"All b… Europe… #>  2 PPM0000… PSS00…       1 eval    29751   11428   18323       0 \"Invas… Europe… #>  3 PPM0001… PSS00…       1 eval    15252    7797    7455       0 \"BRCA1… Europe… #>  4 PPM0001… PSS00…       1 eval     8211    4330    3881       0 \"BRCA2… Europe… #>  5 PPM0009… PSS00…       1 eval    56068    1027   55041       0 \"Women… Europe… #>  6 PPM0009… PSS00…       1 eval    56068     923   55145       0 \"Women… Europe… #>  7 PPM0009… PSS00…       1 eval    56068    1027   55041       0 \"Women… Europe… #>  8 PPM0009… PSS00…       1 eval    56068     923   55145       0 \"Women… Europe… #>  9 PPM0021… PSS00…       1 eval      760     561     199       0 \"All w… Europe… #> 10 PPM0021… PSS00…       1 eval      760     561     199       0 \"All w… Europe… #> 11 PPM0021… PSS00…       1 eval      760     561     199       0 \"All w… Europe… #> 12 PPM0021… PSS00…       1 eval      760     561     199       0 \"All w… Europe… #> 13 PPM0021… PSS00…       1 eval      760     561     199       0 \"All w… Europe… #> # … with 6 more variables: ancestry <chr>, country <chr>, #> #   ancestry_additional_description <chr>, study_id <chr>, pubmed_id <chr>, #> #   cohorts_additional_description <chr>, and abbreviated variable names #> #   ¹​sample_id, ²​sample_size, ³​sample_cases, ⁴​sample_controls, #> #   ⁵​sample_percent_male, ⁶​phenotype_description, ⁷​ancestry_category #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"demographics\": #> # A tibble: 0 × 12 #> # … with 12 variables: ppm_id <chr>, pss_id <chr>, sample_id <int>, #> #   variable <chr>, estimate_type <chr>, estimate <dbl>, unit <chr>, #> #   variability_type <chr>, variability <dbl>, interval_type <chr>, #> #   interval_lower <dbl>, interval_upper <dbl> #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"cohorts\": #> # A tibble: 218 × 5 #>    ppm_id    pss_id    sample_id cohort_symbol cohort_name                       #>    <chr>     <chr>         <int> <chr>         <chr>                             #>  1 PPM000001 PSS000001         1 ABCFS         Australian Breast Cancer Family … #>  2 PPM000001 PSS000001         1 MCCS          Melbourne Collaborative Cohort S… #>  3 PPM000001 PSS000001         1 HMBCS         Hannover-Minsk Breast Cancer Stu… #>  4 PPM000001 PSS000001         1 LMBC          Leuven Multidisciplinary Breast … #>  5 PPM000001 PSS000001         1 MTLGEBCS      Montreal Gene-Environment Breast… #>  6 PPM000001 PSS000001         1 CGPS          Copenhagen General Population St… #>  7 PPM000001 PSS000001         1 KBCP          Kuopio Breast Cancer Project      #>  8 PPM000001 PSS000001         1 OBCS          Oulu Breast Cancer Study          #>  9 PPM000001 PSS000001         1 CECILE        CECILE Breast Cancer Study        #> 10 PPM000001 PSS000001         1 BBCC          Bavarian Breast Cancer Cases and… #> # … with 208 more rows #> # ℹ Use `print(n = ...)` to see more rows #>  #> Slot \"pgs_effect_sizes\": #> # A tibble: 13 × 11 #>    ppm_id  effec…¹ estim…² estim…³ estim…⁴ unit  varia…⁵ varia…⁶ inter…⁷ inter…⁸ #>    <chr>     <int> <chr>   <chr>     <dbl> <chr> <chr>     <dbl> <chr>     <dbl> #>  1 PPM000…       1 Odds R… OR         1.55 NA    se           NA ci         1.52 #>  2 PPM000…       1 Odds R… OR         1.46 NA    se           NA ci         1.42 #>  3 PPM000…       1 Hazard… HR         1.13 NA    se           NA ci         1.1  #>  4 PPM000…       1 Hazard… HR         1.22 NA    se           NA ci         1.17 #>  5 PPM000…       1 Hazard… HR         1.21 NA    se           NA ci         1.14 #>  6 PPM000…       1 Hazard… HR         1.21 NA    se           NA ci         1.13 #>  7 PPM000…       1 Hazard… HR         1.21 NA    se           NA ci         1.14 #>  8 PPM000…       1 Hazard… HR         1.21 NA    se           NA ci         1.13 #>  9 PPM002…       1 Hazard… HR         1.71 NA    se           NA ci         1.36 #> 10 PPM002…       1 Hazard… HR         2.29 NA    se           NA ci         1.56 #> 11 PPM002…       1 Hazard… HR         1.43 NA    se           NA ci         1.04 #> 12 PPM002…       1 Hazard… HR         2.32 NA    se           NA ci         1.69 #> 13 PPM002…       1 Hazard… HR         1.59 NA    se           NA ci         1.07 #> # … with 1 more variable: interval_upper <dbl>, and abbreviated variable names #> #   ¹​effect_size_id, ²​estimate_type_long, ³​estimate_type, ⁴​estimate, #> #   ⁵​variability_type, ⁶​variability, ⁷​interval_type, ⁸​interval_lower #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"pgs_classification_metrics\": #> # A tibble: 2 × 11 #>   ppm_id   class…¹ estim…² estim…³ estim…⁴ unit  varia…⁵ varia…⁶ inter…⁷ inter…⁸ #>   <chr>      <int> <chr>   <chr>     <dbl> <chr> <chr>     <dbl> <chr>     <dbl> #> 1 PPM0000…       1 Concor… C-index   0.622 NA    se           NA ci        0.619 #> 2 PPM0000…       1 Area U… AUROC     0.603 NA    se           NA ci       NA     #> # … with 1 more variable: interval_upper <dbl>, and abbreviated variable names #> #   ¹​classification_metrics_id, ²​estimate_type_long, ³​estimate_type, ⁴​estimate, #> #   ⁵​variability_type, ⁶​variability, ⁷​interval_type, ⁸​interval_lower #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"pgs_other_metrics\": #> # A tibble: 0 × 11 #> # … with 11 variables: ppm_id <chr>, other_metrics_id <int>, #> #   estimate_type_long <chr>, estimate_type <chr>, estimate <dbl>, unit <chr>, #> #   variability_type <chr>, variability <dbl>, interval_type <chr>, #> #   interval_lower <dbl>, interval_upper <dbl> #> # ℹ Use `colnames()` to see all variable names"},{"path":"https://maialab.org/quincunx/articles/getting-pgs-performance-metrics.html","id":"vectorised-search","dir":"Articles","previous_headings":"","what":"Vectorised search","title":"Getting PGS Performance Metrics","text":"function get_performance_metrics() vectorised ppm_id pgs_id readily retrieve performance metrics set polygenic scores providing vector identifiers (e.g. PGSes 42 thru 46):","code":"ppm <- get_performance_metrics(pgs_id = sprintf(\"PGS%06d\", 42:46)) print(ppm@performance_metrics, n = Inf) #> # A tibble: 26 × 5 #>    ppm_id    pgs_id    reported_trait                            covar…¹ comme…² #>    <chr>     <chr>     <chr>                                     <chr>   <chr>   #>  1 PPM000101 PGS000042 Coeliac disease in HLA-DQ2.5 carriers     NA      NA      #>  2 PPM000102 PGS000043 Venous thromboembolism                    age, s… NA      #>  3 PPM000103 PGS000043 Venous thromboembolism                    age, 1… NA      #>  4 PPM001639 PGS000043 Thromboembolic disease event in individu… Age at… Includ… #>  5 PPM001640 PGS000043 Thromboembolic disease event in individu… Diseas… Includ… #>  6 PPM001641 PGS000043 Thromboembolic disease event in in indiv… Age at… Includ… #>  7 PPM001939 PGS000043 Venous Thromboembolism                    Age, s… 273 of… #>  8 PPM001940 PGS000043 Venous Thromboembolism                    Age, s… 273 of… #>  9 PPM001941 PGS000043 Venous Thromboembolism                    NA      273 of… #> 10 PPM001942 PGS000043 Venous Thromboembolism                    Age, o… 273 of… #> 11 PPM001943 PGS000043 Venous Thromboembolism in individuals wi… Age, s… 273 of… #> 12 PPM001944 PGS000043 Venous Thromboembolism in individuals wi… Age, s… 273 of… #> 13 PPM000104 PGS000044 Elevated serum prostate-specific antigen… cancer… NA      #> 14 PPM000105 PGS000044 aggressive prostate cancer (Gleason scor… NA      NA      #> 15 PPM000106 PGS000045 Breast cancer in BRCA1 mutation carriers  Countr… NA      #> 16 PPM000107 PGS000045 Breast cancer in BRCA2 mutation carriers  Countr… NA      #> 17 PPM000120 PGS000045 Breast cancer in male carriers of BRCA1/… 3 PCs … PGS pr… #> 18 PPM002155 PGS000045 Breast cancer in CHEK2 mutation carriers  Year o… Only 8… #> 19 PPM002156 PGS000045 Breast cancer in CHEK2 mutation carriers  Year o… Only 8… #> 20 PPM002157 PGS000045 Breast cancer in CHEK2 mutation carriers… Year o… Only 8… #> 21 PPM002158 PGS000045 Breast cancer in CHEK2 mutation carriers… Year o… Only 8… #> 22 PPM002159 PGS000045 Breast cancer in CHEK2 mutation carriers… Year o… Only 8… #> 23 PPM014912 PGS000045 Breast cancer in BRAC1 PV carriers        NA      effect… #> 24 PPM000108 PGS000046 Breast cancer in BRCA1 mutation carriers  Countr… NA      #> 25 PPM000109 PGS000046 Breast cancer in BRCA2 mutation carriers  Countr… NA      #> 26 PPM000121 PGS000046 Breast cancer in male carriers of BRCA1/… 3 PCs … PGS pr… #> # … with abbreviated variable names ¹​covariates, ²​comments"},{"path":"https://maialab.org/quincunx/articles/getting-pgs-publications.html","id":"pgs-publications","dir":"Articles","previous_headings":"","what":"PGS Publications","title":"Getting PGS Publications","text":"PGS publications published works underlie data provided PGS Catalog. retrieve publications use function get_publications(). may use one following search criteria (combination thereof): pgp_id: publication identifier assigned PGS Catalog; pgs_id: polygenic score identifier; pubmed_id: PubMed identifier; author: author last name. pass criteria , get_publications() retrieve publications Catalog.","code":""},{"path":"https://maialab.org/quincunx/articles/getting-pgs-publications.html","id":"getting-pgs-publications","dir":"Articles","previous_headings":"","what":"Getting PGS Publications","title":"Getting PGS Publications","text":"Getting PGS publications identifiers: pgs_id: pubmed_id: author:","code":"library(quincunx)  get_publications(pgp_id = c('PGP000001', 'PGP000002')) #> An object of class \"publications\" #> Slot \"publications\": #> # A tibble: 2 × 8 #>   pgp_id    pubmed_id publication_date publication   title autho…¹ doi   authors #>   <chr>     <chr>     <date>           <chr>         <chr> <chr>   <chr> <chr>   #> 1 PGP000001 25855707  2015-04-08       J Natl Cance… Pred… Mavadd… 10.1… Mavadd… #> 2 PGP000002 30554720  2018-12-13       Am J Hum Gen… Poly… Mavadd… 10.1… Mavadd… #> # … with abbreviated variable name ¹​author_fullname #>  #> Slot \"pgs_ids\": #> # A tibble: 21 × 3 #>    pgp_id    pgs_id    stage    #>    <chr>     <chr>     <chr>    #>  1 PGP000001 PGS000001 gwas/dev #>  2 PGP000001 PGS000002 gwas/dev #>  3 PGP000001 PGS000003 gwas/dev #>  4 PGP000001 PGS000001 eval     #>  5 PGP000001 PGS000002 eval     #>  6 PGP000001 PGS000003 eval     #>  7 PGP000002 PGS000004 gwas/dev #>  8 PGP000002 PGS000005 gwas/dev #>  9 PGP000002 PGS000006 gwas/dev #> 10 PGP000002 PGS000007 gwas/dev #> # … with 11 more rows #> # ℹ Use `print(n = ...)` to see more rows library(quincunx)  get_publications(pgs_id = 'PGS000003') #> An object of class \"publications\" #> Slot \"publications\": #> # A tibble: 1 × 8 #>   pgp_id    pubmed_id publication_date publication   title autho…¹ doi   authors #>   <chr>     <chr>     <date>           <chr>         <chr> <chr>   <chr> <chr>   #> 1 PGP000001 25855707  2015-04-08       J Natl Cance… Pred… Mavadd… 10.1… Mavadd… #> # … with abbreviated variable name ¹​author_fullname #>  #> Slot \"pgs_ids\": #> # A tibble: 6 × 3 #>   pgp_id    pgs_id    stage    #>   <chr>     <chr>     <chr>    #> 1 PGP000001 PGS000001 gwas/dev #> 2 PGP000001 PGS000002 gwas/dev #> 3 PGP000001 PGS000003 gwas/dev #> 4 PGP000001 PGS000001 eval     #> 5 PGP000001 PGS000002 eval     #> 6 PGP000001 PGS000003 eval library(quincunx)  get_publications(pubmed_id = '30554720') #> An object of class \"publications\" #> Slot \"publications\": #> # A tibble: 1 × 8 #>   pgp_id    pubmed_id publication_date publication   title autho…¹ doi   authors #>   <chr>     <chr>     <date>           <chr>         <chr> <chr>   <chr> <chr>   #> 1 PGP000002 30554720  2018-12-13       Am J Hum Gen… Poly… Mavadd… 10.1… Mavadd… #> # … with abbreviated variable name ¹​author_fullname #>  #> Slot \"pgs_ids\": #> # A tibble: 15 × 3 #>    pgp_id    pgs_id    stage    #>    <chr>     <chr>     <chr>    #>  1 PGP000002 PGS000004 gwas/dev #>  2 PGP000002 PGS000005 gwas/dev #>  3 PGP000002 PGS000006 gwas/dev #>  4 PGP000002 PGS000007 gwas/dev #>  5 PGP000002 PGS000008 gwas/dev #>  6 PGP000002 PGS000009 gwas/dev #>  7 PGP000002 PGS000001 eval     #>  8 PGP000002 PGS000002 eval     #>  9 PGP000002 PGS000003 eval     #> 10 PGP000002 PGS000004 eval     #> 11 PGP000002 PGS000005 eval     #> 12 PGP000002 PGS000006 eval     #> 13 PGP000002 PGS000007 eval     #> 14 PGP000002 PGS000008 eval     #> 15 PGP000002 PGS000009 eval library(quincunx)  get_publications(author = 'Natarajan') #> An object of class \"publications\" #> Slot \"publications\": #> # A tibble: 12 × 8 #>    pgp_id    pubmed_id publication_date publication  title autho…¹ doi   authors #>    <chr>     <chr>     <date>           <chr>        <chr> <chr>   <chr> <chr>   #>  1 PGP000006 30104762  2018-08-13       Nat Genet    Geno… Khera … 10.1… Khera … #>  2 PGP000030 31676865  2019-11-01       Nat Genet    Geno… Klarin… 10.1… Klarin… #>  3 PGP000042 28223407  2017-02-21       Circulation  Poly… Natara… 10.1… Natara… #>  4 PGP000060 30586733  2019-03-01       Circulation  Whol… Khera … 10.1… Khera … #>  5 PGP000076 27959714  2016-11-13       N Engl J Med Gene… Khera … 10.1… Khera … #>  6 PGP000116 32498804  2020-06-01       J Am Coll C… Limi… Aragam… 10.1… Aragam… #>  7 PGP000127 33021622  2020-10-06       JAMA Cardiol Clin… Trinde… 10.1… Trinde… #>  8 PGP000159 32981348  2020-09-28       Circulation  Gene… Klarin… 10.1… Klarin… #>  9 PGP000230 34887591  2021-12-09       Nature       The … Graham… http… Graham… #> 10 PGP000252 33433237  2021-01-12       Circ Genom … Inte… Ye Y    10.1… Ye Y, … #> 11 PGP000299 35149155  2022-02-08       Ophthalmolo… Phot… Zekava… 10.1… Zekava… #> 12 PGP000307 35278270  2022-03-12       Eur J Heart… Gene… Forres… 10.1… Forres… #> # … with abbreviated variable name ¹​author_fullname #>  #> Slot \"pgs_ids\": #> # A tibble: 57 × 3 #>    pgp_id    pgs_id    stage    #>    <chr>     <chr>     <chr>    #>  1 PGP000006 PGS000013 gwas/dev #>  2 PGP000006 PGS000014 gwas/dev #>  3 PGP000006 PGS000015 gwas/dev #>  4 PGP000006 PGS000016 gwas/dev #>  5 PGP000006 PGS000017 gwas/dev #>  6 PGP000006 PGS000013 eval     #>  7 PGP000006 PGS000014 eval     #>  8 PGP000006 PGS000015 eval     #>  9 PGP000006 PGS000016 eval     #> 10 PGP000006 PGS000017 eval     #> # … with 47 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://maialab.org/quincunx/articles/getting-pgs-publications.html","id":"getting-pgs-publications-by-other-criteria","dir":"Articles","previous_headings":"","what":"Getting PGS Publications by other criteria","title":"Getting PGS Publications","text":"PGS Catalog REST API supports searches criteria mentioned . like get results criteria, e.g., publication_date, need retrieve publications filter afterwards. example, let’s download publications keep publications published 2021: Filtering based year 2021:","code":"all_pub <- get_publications(interactive = FALSE) all_pub@publications #> # A tibble: 350 × 8 #>    pgp_id    pubmed_id publication_date publication  title autho…¹ doi   authors #>    <chr>     <chr>     <date>           <chr>        <chr> <chr>   <chr> <chr>   #>  1 PGP000001 25855707  2015-04-08       J Natl Canc… Pred… Mavadd… 10.1… Mavadd… #>  2 PGP000002 30554720  2018-12-13       Am J Hum Ge… Poly… Mavadd… 10.1… Mavadd… #>  3 PGP000003 25748612  2015-03-04       Lancet       Gene… Mega JL 10.1… Mega J… #>  4 PGP000004 26392438  2015-09-20       Eur Heart J  Risk… Tada H  10.1… Tada H… #>  5 PGP000005 27655226  2016-09-21       Eur Heart J  Geno… Abraha… 10.1… Abraha… #>  6 PGP000006 30104762  2018-08-13       Nat Genet    Geno… Khera … 10.1… Khera … #>  7 PGP000007 30309464  2018-10-01       J Am Coll C… Geno… Inouye… 10.1… Inouye… #>  8 PGP000008 31184202  2019-06-11       Circ Genom … Vali… Wünnem… 10.1… Wünnem… #>  9 PGP000009 28456682  2017-04-06       J Clin Lipi… Poly… Paquet… 10.1… Paquet… #> 10 PGP000010 27513194  2016-08-11       Genet Med    Pers… Läll K  10.1… Läll K… #> # … with 340 more rows, and abbreviated variable name ¹​author_fullname #> # ℹ Use `print(n = ...)` to see more rows library(dplyr, warn.conflicts = FALSE)  # Determine the PGP ids whose publication date falls within 2021. pgp_ids_2021 <-   filter(     all_pub@publications,     publication_date >= '2021-01-01' &       publication_date <= '2021-12-31'   ) %>%   pull('pgp_id')  # Filtering based on the PGP ids pub_2021 <- all_pub[pgp_ids_2021]  # Print the first 10 PGS publications pub_2021@publications #> # A tibble: 79 × 8 #>    pgp_id    pubmed_id publication_date publication title  autho…¹ doi   authors #>    <chr>     <chr>     <date>           <chr>       <chr>  <chr>   <chr> <chr>   #>  1 PGP000050 33579919  2021-02-12       Nat Commun  Cross… Graff … 10.1… Graff … #>  2 PGP000121 33608049  2021-02-19       Genome Med  Devel… Tam CHT 10.1… Tam CH… #>  3 PGP000122 33398198  2021-01-04       Nat Genet   Trans… Conti … 10.1… Conti … #>  4 PGP000128 33462484  2021-01-18       Nat Genet   Genet… Sinnot… 10.1… Sinnot… #>  5 PGP000137 34750571  2021-11-08       Nat Metab   Integ… Ritchi… 10.1… Ritchi… #>  6 PGP000138 33420020  2021-01-08       Nat Commun  Disea… Fontan… 10.1… Fontan… #>  7 PGP000146 33495597  2021-01-25       Nat Genet   Commo… Harper… 10.1… Harper… #>  8 PGP000147 33623009  2021-02-23       Nat Commun  Whole… Tharej… 10.1… Tharej… #>  9 PGP000148 33472890  2021-01-20       Cancer Res  Asses… Hung RJ 10.1… Hung R… #> 10 PGP000149 33623038  2021-02-23       Nat Commun  Polyg… Huynh-… 10.1… Huynh-… #> # … with 69 more rows, and abbreviated variable name ¹​author_fullname #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://maialab.org/quincunx/articles/getting-pgs-sample-sets.html","id":"sample-sets","dir":"Articles","previous_headings":"","what":"Sample sets","title":"Getting PGS Sample Sets","text":"sample set group samples used polygenic score evaluation.sample set identified PGS Catalog unique sample set identifier (pss_id). See vignette('cohorts-samples-sample-sets') details relationship cohorts, samples, sample sets.","code":""},{"path":"https://maialab.org/quincunx/articles/getting-pgs-sample-sets.html","id":"getting-sample-sets","dir":"Articles","previous_headings":"","what":"Getting sample sets","title":"Getting PGS Sample Sets","text":"get information sample sets can either search associated polygenic score identifiers, sample set identifiers (know beforehand).","code":""},{"path":"https://maialab.org/quincunx/articles/getting-pgs-sample-sets.html","id":"by-the-pgs-identifier","dir":"Articles","previous_headings":"Getting sample sets","what":"By the PGS identifier","title":"Getting PGS Sample Sets","text":"","code":"# Sample sets used in the evaluation of the PGS000013 (pgs_13_sset <- get_sample_sets(pgs_id = 'PGS000013')) #> An object of class \"sample_sets\" #> Slot \"sample_sets\": #> # A tibble: 45 × 1 #>    pss_id    #>    <chr>     #>  1 PSS000015 #>  2 PSS000019 #>  3 PSS000020 #>  4 PSS000021 #>  5 PSS000022 #>  6 PSS000219 #>  7 PSS000227 #>  8 PSS000228 #>  9 PSS000229 #> 10 PSS000230 #> # … with 35 more rows #> # ℹ Use `print(n = ...)` to see more rows #>  #> Slot \"samples\": #> # A tibble: 49 × 15 #>    pss_id  sampl…¹ stage sampl…² sampl…³ sampl…⁴ sampl…⁵ pheno…⁶ ances…⁷ ances…⁸ #>    <chr>     <int> <chr>   <int>   <int>   <int>   <dbl> <chr>   <chr>   <chr>   #>  1 PSS000…       1 eval   288978    8676  280302    NA   CAD as… Europe… NA      #>  2 PSS000…       1 eval     5762     173    5589    41.3 Preval… Europe… French… #>  3 PSS000…       1 eval      862     446     416    NA   Recurr… Europe… French… #>  4 PSS000…       2 eval     2333     937    1396    NA   Recurr… Europe… French… #>  5 PSS000…       1 eval     1964     974     976    72.7 Preval… Europe… French… #>  6 PSS000…       1 eval     3309    2492     817    72.4 Preval… Europe… French… #>  7 PSS000…       1 eval    11010     126   10884    17.1 Phenot… Europe… NA      #>  8 PSS000…       1 eval      544      40     504    NA   NA      Asian … NA      #>  9 PSS000…       1 eval     1298     336     962    NA   NA      Africa… NA      #> 10 PSS000…       1 eval      919     168     751    NA   NA      Hispan… NA      #> # … with 39 more rows, 5 more variables: country <chr>, #> #   ancestry_additional_description <chr>, study_id <chr>, pubmed_id <chr>, #> #   cohorts_additional_description <chr>, and abbreviated variable names #> #   ¹​sample_id, ²​sample_size, ³​sample_cases, ⁴​sample_controls, #> #   ⁵​sample_percent_male, ⁶​phenotype_description, ⁷​ancestry_category, ⁸​ancestry #> # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names #>  #> Slot \"demographics\": #> # A tibble: 16 × 11 #>    pss_id  sampl…¹ varia…² estim…³ estim…⁴ unit  varia…⁵ varia…⁶ inter…⁷ inter…⁸ #>    <chr>     <int> <chr>   <chr>     <dbl> <chr> <chr>     <dbl> <chr>     <dbl> #>  1 PSS000…       1 age     mean       34   years NA           NA iqr        30   #>  2 PSS000…       2 age     mean       33   years NA           NA iqr        30   #>  3 PSS000…       1 age     mean       54   years NA           NA iqr        46   #>  4 PSS000…       2 age     mean       55   years NA           NA iqr        49   #>  5 PSS000…       1 age     mean       60.6 years NA           NA iqr        54.4 #>  6 PSS000…       2 age     mean       52.8 years NA           NA iqr        46.3 #>  7 PSS000…       1 follow… median      9.2 years NA           NA iqr         5.5 #>  8 PSS000…       1 follow… median      9.2 years NA           NA iqr         5.5 #>  9 PSS000…       1 follow… median     11.7 years NA           NA iqr         6   #> 10 PSS000…       1 follow… median     11.7 years NA           NA iqr         6   #> 11 PSS000…       1 follow… median     10.4 years NA           NA iqr         5.7 #> 12 PSS000…       1 follow… median     10.4 years NA           NA iqr         5.7 #> 13 PSS000…       1 follow… median     21.3 years NA           NA iqr        16.1 #> 14 PSS000…       1 follow… median     23.2 years NA           NA iqr        17.6 #> 15 PSS000…       1 follow… median      8.1 years NA           NA iqr         7.4 #> 16 PSS001…       1 follow… median     14   years NA           NA iqr        14   #> # … with 1 more variable: interval_upper <dbl>, and abbreviated variable names #> #   ¹​sample_id, ²​variable, ³​estimate_type, ⁴​estimate, ⁵​variability_type, #> #   ⁶​variability, ⁷​interval_type, ⁸​interval_lower #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"cohorts\": #> # A tibble: 114 × 4 #>    pss_id    sample_id cohort_symbol cohort_name                                 #>    <chr>         <int> <chr>         <chr>                                       #>  1 PSS000015         1 UKB           UK Biobank                                  #>  2 PSS000019         1 CARTaGENE     CARTaGENE cohort (CHU Sainte-Justine, Queb… #>  3 PSS000020         1 MHI           Montreal Heart Institute Biobank            #>  4 PSS000020         2 MHI           Montreal Heart Institute Biobank            #>  5 PSS000021         1 MHI           Montreal Heart Institute Biobank            #>  6 PSS000022         1 MHI           Montreal Heart Institute Biobank            #>  7 PSS000219         1 CG            Color Genomics                              #>  8 PSS000227         1 VIRGO         Variation in Recovery: Role of Gender on O… #>  9 PSS000227         1 MESA          Multi-Ethnic Study of Atherosclerosis       #> 10 PSS000228         1 VIRGO         Variation in Recovery: Role of Gender on O… #> # … with 104 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://maialab.org/quincunx/articles/getting-pgs-sample-sets.html","id":"by-the-sample-set-identifier","dir":"Articles","previous_headings":"Getting sample sets","what":"By the sample set identifier","title":"Getting PGS Sample Sets","text":"","code":"# Sample set PSS000020 (pss_20 <- get_sample_sets(pss_id = 'PSS000020')) #> An object of class \"sample_sets\" #> Slot \"sample_sets\": #> # A tibble: 1 × 1 #>   pss_id    #>   <chr>     #> 1 PSS000020 #>  #> Slot \"samples\": #> # A tibble: 2 × 15 #>   pss_id   sampl…¹ stage sampl…² sampl…³ sampl…⁴ sampl…⁵ pheno…⁶ ances…⁷ ances…⁸ #>   <chr>      <int> <chr>   <int>   <int>   <int>   <dbl> <chr>   <chr>   <chr>   #> 1 PSS0000…       1 eval      862     446     416      NA Recurr… Europe… French… #> 2 PSS0000…       2 eval     2333     937    1396      NA Recurr… Europe… French… #> # … with 5 more variables: country <chr>, #> #   ancestry_additional_description <chr>, study_id <chr>, pubmed_id <chr>, #> #   cohorts_additional_description <chr>, and abbreviated variable names #> #   ¹​sample_id, ²​sample_size, ³​sample_cases, ⁴​sample_controls, #> #   ⁵​sample_percent_male, ⁶​phenotype_description, ⁷​ancestry_category, ⁸​ancestry #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"demographics\": #> # A tibble: 0 × 11 #> # … with 11 variables: pss_id <chr>, sample_id <int>, variable <chr>, #> #   estimate_type <chr>, estimate <dbl>, unit <chr>, variability_type <chr>, #> #   variability <dbl>, interval_type <chr>, interval_lower <dbl>, #> #   interval_upper <dbl> #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"cohorts\": #> # A tibble: 2 × 4 #>   pss_id    sample_id cohort_symbol cohort_name                      #>   <chr>         <int> <chr>         <chr>                            #> 1 PSS000020         1 MHI           Montreal Heart Institute Biobank #> 2 PSS000020         2 MHI           Montreal Heart Institute Biobank"},{"path":"https://maialab.org/quincunx/articles/getting-pgs-sample-sets.html","id":"by-trait-or-disease","dir":"Articles","previous_headings":"Getting sample sets","what":"By trait or disease","title":"Getting PGS Sample Sets","text":"wish search criteria PGS identifier PSS identifier, need several steps. general approach map criteria matching PGS identifiers PGS IDs sample sets using get_sample_sets(). Let’s say want retrieve sample sets used evaluation polygenic scores disease Vitiligo (loss skin melanocytes causes areas skin depigmentation). Vitiligo hands person dark skin. Source (CC -SA 3.0): https://pt.wikipedia.org/wiki/Vitiligo. start searching disease PGS Catalog get_traits(): slot pgs_ids contains polygenic score identifiers associated Vitiligo. Now search sample sets, can pass PGS identifiers get_sample_sets():","code":"(traits_vitiligo <- get_traits(trait_term = 'Vitiligo')) #> An object of class \"traits\" #> Slot \"traits\": #> # A tibble: 1 × 6 #>   efo_id      parent_efo_id is_child trait    description                  url   #>   <chr>       <chr>         <lgl>    <chr>    <chr>                        <chr> #> 1 EFO_0004208 NA            FALSE    Vitiligo Generalized well circumscri… http… #>  #> Slot \"pgs_ids\": #> # A tibble: 3 × 4 #>   efo_id      parent_efo_id is_child pgs_id    #>   <chr>       <chr>         <lgl>    <chr>     #> 1 EFO_0004208 NA            FALSE    PGS000738 #> 2 EFO_0004208 NA            FALSE    PGS000760 #> 3 EFO_0004208 NA            FALSE    PGS001536 #>  #> Slot \"child_pgs_ids\": #> # A tibble: 0 × 4 #> # … with 4 variables: efo_id <chr>, parent_efo_id <chr>, is_child <lgl>, #> #   child_pgs_id <chr> #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"trait_categories\": #> # A tibble: 1 × 4 #>   efo_id      parent_efo_id is_child trait_categories       #>   <chr>       <chr>         <lgl>    <chr>                  #> 1 EFO_0004208 NA            FALSE    Immune system disorder #>  #> Slot \"trait_synonyms\": #> # A tibble: 1 × 4 #>   efo_id      parent_efo_id is_child trait_synonyms #>   <chr>       <chr>         <lgl>    <chr>          #> 1 EFO_0004208 NA            FALSE    vitiligo       #>  #> Slot \"trait_mapped_terms\": #> # A tibble: 14 × 4 #>    efo_id      parent_efo_id is_child trait_mapped_terms #>    <chr>       <chr>         <lgl>    <chr>              #>  1 EFO_0004208 NA            FALSE    DOID:12306         #>  2 EFO_0004208 NA            FALSE    ICD10:L80          #>  3 EFO_0004208 NA            FALSE    ICD10CM:L80        #>  4 EFO_0004208 NA            FALSE    ICD9:709.01        #>  5 EFO_0004208 NA            FALSE    MESH:D014820       #>  6 EFO_0004208 NA            FALSE    MONDO:0008661      #>  7 EFO_0004208 NA            FALSE    MeSH:D014820       #>  8 EFO_0004208 NA            FALSE    MedDRA:10047642    #>  9 EFO_0004208 NA            FALSE    NCIT:C26915        #> 10 EFO_0004208 NA            FALSE    NCIt:C26915        #> 11 EFO_0004208 NA            FALSE    OMIM:193200        #> 12 EFO_0004208 NA            FALSE    Orphanet:247871    #> 13 EFO_0004208 NA            FALSE    SNOMEDCT:56727007  #> 14 EFO_0004208 NA            FALSE    UMLS:C0042900 traits_vitiligo@pgs_ids #> # A tibble: 3 × 4 #>   efo_id      parent_efo_id is_child pgs_id    #>   <chr>       <chr>         <lgl>    <chr>     #> 1 EFO_0004208 NA            FALSE    PGS000738 #> 2 EFO_0004208 NA            FALSE    PGS000760 #> 3 EFO_0004208 NA            FALSE    PGS001536 (pss_vitiligo <- get_sample_sets(pgs_id = traits_vitiligo@pgs_ids$pgs_id)) #> An object of class \"sample_sets\" #> Slot \"sample_sets\": #> # A tibble: 7 × 1 #>   pss_id    #>   <chr>     #> 1 PSS000907 #> 2 PSS000970 #> 3 PSS004173 #> 4 PSS004174 #> 5 PSS004175 #> 6 PSS004176 #> 7 PSS004177 #>  #> Slot \"samples\": #> # A tibble: 7 × 15 #>   pss_id   sampl…¹ stage sampl…² sampl…³ sampl…⁴ sampl…⁵ pheno…⁶ ances…⁷ ances…⁸ #>   <chr>      <int> <chr>   <int>   <int>   <int>   <dbl> <chr>   <chr>   <chr>   #> 1 PSS0009…       1 eval     4008    1827    2181      NA Cases … Europe… NA      #> 2 PSS0009…       1 eval     1584      NA      NA      NA NA      Europe… NA      #> 3 PSS0041…       1 eval     6497      17    6480      NA NA      Africa… NA      #> 4 PSS0041…       1 eval     1704       6    1698      NA NA      East A… NA      #> 5 PSS0041…       1 eval    24905      45   24860      NA NA      Europe… NA      #> 6 PSS0041…       1 eval     7831      71    7760      NA NA      South … NA      #> 7 PSS0041…       1 eval    67425     131   67294      NA NA      Europe… NA      #> # … with 5 more variables: country <chr>, #> #   ancestry_additional_description <chr>, study_id <chr>, pubmed_id <chr>, #> #   cohorts_additional_description <chr>, and abbreviated variable names #> #   ¹​sample_id, ²​sample_size, ³​sample_cases, ⁴​sample_controls, #> #   ⁵​sample_percent_male, ⁶​phenotype_description, ⁷​ancestry_category, ⁸​ancestry #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"demographics\": #> # A tibble: 0 × 11 #> # … with 11 variables: pss_id <chr>, sample_id <int>, variable <chr>, #> #   estimate_type <chr>, estimate <dbl>, unit <chr>, variability_type <chr>, #> #   variability <dbl>, interval_type <chr>, interval_lower <dbl>, #> #   interval_upper <dbl> #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"cohorts\": #> # A tibble: 6 × 4 #>   pss_id    sample_id cohort_symbol cohort_name                                  #>   <chr>         <int> <chr>         <chr>                                        #> 1 PSS000970         1 GNEHGI2020Q2  Genentech Human Genetics Initiative Cancer … #> 2 PSS004173         1 UKB           UK Biobank                                   #> 3 PSS004174         1 UKB           UK Biobank                                   #> 4 PSS004175         1 UKB           UK Biobank                                   #> 5 PSS004176         1 UKB           UK Biobank                                   #> 6 PSS004177         1 UKB           UK Biobank"},{"path":"https://maialab.org/quincunx/articles/getting-pgs-scores.html","id":"polygenic-scores","dir":"Articles","previous_headings":"","what":"Polygenic scores","title":"Getting PGS Scores","text":"polygenic score (PGS) aggregates effects many genetic variants single number predicts genetic predisposition phenotype. PGS typically composed hundreds--millions genetic variants (usually SNPs) combined using weighted sum allele dosages multiplied corresponding effect sizes, estimated relevant genome-wide association study (GWAS). PGS nomenclature heterogeneous: can also referred genetic scores genomic scores, polygenic risk scores (PRS) genomic risk scores (GRS) predict discrete phenotype, disease.","code":""},{"path":"https://maialab.org/quincunx/articles/getting-pgs-scores.html","id":"pgs-catalog","dir":"Articles","previous_headings":"","what":"PGS Catalog","title":"Getting PGS Scores","text":"PGS Catalog open database published polygenic scores (PGS). PGS Catalog consistently annotated relevant metadata; including scoring files (variants, effect alleles/weights), annotations PGS developed applied, evaluations predictive performance.","code":""},{"path":"https://maialab.org/quincunx/articles/getting-pgs-scores.html","id":"getting-pgs-scores","dir":"Articles","previous_headings":"","what":"Getting PGS scores","title":"Getting PGS Scores","text":"can search PGS scores three criteria: pgs_id: PGS identifier efo_id: EFO trait identifier pubmed_id: PubMed identifier criteria terribly useful, normally know identifiers beforehand, search criteria provided PGS Catalog REST API (service quincunx communicates ). Instead using criteria directly, show may retrieve polygenic score information starting trait disease interest. See vignette('pgs-scores-mavaddat') get polygenic scores starting publication interest. Let’s say interested basophil count. Basophils one several kinds white blood cells make less 1% circulating white blood cells. Basophils play part immune surveillance, varying levels basophils associated different medical conditions, e.g., allergies, inflammation, infection, leukemia anemia. start querying PGS Catalog traits term \"basophil\" — may check vignette('getting-traits') details use get_traits() function. table (slot) pgs_ids basophil_traits provides associated PGS identifiers. identifiers can now used query score information using function get_scores():","code":"(basophil_traits <- get_traits(trait_term = 'basophil', exact_term = FALSE)) #> An object of class \"traits\" #> Slot \"traits\": #> # A tibble: 2 × 6 #>   efo_id      parent_efo_id is_child trait                         descr…¹ url   #>   <chr>       <chr>         <lgl>    <chr>                         <chr>   <chr> #> 1 EFO_0005090 NA            FALSE    basophil count                The nu… http… #> 2 EFO_0007992 NA            FALSE    basophil percentage of leuko… A calc… http… #> # … with abbreviated variable name ¹​description #>  #> Slot \"pgs_ids\": #> # A tibble: 6 × 4 #>   efo_id      parent_efo_id is_child pgs_id    #>   <chr>       <chr>         <lgl>    <chr>     #> 1 EFO_0005090 NA            FALSE    PGS000088 #> 2 EFO_0005090 NA            FALSE    PGS000163 #> 3 EFO_0005090 NA            FALSE    PGS001378 #> 4 EFO_0007992 NA            FALSE    PGS000089 #> 5 EFO_0007992 NA            FALSE    PGS000164 #> 6 EFO_0007992 NA            FALSE    PGS001377 #>  #> Slot \"child_pgs_ids\": #> # A tibble: 3 × 4 #>   efo_id      parent_efo_id is_child child_pgs_id #>   <chr>       <chr>         <lgl>    <chr>        #> 1 EFO_0005090 NA            FALSE    PGS000089    #> 2 EFO_0005090 NA            FALSE    PGS000164    #> 3 EFO_0005090 NA            FALSE    PGS001377    #>  #> Slot \"trait_categories\": #> # A tibble: 4 × 4 #>   efo_id      parent_efo_id is_child trait_categories          #>   <chr>       <chr>         <lgl>    <chr>                     #> 1 EFO_0005090 NA            FALSE    Hematological measurement #> 2 EFO_0005090 NA            FALSE    Inflammatory measurement  #> 3 EFO_0007992 NA            FALSE    Hematological measurement #> 4 EFO_0007992 NA            FALSE    Inflammatory measurement  #>  #> Slot \"trait_synonyms\": #> # A tibble: 6 × 4 #>   efo_id      parent_efo_id is_child trait_synonyms                              #>   <chr>       <chr>         <lgl>    <chr>                                       #> 1 EFO_0005090 NA            FALSE    blood basophil count                        #> 2 EFO_0007992 NA            FALSE    basophil count as percentage of total whit… #> 3 EFO_0007992 NA            FALSE    basophil count to total WBC count ratio     #> 4 EFO_0007992 NA            FALSE    basophil percentage                         #> 5 EFO_0007992 NA            FALSE    basophil percentage of white cells          #> 6 EFO_0007992 NA            FALSE    blood basophil count to total leukocyte co… #>  #> Slot \"trait_mapped_terms\": #> # A tibble: 5 × 4 #>   efo_id      parent_efo_id is_child trait_mapped_terms #>   <chr>       <chr>         <lgl>    <chr>              #> 1 EFO_0005090 NA            FALSE    CMO:0000034        #> 2 EFO_0005090 NA            FALSE    CMO:0000111        #> 3 EFO_0005090 NA            FALSE    MedDRA:10049695    #> 4 EFO_0005090 NA            FALSE    SNOMEDCT:42351005  #> 5 EFO_0007992 NA            FALSE    CMO:0000368 basophil_traits@pgs_ids #> # A tibble: 6 × 4 #>   efo_id      parent_efo_id is_child pgs_id    #>   <chr>       <chr>         <lgl>    <chr>     #> 1 EFO_0005090 NA            FALSE    PGS000088 #> 2 EFO_0005090 NA            FALSE    PGS000163 #> 3 EFO_0005090 NA            FALSE    PGS001378 #> 4 EFO_0007992 NA            FALSE    PGS000089 #> 5 EFO_0007992 NA            FALSE    PGS000164 #> 6 EFO_0007992 NA            FALSE    PGS001377 get_scores(pgs_id = basophil_traits@pgs_ids$pgs_id) #> An object of class \"scores\" #> Slot \"scores\": #> # A tibble: 6 × 12 #>   pgs_id pgs_n…¹ scori…² match…³ repor…⁴ trait…⁵ pgs_m…⁶ pgs_m…⁷ n_var…⁸ n_var…⁹ #>   <chr>  <chr>   <chr>   <lgl>   <chr>   <chr>   <chr>   <chr>     <int>   <int> #> 1 PGS00… baso    https:… TRUE    Basoph… BASO#   Regula… \"Bi-al…    9121       0 #> 2 PGS00… baso    https:… TRUE    Basoph… BASO#   Genome… \"Condi…     185       0 #> 3 PGS00… GBE_IN… https:… TRUE    Basoph… https:… snpnet   NA        3050       0 #> 4 PGS00… baso_p  https:… TRUE    Basoph… BASO%   Regula… \"Bi-al…    5248       0 #> 5 PGS00… baso_p  https:… TRUE    Basoph… BASO%   Genome… \"Condi…     150       0 #> 6 PGS00… GBE_IN… https:… TRUE    Basoph… https:… snpnet   NA        3205       0 #> # … with 2 more variables: assembly <chr>, license <chr>, and abbreviated #> #   variable names ¹​pgs_name, ²​scoring_file, ³​matches_publication, #> #   ⁴​reported_trait, ⁵​trait_additional_description, ⁶​pgs_method_name, #> #   ⁷​pgs_method_params, ⁸​n_variants, ⁹​n_variants_interactions #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"publications\": #> # A tibble: 6 × 8 #>   pgs_id    pgp_id    pubmed_id publication_date publication title autho…¹ doi   #>   <chr>     <chr>     <chr>     <date>           <chr>       <chr> <chr>   <chr> #> 1 PGS000088 PGP000051 35072137  2022-01-12       Cell Genom  Mach… Xu Y    10.1… #> 2 PGS000163 PGP000078 32888494  2020-09-01       Cell        The … Vuckov… 10.1… #> 3 PGS001378 PGP000244 35324888  2022-03-24       PLoS Genet  Sign… Taniga… 10.1… #> 4 PGS000089 PGP000051 35072137  2022-01-12       Cell Genom  Mach… Xu Y    10.1… #> 5 PGS000164 PGP000078 32888494  2020-09-01       Cell        The … Vuckov… 10.1… #> 6 PGS001377 PGP000244 35324888  2022-03-24       PLoS Genet  Sign… Taniga… 10.1… #> # … with abbreviated variable name ¹​author_fullname #>  #> Slot \"samples\": #> # A tibble: 8 × 15 #>   pgs_id   sampl…¹ stage sampl…² sampl…³ sampl…⁴ sampl…⁵ pheno…⁶ ances…⁷ ances…⁸ #>   <chr>      <int> <chr>   <int>   <int>   <int>   <dbl> <chr>   <chr>   <chr>   #> 1 PGS0000…       1 gwas   404718      NA      NA      46 NA      Europe… NA      #> 2 PGS0000…       2 dev    323774      NA      NA      46 NA      Europe… NA      #> 3 PGS0001…       1 gwas   408112      NA      NA      NA NA      Europe… NA      #> 4 PGS0013…       1 dev    261890      NA      NA      NA NA      Europe… NA      #> 5 PGS0000…       1 gwas   404532      NA      NA      46 NA      Europe… NA      #> 6 PGS0000…       2 dev    323626      NA      NA      46 NA      Europe… NA      #> 7 PGS0001…       1 gwas   408112      NA      NA      NA NA      Europe… NA      #> 8 PGS0013…       1 dev    261893      NA      NA      NA NA      Europe… NA      #> # … with 5 more variables: country <chr>, #> #   ancestry_additional_description <chr>, study_id <chr>, pubmed_id <chr>, #> #   cohorts_additional_description <chr>, and abbreviated variable names #> #   ¹​sample_id, ²​sample_size, ³​sample_cases, ⁴​sample_controls, #> #   ⁵​sample_percent_male, ⁶​phenotype_description, ⁷​ancestry_category, ⁸​ancestry #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"demographics\": #> # A tibble: 4 × 11 #>   pgs_id   sampl…¹ varia…² estim…³ estim…⁴ unit  varia…⁵ varia…⁶ inter…⁷ inter…⁸ #>   <chr>      <int> <chr>   <chr>     <dbl> <chr> <chr>     <dbl> <chr>     <dbl> #> 1 PGS0000…       1 age     mean       57.2 years NA           NA range      38.9 #> 2 PGS0000…       2 age     mean       57.2 years NA           NA range      38.9 #> 3 PGS0000…       1 age     mean       57.2 years NA           NA range      38.9 #> 4 PGS0000…       2 age     mean       57.2 years NA           NA range      38.9 #> # … with 1 more variable: interval_upper <dbl>, and abbreviated variable names #> #   ¹​sample_id, ²​variable, ³​estimate_type, ⁴​estimate, ⁵​variability_type, #> #   ⁶​variability, ⁷​interval_type, ⁸​interval_lower #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"cohorts\": #> # A tibble: 8 × 4 #>   pgs_id    sample_id cohort_symbol cohort_name #>   <chr>         <int> <chr>         <chr>       #> 1 PGS000088         1 UKB           UK Biobank  #> 2 PGS000088         2 UKB           UK Biobank  #> 3 PGS000163         1 UKB           UK Biobank  #> 4 PGS001378         1 UKB           UK Biobank  #> 5 PGS000089         1 UKB           UK Biobank  #> 6 PGS000089         2 UKB           UK Biobank  #> 7 PGS000164         1 UKB           UK Biobank  #> 8 PGS001377         1 UKB           UK Biobank  #>  #> Slot \"traits\": #> # A tibble: 6 × 5 #>   pgs_id    efo_id      trait                             description      url   #>   <chr>     <chr>       <chr>                             <chr>            <chr> #> 1 PGS000088 EFO_0005090 basophil count                    The number of g… http… #> 2 PGS000163 EFO_0005090 basophil count                    The number of g… http… #> 3 PGS001378 EFO_0005090 basophil count                    The number of g… http… #> 4 PGS000089 EFO_0007992 basophil percentage of leukocytes A calculated me… http… #> 5 PGS000164 EFO_0007992 basophil percentage of leukocytes A calculated me… http… #> 6 PGS001377 EFO_0007992 basophil percentage of leukocytes A calculated me… http… #>  #> Slot \"stages_tally\": #> # A tibble: 14 × 4 #>    pgs_id    stage sample_size n_sample_sets #>    <chr>     <chr>       <int>         <int> #>  1 PGS000088 gwas       404718            NA #>  2 PGS000088 dev        323774            NA #>  3 PGS000088 eval           NA             2 #>  4 PGS000163 gwas       408112            NA #>  5 PGS000163 eval           NA             2 #>  6 PGS001378 dev        261890            NA #>  7 PGS001378 eval           NA             5 #>  8 PGS000089 gwas       404532            NA #>  9 PGS000089 dev        323626            NA #> 10 PGS000089 eval           NA             2 #> 11 PGS000164 gwas       408112            NA #> 12 PGS000164 eval           NA             1 #> 13 PGS001377 dev        261893            NA #> 14 PGS001377 eval           NA             5 #>  #> Slot \"ancestry_frequencies\": #> # A tibble: 20 × 4 #>    pgs_id    stage ancestry_class_symbol frequency #>    <chr>     <chr> <chr>                     <dbl> #>  1 PGS000088 gwas  EUR                         100 #>  2 PGS000088 dev   EUR                         100 #>  3 PGS000088 eval  EUR                         100 #>  4 PGS000163 gwas  EUR                         100 #>  5 PGS000163 eval  EUR                         100 #>  6 PGS001378 dev   EUR                         100 #>  7 PGS001378 eval  AFR                          20 #>  8 PGS001378 eval  EAS                          20 #>  9 PGS001378 eval  EUR                          40 #> 10 PGS001378 eval  SAS                          20 #> 11 PGS000089 gwas  EUR                         100 #> 12 PGS000089 dev   EUR                         100 #> 13 PGS000089 eval  EUR                         100 #> 14 PGS000164 gwas  EUR                         100 #> 15 PGS000164 eval  EUR                         100 #> 16 PGS001377 dev   EUR                         100 #> 17 PGS001377 eval  AFR                          20 #> 18 PGS001377 eval  EAS                          20 #> 19 PGS001377 eval  EUR                          40 #> 20 PGS001377 eval  SAS                          20 #>  #> Slot \"multi_ancestry_composition\": #> # A tibble: 0 × 4 #> # … with 4 variables: pgs_id <chr>, stage <chr>, #> #   multi_ancestry_class_symbol <chr>, ancestry_class_symbol <chr> #> # ℹ Use `colnames()` to see all variable names"},{"path":"https://maialab.org/quincunx/articles/getting-releases.html","id":"latest-release-of-the-pgs-catalog","dir":"Articles","previous_headings":"","what":"Latest release of the PGS Catalog","title":"PGS Catalog Releases","text":"get information latest release, run get_releases() default argument values:","code":"get_releases() # Or get_releases(date = 'latest') #> An object of class \"releases\" #> Slot \"releases\": #> # A tibble: 1 × 5 #>   date       n_pgs n_ppm n_pgp notes                                             #>   <date>     <int> <int> <int> <chr>                                             #> 1 2022-08-03     7    77    12 This release contains 7 new Score(s), 12 new Pub… #>  #> Slot \"pgs_ids\": #> # A tibble: 7 × 2 #>   date       pgs_id    #>   <date>     <chr>     #> 1 2022-08-03 PGS002738 #> 2 2022-08-03 PGS002739 #> 3 2022-08-03 PGS002740 #> 4 2022-08-03 PGS002741 #> # … with 3 more rows #> # ℹ Use `print(n = ...)` to see more rows #>  #> Slot \"ppm_ids\": #> # A tibble: 77 × 2 #>   date       ppm_id    #>   <date>     <chr>     #> 1 2022-08-03 PPM014838 #> 2 2022-08-03 PPM014839 #> 3 2022-08-03 PPM014840 #> 4 2022-08-03 PPM014841 #> # … with 73 more rows #> # ℹ Use `print(n = ...)` to see more rows #>  #> Slot \"pgp_ids\": #> # A tibble: 12 × 2 #>   date       pgp_id    #>   <date>     <chr>     #> 1 2022-08-03 PGP000345 #> 2 2022-08-03 PGP000346 #> 3 2022-08-03 PGP000347 #> 4 2022-08-03 PGP000348 #> # … with 8 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://maialab.org/quincunx/articles/getting-releases.html","id":"release-by-date","dir":"Articles","previous_headings":"","what":"Release by date","title":"PGS Catalog Releases","text":"can use argument date select specific date (release exists day) format \"YYYY-MM-DD\", e.g., \"2020-11-20\":","code":"get_releases(date = '2020-11-20') #> An object of class \"releases\" #> Slot \"releases\": #> # A tibble: 1 × 5 #>   date       n_pgs n_ppm n_pgp notes                                             #>   <date>     <int> <int> <int> <chr>                                             #> 1 2020-11-20     4    50     5 This release contains 4 new Score(s), 5 new Publ… #>  #> Slot \"pgs_ids\": #> # A tibble: 4 × 2 #>   date       pgs_id    #>   <date>     <chr>     #> 1 2020-11-20 PGS000340 #> 2 2020-11-20 PGS000341 #> 3 2020-11-20 PGS000342 #> 4 2020-11-20 PGS000343 #>  #> Slot \"ppm_ids\": #> # A tibble: 50 × 2 #>   date       ppm_id    #>   <date>     <chr>     #> 1 2020-11-20 PPM000923 #> 2 2020-11-20 PPM000924 #> 3 2020-11-20 PPM000925 #> 4 2020-11-20 PPM000926 #> # … with 46 more rows #> # ℹ Use `print(n = ...)` to see more rows #>  #> Slot \"pgp_ids\": #> # A tibble: 5 × 2 #>   date       pgp_id    #>   <date>     <chr>     #> 1 2020-11-20 PGP000107 #> 2 2020-11-20 PGP000108 #> 3 2020-11-20 PGP000109 #> 4 2020-11-20 PGP000110 #> # … with 1 more row #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://maialab.org/quincunx/articles/getting-releases.html","id":"all-releases","dir":"Articles","previous_headings":"","what":"All releases","title":"PGS Catalog Releases","text":"","code":"(all_releases <- get_releases(date = 'all')) #> An object of class \"releases\" #> Slot \"releases\": #> # A tibble: 51 × 5 #>   date       n_pgs n_ppm n_pgp notes                                             #>   <date>     <int> <int> <int> <chr>                                             #> 1 2022-08-03     7    77    12 This release contains 7 new Score(s), 12 new Pub… #> 2 2022-07-21     8    33     6 This release contains 8 new Score(s), 6 new Publ… #> 3 2022-07-05     1    10     1 This release contains 1 new Score(s), 1 new Publ… #> 4 2022-06-29     8    73     8 This release contains 8 new Score(s), 8 new Publ… #> # … with 47 more rows #> # ℹ Use `print(n = ...)` to see more rows #>  #> Slot \"pgs_ids\": #> # A tibble: 2,652 × 2 #>   date       pgs_id    #>   <date>     <chr>     #> 1 2022-08-03 PGS002738 #> 2 2022-08-03 PGS002739 #> 3 2022-08-03 PGS002740 #> 4 2022-08-03 PGS002741 #> # … with 2,648 more rows #> # ℹ Use `print(n = ...)` to see more rows #>  #> Slot \"ppm_ids\": #> # A tibble: 12,608 × 2 #>   date       ppm_id    #>   <date>     <chr>     #> 1 2022-08-03 PPM014838 #> 2 2022-08-03 PPM014839 #> 3 2022-08-03 PPM014840 #> 4 2022-08-03 PPM014841 #> # … with 12,604 more rows #> # ℹ Use `print(n = ...)` to see more rows #>  #> Slot \"pgp_ids\": #> # A tibble: 350 × 2 #>   date       pgp_id    #>   <date>     <chr>     #> 1 2022-08-03 PGP000345 #> 2 2022-08-03 PGP000346 #> 3 2022-08-03 PGP000347 #> 4 2022-08-03 PGP000348 #> # … with 346 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://maialab.org/quincunx/articles/getting-traits.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Traits","text":"Polygenic scores (PGSs) annotated information phenotype predicts, .e. reported trait (reported original publication). can found column reported_trait slot scores scores objects: predicted phenotype also mapped Experimental Factor Ontology (EFO) terms (controlled vocabulary unambiguous identification traits diseases, relationships), namely, EFO trait. EFO traits associated polygenic score can also found scores objects slot traits, column trait: Many PGSs developed demonstrated predictive common complex traits, e.g. body mass index (BMI)1, blood lipids2 educational attainment3. Similarly, PGSs various diseases shown predictive disease incidence, defining marked increases risk life course earlier ages people high PGSs, e.g. coronary artery disease4,5, breast cancer6 schizophrenia7.","code":"pgs_01 <- get_scores('PGS000001') pgs_01@scores #> # A tibble: 1 × 12 #>   pgs_id pgs_n…¹ scori…² match…³ repor…⁴ trait…⁵ pgs_m…⁶ pgs_m…⁷ n_var…⁸ n_var…⁹ #>   <chr>  <chr>   <chr>   <lgl>   <chr>   <chr>   <chr>   <chr>     <int>   <int> #> 1 PGS00… PRS77_… https:… TRUE    Breast… NA      SNPs p… P<5x10…      77       0 #> # … with 2 more variables: assembly <chr>, license <chr>, and abbreviated #> #   variable names ¹​pgs_name, ²​scoring_file, ³​matches_publication, #> #   ⁴​reported_trait, ⁵​trait_additional_description, ⁶​pgs_method_name, #> #   ⁷​pgs_method_params, ⁸​n_variants, ⁹​n_variants_interactions #> # ℹ Use `colnames()` to see all variable names pgs_01@traits #> # A tibble: 1 × 5 #>   pgs_id    efo_id      trait            description                       url   #>   <chr>     <chr>       <chr>            <chr>                             <chr> #> 1 PGS000001 EFO_0000305 breast carcinoma A carcinoma that arises from epi… http…"},{"path":"https://maialab.org/quincunx/articles/getting-traits.html","id":"getting-catalogued-traits-from-pgs-catalog","dir":"Articles","previous_headings":"","what":"Getting catalogued traits from PGS Catalog","title":"Getting Traits","text":"interested retrieving polygenic scores Catalog, might want search trait predict. get_scores() function searches PGSs, however, function allows search pgs_id, efo_id pubmed_id. order search trait term, need first find associated EFO identifiers (efo_id). search traits (diseases), use function get_traits(). function can search : EFO trait identifier: efo_id; trait term: term matched EFO identifier (efo_id), label, description synonyms, trait categories, external mapped terms. useful search criteria trait term, typically want want use. Unless already know EFO trait interested , looking extra details , won’t search directly EFO identifier.","code":""},{"path":"https://maialab.org/quincunx/articles/getting-traits.html","id":"basic-example","dir":"Articles","previous_headings":"Getting catalogued traits from PGS Catalog","what":"Basic example","title":"Getting Traits","text":"Let’s say interested PGSs related medical condition, stroke. can search \"stroke\" get_traits(): can seen returned traits object, get set six tables (slots) include several details stroke. first table traits got one row, indicating query returned one trait Catalog. trait named \"stroke\" (column trait), unambiguously identified EFO identifier EFO_0000712.","code":"get_traits(trait_term = 'stroke') #> An object of class \"traits\" #> Slot \"traits\": #> # A tibble: 1 × 6 #>   efo_id      parent_efo_id is_child trait  description                    url   #>   <chr>       <chr>         <lgl>    <chr>  <chr>                          <chr> #> 1 EFO_0000712 NA            FALSE    stroke A sudden loss of neurological… http… #>  #> Slot \"pgs_ids\": #> # A tibble: 5 × 4 #>   efo_id      parent_efo_id is_child pgs_id    #>   <chr>       <chr>         <lgl>    <chr>     #> 1 EFO_0000712 NA            FALSE    PGS000038 #> 2 EFO_0000712 NA            FALSE    PGS000039 #> 3 EFO_0000712 NA            FALSE    PGS000665 #> 4 EFO_0000712 NA            FALSE    PGS000911 #> 5 EFO_0000712 NA            FALSE    PGS002259 #>  #> Slot \"child_pgs_ids\": #> # A tibble: 0 × 4 #> # … with 4 variables: efo_id <chr>, parent_efo_id <chr>, is_child <lgl>, #> #   child_pgs_id <chr> #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"trait_categories\": #> # A tibble: 2 × 4 #>   efo_id      parent_efo_id is_child trait_categories       #>   <chr>       <chr>         <lgl>    <chr>                  #> 1 EFO_0000712 NA            FALSE    Cardiovascular disease #> 2 EFO_0000712 NA            FALSE    Neurological disorder  #>  #> Slot \"trait_synonyms\": #> # A tibble: 53 × 4 #>    efo_id      parent_efo_id is_child trait_synonyms                  #>    <chr>       <chr>         <lgl>    <chr>                           #>  1 EFO_0000712 NA            FALSE    Acute Cerebrovascular Accident  #>  2 EFO_0000712 NA            FALSE    Acute Cerebrovascular Accidents #>  3 EFO_0000712 NA            FALSE    Acute Stroke                    #>  4 EFO_0000712 NA            FALSE    Acute Strokes                   #>  5 EFO_0000712 NA            FALSE    Apoplexy                        #>  6 EFO_0000712 NA            FALSE    Apoplexy, Cerebrovascular       #>  7 EFO_0000712 NA            FALSE    Brain Vascular Accident         #>  8 EFO_0000712 NA            FALSE    Brain Vascular Accidents        #>  9 EFO_0000712 NA            FALSE    CEREBROVASCULAR ACCIDENT, (CVA) #> 10 EFO_0000712 NA            FALSE    CVA                             #> # … with 43 more rows #> # ℹ Use `print(n = ...)` to see more rows #>  #> Slot \"trait_mapped_terms\": #> # A tibble: 13 × 4 #>    efo_id      parent_efo_id is_child trait_mapped_terms   #>    <chr>       <chr>         <lgl>    <chr>                #>  1 EFO_0000712 NA            FALSE    HP:0001297           #>  2 EFO_0000712 NA            FALSE    ICD10:I64            #>  3 EFO_0000712 NA            FALSE    MESH:D020521         #>  4 EFO_0000712 NA            FALSE    MONDO:0005098        #>  5 EFO_0000712 NA            FALSE    MeSH:D020521         #>  6 EFO_0000712 NA            FALSE    MedDRA:10042244      #>  7 EFO_0000712 NA            FALSE    NCIT:C3390           #>  8 EFO_0000712 NA            FALSE    NCIt:C3390           #>  9 EFO_0000712 NA            FALSE    NIFSTD:birnlex_12783 #> 10 EFO_0000712 NA            FALSE    OMIM:601367          #> 11 EFO_0000712 NA            FALSE    SCTID:230690007      #> 12 EFO_0000712 NA            FALSE    SNOMEDCT:230690007   #> 13 EFO_0000712 NA            FALSE    SNOMEDCT:422504002"},{"path":"https://maialab.org/quincunx/articles/getting-traits.html","id":"exact-matching","dir":"Articles","previous_headings":"Getting catalogued traits from PGS Catalog","what":"Exact matching","title":"Getting Traits","text":"default, trait term matched exactly. want relax matching, indicate parameter exact_term set FALSE. way get, potentially, results, example case, ischemic stroke (HP_0002140) now also returned:","code":"get_traits(trait_term = 'stroke', exact_term = FALSE) #> An object of class \"traits\" #> Slot \"traits\": #> # A tibble: 3 × 6 #>   efo_id      parent_efo_id is_child trait                         descr…¹ url   #>   <chr>       <chr>         <lgl>    <chr>                         <chr>   <chr> #> 1 HP_0002140  NA            FALSE    Ischemic stroke               Acute … http… #> 2 EFO_0010555 NA            FALSE    left ventricular stroke volu… Quanti… http… #> 3 EFO_0000712 NA            FALSE    stroke                        A sudd… http… #> # … with abbreviated variable name ¹​description #>  #> Slot \"pgs_ids\": #> # A tibble: 9 × 4 #>   efo_id      parent_efo_id is_child pgs_id    #>   <chr>       <chr>         <lgl>    <chr>     #> 1 HP_0002140  NA            FALSE    PGS000039 #> 2 HP_0002140  NA            FALSE    PGS000665 #> 3 HP_0002140  NA            FALSE    PGS000911 #> 4 EFO_0010555 NA            FALSE    PGS001413 #> 5 EFO_0000712 NA            FALSE    PGS000038 #> 6 EFO_0000712 NA            FALSE    PGS000039 #> 7 EFO_0000712 NA            FALSE    PGS000665 #> 8 EFO_0000712 NA            FALSE    PGS000911 #> 9 EFO_0000712 NA            FALSE    PGS002259 #>  #> Slot \"child_pgs_ids\": #> # A tibble: 0 × 4 #> # … with 4 variables: efo_id <chr>, parent_efo_id <chr>, is_child <lgl>, #> #   child_pgs_id <chr> #> # ℹ Use `colnames()` to see all variable names #>  #> Slot \"trait_categories\": #> # A tibble: 4 × 4 #>   efo_id      parent_efo_id is_child trait_categories           #>   <chr>       <chr>         <lgl>    <chr>                      #> 1 HP_0002140  NA            FALSE    Other trait                #> 2 EFO_0010555 NA            FALSE    Cardiovascular measurement #> 3 EFO_0000712 NA            FALSE    Cardiovascular disease     #> 4 EFO_0000712 NA            FALSE    Neurological disorder      #>  #> Slot \"trait_synonyms\": #> # A tibble: 54 × 4 #>    efo_id      parent_efo_id is_child trait_synonyms                  #>    <chr>       <chr>         <lgl>    <chr>                           #>  1 HP_0002140  NA            FALSE    Ischaemic stroke                #>  2 EFO_0000712 NA            FALSE    Acute Cerebrovascular Accident  #>  3 EFO_0000712 NA            FALSE    Acute Cerebrovascular Accidents #>  4 EFO_0000712 NA            FALSE    Acute Stroke                    #>  5 EFO_0000712 NA            FALSE    Acute Strokes                   #>  6 EFO_0000712 NA            FALSE    Apoplexy                        #>  7 EFO_0000712 NA            FALSE    Apoplexy, Cerebrovascular       #>  8 EFO_0000712 NA            FALSE    Brain Vascular Accident         #>  9 EFO_0000712 NA            FALSE    Brain Vascular Accidents        #> 10 EFO_0000712 NA            FALSE    CEREBROVASCULAR ACCIDENT, (CVA) #> # … with 44 more rows #> # ℹ Use `print(n = ...)` to see more rows #>  #> Slot \"trait_mapped_terms\": #> # A tibble: 16 × 4 #>    efo_id      parent_efo_id is_child trait_mapped_terms    #>    <chr>       <chr>         <lgl>    <chr>                 #>  1 HP_0002140  NA            FALSE    SNOMEDCT_US:422504002 #>  2 HP_0002140  NA            FALSE    UMLS:C0948008         #>  3 EFO_0010555 NA            FALSE    PMID:31554410         #>  4 EFO_0000712 NA            FALSE    HP:0001297            #>  5 EFO_0000712 NA            FALSE    ICD10:I64             #>  6 EFO_0000712 NA            FALSE    MESH:D020521          #>  7 EFO_0000712 NA            FALSE    MONDO:0005098         #>  8 EFO_0000712 NA            FALSE    MeSH:D020521          #>  9 EFO_0000712 NA            FALSE    MedDRA:10042244       #> 10 EFO_0000712 NA            FALSE    NCIT:C3390            #> 11 EFO_0000712 NA            FALSE    NCIt:C3390            #> 12 EFO_0000712 NA            FALSE    NIFSTD:birnlex_12783  #> 13 EFO_0000712 NA            FALSE    OMIM:601367           #> 14 EFO_0000712 NA            FALSE    SCTID:230690007       #> 15 EFO_0000712 NA            FALSE    SNOMEDCT:230690007    #> 16 EFO_0000712 NA            FALSE    SNOMEDCT:422504002"},{"path":"https://maialab.org/quincunx/articles/getting-traits.html","id":"subtraits-child-traits","dir":"Articles","previous_headings":"Getting catalogued traits from PGS Catalog","what":"Subtraits (child traits)","title":"Getting Traits","text":"default, subtraits (child traits), retrieved get_traits(). want get matching traits child traits thereof, indicate parameter include_children set TRUE. example \"breast cancer\": column is_child indicates whether trait retrieved direct result query . is_child TRUE trait returned child trait matching trait, FALSE direct result query. case child traits, column parent_efo_id indicates EFO trait identifier parent trait, .e. direct matching trait, NA otherwise.","code":"get_traits(trait_term = 'breast cancer', include_children = TRUE) #> An object of class \"traits\" #> Slot \"traits\": #> # A tibble: 9 × 6 #>   efo_id        parent_efo_id is_child trait                       descr…¹ url   #>   <chr>         <chr>         <lgl>    <chr>                       <chr>   <chr> #> 1 MONDO_0007254 NA            FALSE    breast cancer               A prim… http… #> 2 MONDO_0021115 MONDO_0007254 TRUE     luminal B breast carcinoma  A biol… http… #> 3 MONDO_0021116 MONDO_0007254 TRUE     luminal A breast carcinoma  A biol… http… #> 4 EFO_1000649   MONDO_0007254 TRUE     estrogen-receptor positive… A subt… http… #> 5 EFO_1000650   MONDO_0007254 TRUE     estrogen-receptor negative… A subt… http… #> 6 EFO_1000294   MONDO_0007254 TRUE     HER2 Positive Breast Carci… A biol… http… #> 7 EFO_0005537   MONDO_0007254 TRUE     triple-negative breast can… An inv… http… #> 8 EFO_0000305   MONDO_0007254 TRUE     breast carcinoma            A carc… http… #> 9 EFO_0009780   MONDO_0007254 TRUE     HER2 negative breast carci… A biol… http… #> # … with abbreviated variable name ¹​description #>  #> Slot \"pgs_ids\": #> # A tibble: 112 × 4 #>    efo_id        parent_efo_id is_child pgs_id    #>    <chr>         <chr>         <lgl>    <chr>     #>  1 MONDO_0021115 MONDO_0007254 TRUE     PGS000214 #>  2 MONDO_0021116 MONDO_0007254 TRUE     PGS000212 #>  3 EFO_1000649   MONDO_0007254 TRUE     PGS000002 #>  4 EFO_1000649   MONDO_0007254 TRUE     PGS000005 #>  5 EFO_1000649   MONDO_0007254 TRUE     PGS000008 #>  6 EFO_1000649   MONDO_0007254 TRUE     PGS000046 #>  7 EFO_1000649   MONDO_0007254 TRUE     PGS000347 #>  8 EFO_1000649   MONDO_0007254 TRUE     PGS000774 #>  9 EFO_1000650   MONDO_0007254 TRUE     PGS000003 #> 10 EFO_1000650   MONDO_0007254 TRUE     PGS000006 #> # … with 102 more rows #> # ℹ Use `print(n = ...)` to see more rows #>  #> Slot \"child_pgs_ids\": #> # A tibble: 131 × 4 #>    efo_id        parent_efo_id is_child child_pgs_id #>    <chr>         <chr>         <lgl>    <chr>        #>  1 MONDO_0007254 NA            FALSE    PGS000001    #>  2 MONDO_0007254 NA            FALSE    PGS000002    #>  3 MONDO_0007254 NA            FALSE    PGS000003    #>  4 MONDO_0007254 NA            FALSE    PGS000004    #>  5 MONDO_0007254 NA            FALSE    PGS000005    #>  6 MONDO_0007254 NA            FALSE    PGS000006    #>  7 MONDO_0007254 NA            FALSE    PGS000007    #>  8 MONDO_0007254 NA            FALSE    PGS000008    #>  9 MONDO_0007254 NA            FALSE    PGS000009    #> 10 MONDO_0007254 NA            FALSE    PGS000015    #> # … with 121 more rows #> # ℹ Use `print(n = ...)` to see more rows #>  #> Slot \"trait_categories\": #> # A tibble: 9 × 4 #>   efo_id        parent_efo_id is_child trait_categories #>   <chr>         <chr>         <lgl>    <chr>            #> 1 MONDO_0007254 NA            FALSE    Cancer           #> 2 MONDO_0021115 MONDO_0007254 TRUE     Cancer           #> 3 MONDO_0021116 MONDO_0007254 TRUE     Cancer           #> 4 EFO_1000649   MONDO_0007254 TRUE     Cancer           #> 5 EFO_1000650   MONDO_0007254 TRUE     Cancer           #> 6 EFO_1000294   MONDO_0007254 TRUE     Cancer           #> 7 EFO_0005537   MONDO_0007254 TRUE     Cancer           #> 8 EFO_0000305   MONDO_0007254 TRUE     Cancer           #> 9 EFO_0009780   MONDO_0007254 TRUE     Cancer           #>  #> Slot \"trait_synonyms\": #> # A tibble: 40 × 4 #>    efo_id        parent_efo_id is_child trait_synonyms                   #>    <chr>         <chr>         <lgl>    <chr>                            #>  1 MONDO_0007254 NA            FALSE    BC                               #>  2 MONDO_0007254 NA            FALSE    breast cancer                    #>  3 MONDO_0007254 NA            FALSE    cancer of breast                 #>  4 MONDO_0007254 NA            FALSE    malignant breast neoplasm        #>  5 MONDO_0007254 NA            FALSE    malignant breast tumor           #>  6 MONDO_0007254 NA            FALSE    malignant neoplasm of breast     #>  7 MONDO_0007254 NA            FALSE    malignant neoplasm of the breast #>  8 MONDO_0007254 NA            FALSE    malignant tumor of breast        #>  9 MONDO_0007254 NA            FALSE    malignant tumor of the breast    #> 10 MONDO_0007254 NA            FALSE    mammary cancer                   #> # … with 30 more rows #> # ℹ Use `print(n = ...)` to see more rows #>  #> Slot \"trait_mapped_terms\": #> # A tibble: 38 × 4 #>    efo_id        parent_efo_id is_child trait_mapped_terms #>    <chr>         <chr>         <lgl>    <chr>              #>  1 MONDO_0007254 NA            FALSE    DOID:1612          #>  2 MONDO_0007254 NA            FALSE    ICD10CM:C50        #>  3 MONDO_0007254 NA            FALSE    ICD9:174.8         #>  4 MONDO_0007254 NA            FALSE    NCIT:C9335         #>  5 MONDO_0007254 NA            FALSE    SCTID:254837009    #>  6 MONDO_0021115 MONDO_0007254 TRUE     NCIT:C53555        #>  7 MONDO_0021115 MONDO_0007254 TRUE     UMLS:C3642346      #>  8 MONDO_0021116 MONDO_0007254 TRUE     NCIT:C53554        #>  9 MONDO_0021116 MONDO_0007254 TRUE     UMLS:C3642345      #> 10 EFO_1000649   MONDO_0007254 TRUE     DOID:0060075       #> # … with 28 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://maialab.org/quincunx/articles/getting-traits.html","id":"getting-all-traits","dir":"Articles","previous_headings":"","what":"Getting all traits","title":"Getting Traits","text":"retrieve traits simply leave parameters efo_id trait_term NULL (default):","code":"get_traits()"},{"path":"https://maialab.org/quincunx/articles/getting-traits.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Getting Traits","text":"1. Khera, . V. et al. Polygenic prediction weight obesity trajectories birth adulthood. Cell 177, 587–596.e9 (2019). 2. Kuchenbaecker, K. et al. transferability lipid loci across african, asian european cohorts. Nature Communications 10, (2019). 3. Lee, J. J. et al. Gene discovery polygenic prediction genome-wide association study educational attainment 1.1 million individuals. Nature Genetics 50, 1112–1121 (2018). 4. Inouye, M. et al. Genomic risk prediction coronary artery disease 480,000 adults. Journal American College Cardiology 72, 1883–1893 (2018). 5. Khera, . V. et al. Genome-wide polygenic scores common diseases identify individuals risk equivalent monogenic mutations. Nature Genetics 50, 1219–1224 (2018). 6. Mavaddat, N. et al. Polygenic Risk Scores Prediction Breast Cancer Breast Cancer Subtypes. American Journal Human Genetics 104, 21–34 (2019). 7. Zheutlin, . B. et al. Penetrance pleiotropy polygenic risk scores schizophrenia 106,160 patients across four health care systems. American Journal Psychiatry 176, 846–855 (2019).","code":""},{"path":"https://maialab.org/quincunx/articles/identifiers.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Identifiers","text":"data provided quincunx includes various identifiers. document serves quick reference list identifiers might find objects returned quincunx functions. identifiers externally defined others created quincunx aid linking rows among tables. external identifiers global scope, .e., meaning valid regardless context, e.g., PGS identifier unique always identifies polygenic score. Identifiers whose scope local surrogate IDs help relating data observations across tables, special meaning outside tables appear (sample_id, effect_size_id, classification_metrics_id other_metrics_id.)","code":""},{"path":"https://maialab.org/quincunx/articles/identifiers.html","id":"mapping-between-identifiers","dir":"Articles","previous_headings":"","what":"Mapping between identifiers","title":"Identifiers","text":"table can see type mappings—one--one one--many—possible main PGS Catalog entity identifiers. mappings indicated N/implemented yet. mappings provided set functions form <from_id>_to_<to_id>(), e.g., function pgs_to_pgp() provides mapping PGS identifiers (pgs_id) PGP identifiers (pgp_id). can find available id-mapping functions Accession identifier mapping.  technical side note, mappings marked ↯ achieved successive requests different endpoints, e.g., function pss_to_pgs() find associated pgs_id one pss_id, needs first map pss_id ppm_id, obtained ppm_id pgs_id.","code":""},{"path":"https://maialab.org/quincunx/articles/pgs-cat-ent-subsetting.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"PGS Catalog Entity Subsetting","text":"PGS Catalog entities represented quincunx S4 objects. article, explain subset objects using [ operator. nutshell, provide subsetting either position object’s respective identifier. main entities/objects : Scores Publications Traits Sample Sets Performance Metrics general approach subset various S4 objects . Hence, avoid repetition, provide set comprehensive examples scores object. Subsetting objects illustrated subsetting identifiers emphasise different objects different associated identifiers. know subset tables included S4 objects, please take look Subsetting tibbles. Start loading quincunx:","code":"library(quincunx)"},{"path":[]},{"path":"https://maialab.org/quincunx/articles/pgs-cat-ent-subsetting.html","id":"subsetting-scores-by-position","dir":"Articles","previous_headings":"Subsetting scores","what":"Subsetting scores by position","title":"PGS Catalog Entity Subsetting","text":"illustrative purposes, let us get arbitrary polygenic scores objects, say, first 10 PGSs catalog: object my_scores S4 object class scores, see class?scores details. quincunx, S4 object contains least one (first) table observation refers entity. access tables S4 objects use @ operator. first table my_scores scores: table many rows polygenic scores. one way knowing many scores object. Alternatively, can use function n() object: important know number scores plan subset my_scores object position. case 10 scores. want subset first, fifth, tenth score, : returns new object containing data scores \"PGS000001\", \"PGS000005\" \"PGS000010\". Notice operation automatically traverses tables my_scores object subsets tables accordingly keeping rows corresponding first, fifth tenth scores. example, compare table samples my_scores object subsetting. subsetting: subsetting c(1, 5, 10):","code":"pgs_ids <- sprintf('PGS%06d', 1:10) my_scores <- get_scores(pgs_ids) my_scores@scores #> # A tibble: 10 × 12 #>    pgs_id    pgs_name    scori…¹ match…² repor…³ trait…⁴ pgs_m…⁵ pgs_m…⁶ n_var…⁷ #>    <chr>     <chr>       <chr>   <lgl>   <chr>   <chr>   <chr>   <chr>     <int> #>  1 PGS000001 PRS77_BC    https:… TRUE    Breast… NA      SNPs p… P<5x10…      77 #>  2 PGS000002 PRS77_ERpos https:… TRUE    ER-pos… NA      SNPs p… P<5x10…      77 #>  3 PGS000003 PRS77_ERneg https:… TRUE    ER-neg… NA      SNPs p… P<5x10…      77 #>  4 PGS000004 PRS313_BC   https:… TRUE    Breast… NA      Hard-T… p < 10…     313 #>  5 PGS000005 PRS313_ERp… https:… TRUE    ER-pos… NA      Hard-T… p < 10…     313 #>  6 PGS000006 PRS313_ERn… https:… TRUE    ER-neg… NA      Hard-T… p < 10…     313 #>  7 PGS000007 PRS3820_BC  https:… TRUE    Breast… NA      LASSO … p < 0.…    3820 #>  8 PGS000008 PRS3820_ER… https:… TRUE    ER-pos… NA      LASSO … p < 0.…    3820 #>  9 PGS000009 PRS3820_ER… https:… TRUE    ER-neg… NA      LASSO … p < 0.…    3820 #> 10 PGS000010 GRS27       https:… TRUE    Corona… NA      Genome… NA           27 #> # … with 3 more variables: n_variants_interactions <int>, assembly <chr>, #> #   license <chr>, and abbreviated variable names ¹​scoring_file, #> #   ²​matches_publication, ³​reported_trait, ⁴​trait_additional_description, #> #   ⁵​pgs_method_name, ⁶​pgs_method_params, ⁷​n_variants #> # ℹ Use `colnames()` to see all variable names  nrow(my_scores@scores) #> [1] 10 quincunx::n(my_scores) #> [1] 10 my_scores[c(1, 5, 10)]@scores[1:2] #> # A tibble: 3 × 2 #>   pgs_id    pgs_name     #>   <chr>     <chr>        #> 1 PGS000001 PRS77_BC     #> 2 PGS000005 PRS313_ERpos #> 3 PGS000010 GRS27 my_scores@samples[1:4] #> # A tibble: 16 × 4 #>    pgs_id    sample_id stage sample_size #>    <chr>         <int> <chr>       <int> #>  1 PGS000001         1 gwas        22627 #>  2 PGS000002         1 gwas        22627 #>  3 PGS000003         1 gwas        22627 #>  4 PGS000004         1 gwas       158648 #>  5 PGS000004         2 dev         10444 #>  6 PGS000005         1 gwas        87368 #>  7 PGS000005         2 dev          5159 #>  8 PGS000006         1 gwas        87368 #>  9 PGS000006         2 dev          5159 #> 10 PGS000007         1 gwas       158648 #> 11 PGS000007         2 dev         10444 #> 12 PGS000008         1 gwas        87368 #> 13 PGS000008         2 dev          5159 #> 14 PGS000009         1 gwas        87368 #> 15 PGS000009         2 dev          5159 #> 16 PGS000010         1 gwas        86995 my_scores[c(1, 5, 10)]@samples[1:4] #> # A tibble: 4 × 4 #>   pgs_id    sample_id stage sample_size #>   <chr>         <int> <chr>       <int> #> 1 PGS000001         1 gwas        22627 #> 2 PGS000005         1 gwas        87368 #> 3 PGS000005         2 dev          5159 #> 4 PGS000010         1 gwas        86995"},{"path":"https://maialab.org/quincunx/articles/pgs-cat-ent-subsetting.html","id":"subsetting-scores-by-identifer","dir":"Articles","previous_headings":"Subsetting scores","what":"Subsetting scores by identifer","title":"PGS Catalog Entity Subsetting","text":"subset identifier simply use character vector identifiers interest. Let us say now want two identifiers: \"PGS000002\" \"PGS000008\". need :","code":"my_scores[c('PGS000002', 'PGS000008')]@scores[1:2] #> # A tibble: 2 × 2 #>   pgs_id    pgs_name      #>   <chr>     <chr>         #> 1 PGS000002 PRS77_ERpos   #> 2 PGS000008 PRS3820_ERpos"},{"path":"https://maialab.org/quincunx/articles/pgs-cat-ent-subsetting.html","id":"subsetting-using-repeated-positions-or-identifiers","dir":"Articles","previous_headings":"Subsetting scores","what":"Subsetting using repeated positions or identifiers","title":"PGS Catalog Entity Subsetting","text":"Please note repeat position identifier, get score repeated: using third position twice:","code":"my_scores[c('PGS000003', 'PGS000003')]@scores[1:2] #> # A tibble: 2 × 2 #>   pgs_id    pgs_name    #>   <chr>     <chr>       #> 1 PGS000003 PRS77_ERneg #> 2 PGS000003 PRS77_ERneg  quincunx::n(my_scores[c('PGS000003', 'PGS000003')]) #> [1] 2 my_scores[c(3, 3)]@scores[1:2] #> # A tibble: 2 × 2 #>   pgs_id    pgs_name    #>   <chr>     <chr>       #> 1 PGS000003 PRS77_ERneg #> 2 PGS000003 PRS77_ERneg  quincunx::n(my_scores[c(3, 3)]) #> [1] 2"},{"path":"https://maialab.org/quincunx/articles/pgs-cat-ent-subsetting.html","id":"subsetting-using-negative-positions","dir":"Articles","previous_headings":"Subsetting scores","what":"Subsetting using negative positions","title":"PGS Catalog Entity Subsetting","text":"Just like basic R objects, can also use negative indices drop elements object. also supported quincunx’s S4 objects. example, drop now first, fifth tenth score:","code":"# Notice the minus sign before c(1, 5, 10) my_scores[-c(1, 5, 10)]@scores[1:2] #> # A tibble: 7 × 2 #>   pgs_id    pgs_name      #>   <chr>     <chr>         #> 1 PGS000002 PRS77_ERpos   #> 2 PGS000003 PRS77_ERneg   #> 3 PGS000004 PRS313_BC     #> 4 PGS000006 PRS313_ERneg  #> 5 PGS000007 PRS3820_BC    #> 6 PGS000008 PRS3820_ERpos #> 7 PGS000009 PRS3820_ERneg"},{"path":"https://maialab.org/quincunx/articles/pgs-cat-ent-subsetting.html","id":"subsetting-with-non-existing-positions-or-identifiers","dir":"Articles","previous_headings":"Subsetting scores","what":"Subsetting with non-existing positions or identifiers","title":"PGS Catalog Entity Subsetting","text":"request position identifier match object, result empty object. example, 11th position present my_scores returned object empty: Please note returned object still valid scores object contains expected tables object. just tables rows. behaviour expected try subset non-existing identifiers:","code":"my_scores[11]@scores[1:2] #> # A tibble: 0 × 2 #> # … with 2 variables: pgs_id <chr>, pgs_name <chr> #> # ℹ Use `colnames()` to see all variable names  quincunx::n(my_scores[11]) #> [1] 0 my_scores['PGS000011']@scores[1:2] #> # A tibble: 0 × 2 #> # … with 2 variables: pgs_id <chr>, pgs_name <chr> #> # ℹ Use `colnames()` to see all variable names  quincunx::n(my_scores['PGS000011']) #> [1] 0"},{"path":"https://maialab.org/quincunx/articles/pgs-cat-ent-subsetting.html","id":"subsetting-publications","dir":"Articles","previous_headings":"","what":"Subsetting Publications","title":"PGS Catalog Entity Subsetting","text":"Subsetting publications objects, S4 object quincunx, works exactly way described scores. difference identifiers changed accordingly. next sections show subset using respective identifiers. visual inspection can see Abraham G first author PGP000005, PGP000027, PGP000028, PGP000029. keep publications subset publication object my_publ PGP identifiers:","code":"# Get all publications where Abraham G is an author my_publ <- get_publications(author = 'Abraham G')  # Note that the column `author_fullname` corresponds to the first author. my_publ@publications[c('pgp_id', 'pubmed_id', 'publication_date', 'author_fullname')] #> # A tibble: 8 × 4 #>   pgp_id    pubmed_id publication_date author_fullname #>   <chr>     <chr>     <date>           <chr>           #> 1 PGP000005 27655226  2016-09-21       Abraham G       #> 2 PGP000007 30309464  2018-10-01       Inouye M        #> 3 PGP000027 31862893  2019-12-20       Abraham G       #> 4 PGP000028 24550740  2014-02-13       Abraham G       #> 5 PGP000029 26244058  2015-07-16       Abraham G       #> 6 PGP000052 32887683  2020-09-04       Cánovas R       #> 7 PGP000137 34750571  2021-11-08       Ritchie SC      #> 8 PGP000209 34039031  2021-05-27       Neumann JT my_publ[c('PGP000005', 'PGP000027', 'PGP000028', 'PGP000029')]@publications[c('pgp_id', 'pubmed_id', 'publication_date', 'author_fullname')] #> # A tibble: 4 × 4 #>   pgp_id    pubmed_id publication_date author_fullname #>   <chr>     <chr>     <date>           <chr>           #> 1 PGP000005 27655226  2016-09-21       Abraham G       #> 2 PGP000027 31862893  2019-12-20       Abraham G       #> 3 PGP000028 24550740  2014-02-13       Abraham G       #> 4 PGP000029 26244058  2015-07-16       Abraham G"},{"path":"https://maialab.org/quincunx/articles/pgs-cat-ent-subsetting.html","id":"subsetting-traits","dir":"Articles","previous_headings":"","what":"Subsetting Traits","title":"PGS Catalog Entity Subsetting","text":"illustrate subsetting traits object EFO identifiers, let us say ’d like create traits object traits whose trait name contained keyword \"lymph\". , start downloading traits traits object. look term \"lymph\" trait column, find EFO identifiers matched. Finally, use identifiers create traits object containing matched identifiers. Get traits: Find traits name (trait column traits table) term \"lymph\" (use grep ): Select EFO identifiers whose trait name contained \"lymph\": Finally, create new traits object (traits_only_lymph) traits matching \"lymph\" subsetting identifier: Confirm indeed traits \"lymph\" name present: might noticed used lymph_traits_positions subset all_traits position instead effect. straightforward, point illustrate subsetting EFO identifiers. Moreover, exercise, might want compare results obtained example :","code":"all_traits <- get_traits(interactive = FALSE) lymph_traits_positions <- grep('lymph', all_traits@traits$trait)  all_traits[lymph_traits_positions]@traits[c('efo_id', 'trait')] #> # A tibble: 8 × 2 #>   efo_id        trait                               #>   <chr>         <chr>                               #> 1 EFO_0000095   chronic lymphocytic leukemia        #> 2 EFO_0000403   diffuse large B-cell lymphoma       #> 3 MONDO_0018906 follicular lymphoma                 #> 4 EFO_0000183   Hodgkins lymphoma                   #> 5 EFO_0004587   lymphocyte count                    #> 6 EFO_0007993   lymphocyte percentage of leukocytes #> 7 EFO_0004289   lymphoid leukemia                   #> 8 EFO_0005952   non-Hodgkins lymphoma my_efo_ids <- all_traits[lymph_traits_positions]@traits$efo_id my_efo_ids #> [1] \"EFO_0000095\"   \"EFO_0000403\"   \"MONDO_0018906\" \"EFO_0000183\"   #> [5] \"EFO_0004587\"   \"EFO_0007993\"   \"EFO_0004289\"   \"EFO_0005952\" traits_only_lymph <- all_traits[my_efo_ids] traits_only_lymph@traits[c(1, 4)] #> # A tibble: 8 × 2 #>   efo_id        trait                               #>   <chr>         <chr>                               #> 1 EFO_0000095   chronic lymphocytic leukemia        #> 2 EFO_0000403   diffuse large B-cell lymphoma       #> 3 MONDO_0018906 follicular lymphoma                 #> 4 EFO_0000183   Hodgkins lymphoma                   #> 5 EFO_0004587   lymphocyte count                    #> 6 EFO_0007993   lymphocyte percentage of leukocytes #> 7 EFO_0004289   lymphoid leukemia                   #> 8 EFO_0005952   non-Hodgkins lymphoma # Get traits containing the term 'lymph' in the name or its description get_traits(trait_term = 'lymph', exact_term = FALSE)  # Get traits whose name is exactly 'lymph' get_traits(trait_term = 'lymph', exact_term = TRUE)"},{"path":"https://maialab.org/quincunx/articles/pgs-cat-ent-subsetting.html","id":"subsetting-sample-sets","dir":"Articles","previous_headings":"","what":"Subsetting Sample Sets","title":"PGS Catalog Entity Subsetting","text":"subset PGS Sample Sets use identifiers form: \"PSS000000\". ’s simple example download two Sample Sets (\"PSS000008\" \"PSS000042\"), afterwards take \"PSS000008\":","code":"my_sample_sets <- get_sample_sets(pss_id = c('PSS000008', 'PSS000042'))  # Table `samples` contains the samples that comprise this Sample Set my_sample_sets['PSS000008']@samples[1:6] #> # A tibble: 3 × 6 #>   pss_id    sample_id stage sample_size sample_cases sample_controls #>   <chr>         <int> <chr>       <int>        <int>           <int> #> 1 PSS000008         1 eval         6978          149            6829 #> 2 PSS000008         2 eval        27271           NA              NA #> 3 PSS000008         3 eval         8749          108            8641"},{"path":"https://maialab.org/quincunx/articles/pgs-cat-ent-subsetting.html","id":"subsetting-performance-metrics","dir":"Articles","previous_headings":"","what":"Subsetting Performance Metrics","title":"PGS Catalog Entity Subsetting","text":"Without much creativity, subset Performance Metrics objects identifiers form: \"PPM000000\". Example:","code":"my_perf_metrics <- get_performance_metrics(ppm_id = c('PPM000001', 'PPM000002'))  # Table `samples` contains the samples that comprise this Performance Metrics my_perf_metrics['PPM000002']@samples[1:6] #> # A tibble: 1 × 6 #>   ppm_id    pss_id    sample_id stage sample_size sample_cases #>   <chr>     <chr>         <int> <chr>       <int>        <int> #> 1 PPM000002 PSS000003         1 eval        53923        21365"},{"path":"https://maialab.org/quincunx/articles/pgs-construction-process.html","id":"overview-of-polygenic-risk-score-construction","dir":"Articles","previous_headings":"","what":"Overview of polygenic risk score construction","title":"PGS Construction Process and Stages","text":"PGS calculated weighted sum several risk variants genome-wide association study one samples multiple p-value thresholds. effect sizes typically estimated \\(\\beta\\) (beta coefficients) odds ratios. PGS calculated one sample, distribution individual PGS assessed another independent sample set. Adapted Konuma & Okada (2021), CC 4.0.","code":""},{"path":"https://maialab.org/quincunx/articles/pgs-construction-process.html","id":"pgs-development-and-evaluation-stages","dir":"Articles","previous_headings":"","what":"PGS development and evaluation stages","title":"PGS Construction Process and Stages","text":"PGS Catalog, cohorts samples annotated according utilisation context, .e. stage, PGS construction process. quincunx, stage indicated stage variable can one values: gwas: annotate samples used derive variant associations (GWAS) dev: annotate samples used development training PGSs gwas/dev: catch-term annotate samples used either gwas dev stages eval: annotate samples used PGS evaluation stage encounter stage annotation tables objects returned quincunx’s retrieval functions. examples:","code":""},{"path":"https://maialab.org/quincunx/articles/pgs-construction-process.html","id":"in-a-scores-object","dir":"Articles","previous_headings":"PGS development and evaluation stages","what":"In a scores object","title":"PGS Construction Process and Stages","text":"","code":"get_scores('PGS000327')@samples #> # A tibble: 2 × 15 #>   pgs_id   sampl…¹ stage sampl…² sampl…³ sampl…⁴ sampl…⁵ pheno…⁶ ances…⁷ ances…⁸ #>   <chr>      <int> <chr>   <int>   <int>   <int>   <dbl> <chr>   <chr>   <chr>   #> 1 PGS0003…       1 gwas    46350      NA      NA      NA Cases … Europe… NA      #> 2 PGS0003…       2 dev     28592   10461   18131      NA Cases … Europe… NA      #> # … with 5 more variables: country <chr>, #> #   ancestry_additional_description <chr>, study_id <chr>, pubmed_id <chr>, #> #   cohorts_additional_description <chr>, and abbreviated variable names #> #   ¹​sample_id, ²​sample_size, ³​sample_cases, ⁴​sample_controls, #> #   ⁵​sample_percent_male, ⁶​phenotype_description, ⁷​ancestry_category, ⁸​ancestry #> # ℹ Use `colnames()` to see all variable names"},{"path":"https://maialab.org/quincunx/articles/pgs-construction-process.html","id":"in-a-sample_sets-object","dir":"Articles","previous_headings":"PGS development and evaluation stages","what":"In a sample_sets object","title":"PGS Construction Process and Stages","text":"","code":"get_sample_sets(pgs_id = 'PGS000327')@samples #> # A tibble: 1 × 15 #>   pss_id   sampl…¹ stage sampl…² sampl…³ sampl…⁴ sampl…⁵ pheno…⁶ ances…⁷ ances…⁸ #>   <chr>      <int> <chr>   <int>   <int>   <int>   <dbl> <chr>   <chr>   <chr>   #> 1 PSS0004…       1 eval     7148    2615    4532      NA Cases … Europe… NA      #> # … with 5 more variables: country <chr>, #> #   ancestry_additional_description <chr>, study_id <chr>, pubmed_id <chr>, #> #   cohorts_additional_description <chr>, and abbreviated variable names #> #   ¹​sample_id, ²​sample_size, ³​sample_cases, ⁴​sample_controls, #> #   ⁵​sample_percent_male, ⁶​phenotype_description, ⁷​ancestry_category, ⁸​ancestry #> # ℹ Use `colnames()` to see all variable names"},{"path":"https://maialab.org/quincunx/articles/pgs-construction-process.html","id":"in-a-performance_metrics-object","dir":"Articles","previous_headings":"PGS development and evaluation stages","what":"In a performance_metrics object","title":"PGS Construction Process and Stages","text":"","code":"get_performance_metrics(pgs_id = 'PGS000327')@samples #> # A tibble: 1 × 16 #>   ppm_id    pss_id sampl…¹ stage sampl…² sampl…³ sampl…⁴ sampl…⁵ pheno…⁶ ances…⁷ #>   <chr>     <chr>    <int> <chr>   <int>   <int>   <int>   <dbl> <chr>   <chr>   #> 1 PPM000879 PSS00…       1 eval     7148    2615    4532      NA Cases … Europe… #> # … with 6 more variables: ancestry <chr>, country <chr>, #> #   ancestry_additional_description <chr>, study_id <chr>, pubmed_id <chr>, #> #   cohorts_additional_description <chr>, and abbreviated variable names #> #   ¹​sample_id, ²​sample_size, ³​sample_cases, ⁴​sample_controls, #> #   ⁵​sample_percent_male, ⁶​phenotype_description, ⁷​ancestry_category #> # ℹ Use `colnames()` to see all variable names"},{"path":"https://maialab.org/quincunx/articles/pgs-construction-process.html","id":"in-the-stages_tally-table","dir":"Articles","previous_headings":"PGS development and evaluation stages","what":"In the stages_tally table:","title":"PGS Construction Process and Stages","text":"","code":"get_scores('PGS000327')@stages_tally #> # A tibble: 3 × 4 #>   pgs_id    stage sample_size n_sample_sets #>   <chr>     <chr>       <int>         <int> #> 1 PGS000327 gwas        46350            NA #> 2 PGS000327 dev         28592            NA #> 3 PGS000327 eval           NA             1"},{"path":"https://maialab.org/quincunx/articles/pgs-construction-process.html","id":"in-the-ancestry_frequencies-table","dir":"Articles","previous_headings":"PGS development and evaluation stages","what":"In the ancestry_frequencies table:","title":"PGS Construction Process and Stages","text":"","code":"get_scores('PGS000012')@ancestry_frequencies #> # A tibble: 4 × 4 #>   pgs_id    stage ancestry_class_symbol frequency #>   <chr>     <chr> <chr>                     <dbl> #> 1 PGS000012 gwas  MAE                         100 #> 2 PGS000012 dev   EUR                         100 #> 3 PGS000012 eval  EUR                          75 #> 4 PGS000012 eval  MAE                          25"},{"path":"https://maialab.org/quincunx/articles/pgs-construction-process.html","id":"and-in-multi_ancestry_composition-table","dir":"Articles","previous_headings":"PGS development and evaluation stages","what":"And in multi_ancestry_composition table:","title":"PGS Construction Process and Stages","text":"","code":"get_scores('PGS000012')@multi_ancestry_composition #> # A tibble: 4 × 4 #>   pgs_id    stage multi_ancestry_class_symbol ancestry_class_symbol #>   <chr>     <chr> <chr>                       <chr>                 #> 1 PGS000012 gwas  MAE                         EUR                   #> 2 PGS000012 gwas  MAE                         SAS                   #> 3 PGS000012 eval  MAE                         EUR                   #> 4 PGS000012 eval  MAE                         NR"},{"path":"https://maialab.org/quincunx/articles/pgs-construction-process.html","id":"in-a-cohorts-object","dir":"Articles","previous_headings":"PGS development and evaluation stages","what":"In a cohorts object:","title":"PGS Construction Process and Stages","text":"","code":"get_cohorts('23andMe')@pgs_ids #> # A tibble: 18 × 3 #>    cohort_symbol pgs_id    stage    #>    <chr>         <chr>     <chr>    #>  1 23andMe       PGS000336 gwas/dev #>  2 23andMe       PGS000730 gwas/dev #>  3 23andMe       PGS000731 gwas/dev #>  4 23andMe       PGS000732 gwas/dev #>  5 23andMe       PGS000766 gwas/dev #>  6 23andMe       PGS000767 gwas/dev #>  7 23andMe       PGS000780 gwas/dev #>  8 23andMe       PGS000790 gwas/dev #>  9 23andMe       PGS000800 gwas/dev #> 10 23andMe       PGS000810 gwas/dev #> 11 23andMe       PGS000867 gwas/dev #> 12 23andMe       PGS000902 gwas/dev #> 13 23andMe       PGS000903 gwas/dev #> 14 23andMe       PGS001774 gwas/dev #> 15 23andMe       PGS002235 gwas/dev #> 16 23andMe       PGS000730 eval     #> 17 23andMe       PGS000731 eval     #> 18 23andMe       PGS000732 eval"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"Let us assume breast cancer researcher, interested studying screening prevention disease. Now, imagine just recently noticed new publication claims developed set new polygenic risk scores powerful reliable predictors breast cancer risk 1. Perhaps now like investigate bit new polygenic risk scores assess potential application. know performance scores dependent various aspects, study design, participant demographics, case definitions, covariates adjusted . general, access information, carefully read paper searching details, usually get supplementary material, extra effort takes. However, scores already indexed manually curated PGS Catalog team, can benefit using free open resource quickly gather relevant data scores. happen R user, can use R Package quincunx retrieval functions fetch polygenic score metadata associated publication interest PGS Catalog REST API server. next.","code":""},{"path":[]},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"searching-for-publications-by-author-name","dir":"Articles","previous_headings":"Finding polygenic risk scores by publication","what":"Searching for publications by author name","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"check fortunate enough polygenic risk scores breast cancer 1 PGS Catalog, start loading quincunx package searching publication PGS Catalog. use function get_publications() start searching first author’s last name, .e. “Mavaddat”: ask PGS Catalog publications, returns S4 publications object two tables (slots): publications pgs_ids. can access tables @ operator. publications table (data frame) contains publications added PGS Catalog contain author whose last name “Mavaddat”: Seemingly 6 publications indexed PGS Catalog. publication added PGS Catalog gets unique identifier. identifier first column (pgp_id) publications table. number publications can obtained using function n() S4 object pub_by_mavaddat, asking directly number rows publications table: Moreover, can see Nasim Mavaddat first author publications name always present column author_fullname (contains name first author ). want know authors can access column authors (contains string comma separated author names). Now, identify publication interest amongst 6 publications, can check, example, PubMed identifier (column pubmed_id), check information journal name (column publication), publication title (column title) publication date (column publication_date). unambiguous approach use PubMed identifier. PubMed identifier \"30554720\". publication interest corresponds one returned row number 2 publications table: focus now publication filter others, can subset publications object pub_by_mavaddat, e.g., position, get new object tables (publications pgs_ids) filtered publication: see now publications table contains one entry , PGS Catalog identifier assigned publication PGP000002: pgs_ids see several PGS scores associated publication PGP000002. Besides listing score identifiers (pgs_id), also includes stage column annotates polygenic score relative PGS construction process (check page 2 quincunx cheatsheet visual illustration).","code":"library(quincunx) library(dplyr)  pub_by_mavaddat <- get_publications(author = 'Mavaddat') # Not case sensitive,                                                          # so \"mavaddat\" would                                                          # have worked just fine. pub_by_mavaddat@publications #> # A tibble: 6 × 8 #>   pgp_id    pubmed_id publication_date publication   title autho…¹ doi   authors #>   <chr>     <chr>     <date>           <chr>         <chr> <chr>   <chr> <chr>   #> 1 PGP000001 25855707  2015-04-08       J Natl Cance… Pred… Mavadd… 10.1… Mavadd… #> 2 PGP000002 30554720  2018-12-13       Am J Hum Gen… Poly… Mavadd… 10.1… Mavadd… #> 3 PGP000033 28376175  2017-07-01       J Natl Cance… Eval… Kuchen… 10.1… Kuchen… #> 4 PGP000109 33022221  2020-10-05       Am J Hum Gen… Brea… Kramer… 10.1… Kramer… #> 5 PGP000112 32737321  2020-07-31       Nat Commun    Euro… Ho WK   10.1… Ho WK,… #> 6 PGP000117 32665703  2020-07-15       Genet Med     Poly… Barnes… 10.1… Barnes… #> # … with abbreviated variable name ¹​author_fullname quincunx::n(pub_by_mavaddat) # Here we use quincunx::n() instead of n() to avoid namespace collisions with dplyr::n(). #> [1] 6 nrow(pub_by_mavaddat@publications) #> [1] 6 publication_row_index <- which(pub_by_mavaddat@publications$pubmed_id == \"30554720\") publication_row_index #> [1] 2 mavaddat2018 <- pub_by_mavaddat[publication_row_index] mavaddat2018 #> An object of class \"publications\" #> Slot \"publications\": #> # A tibble: 1 × 8 #>   pgp_id    pubmed_id publication_date publication   title autho…¹ doi   authors #>   <chr>     <chr>     <date>           <chr>         <chr> <chr>   <chr> <chr>   #> 1 PGP000002 30554720  2018-12-13       Am J Hum Gen… Poly… Mavadd… 10.1… Mavadd… #> # … with abbreviated variable name ¹​author_fullname #>  #> Slot \"pgs_ids\": #> # A tibble: 15 × 3 #>    pgp_id    pgs_id    stage    #>    <chr>     <chr>     <chr>    #>  1 PGP000002 PGS000004 gwas/dev #>  2 PGP000002 PGS000005 gwas/dev #>  3 PGP000002 PGS000006 gwas/dev #>  4 PGP000002 PGS000007 gwas/dev #>  5 PGP000002 PGS000008 gwas/dev #>  6 PGP000002 PGS000009 gwas/dev #>  7 PGP000002 PGS000001 eval     #>  8 PGP000002 PGS000002 eval     #>  9 PGP000002 PGS000003 eval     #> 10 PGP000002 PGS000004 eval     #> 11 PGP000002 PGS000005 eval     #> 12 PGP000002 PGS000006 eval     #> 13 PGP000002 PGS000007 eval     #> 14 PGP000002 PGS000008 eval     #> 15 PGP000002 PGS000009 eval mavaddat2018@publications$pgp_id #> [1] \"PGP000002\""},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"searching-for-publications-by-pubmed-id","dir":"Articles","previous_headings":"Finding polygenic risk scores by publication","what":"Searching for publications by PubMed ID","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"alternatively, albeit direct, route get publication query publications directly corresponding PubMed ID (30554720): get overview possible search criteria get_publications can use help function within R.","code":"pub_by_pmid_30554720 <- get_publications(pubmed_id = '30554720') pub_by_pmid_30554720 #> An object of class \"publications\" #> Slot \"publications\": #> # A tibble: 1 × 8 #>   pgp_id    pubmed_id publication_date publication   title autho…¹ doi   authors #>   <chr>     <chr>     <date>           <chr>         <chr> <chr>   <chr> <chr>   #> 1 PGP000002 30554720  2018-12-13       Am J Hum Gen… Poly… Mavadd… 10.1… Mavadd… #> # … with abbreviated variable name ¹​author_fullname #>  #> Slot \"pgs_ids\": #> # A tibble: 15 × 3 #>    pgp_id    pgs_id    stage    #>    <chr>     <chr>     <chr>    #>  1 PGP000002 PGS000004 gwas/dev #>  2 PGP000002 PGS000005 gwas/dev #>  3 PGP000002 PGS000006 gwas/dev #>  4 PGP000002 PGS000007 gwas/dev #>  5 PGP000002 PGS000008 gwas/dev #>  6 PGP000002 PGS000009 gwas/dev #>  7 PGP000002 PGS000001 eval     #>  8 PGP000002 PGS000002 eval     #>  9 PGP000002 PGS000003 eval     #> 10 PGP000002 PGS000004 eval     #> 11 PGP000002 PGS000005 eval     #> 12 PGP000002 PGS000006 eval     #> 13 PGP000002 PGS000007 eval     #> 14 PGP000002 PGS000008 eval     #> 15 PGP000002 PGS000009 eval ?get_publications  # or alternatively help(\"get_publications\")"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"from-publication-to-polygenic-risk-scores","dir":"Articles","previous_headings":"","what":"From publication to polygenic risk scores","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"Now found publication interest exists PGS Catalog, identifier PGP000002, can check now polygenic risk scores annotated Catalog. Polygenic scores (PGS) PGS Catalog indexed unique accession identifier form: “PGS000000” (“PGS” followed six digits). get PGS identifiers associated Mavaddat’s publication turn second table pgs_ids maps publication identifiers (PGP) PGS identifiers: Please note r length(unique(pub_by_pmid_30554720@pgs_ids$pgs_id)) unique scores, development evaluation stages, meaning paper published new polygenic scores (development stage), tested (evaluation stage). paper also evaluated 3 polygenic scores previously developed (firstly published another publication author). distinction stages important query database scores pgp_ids present publication, newly developed ones (development stage) retrieved. (See : section get_scores() function). knew, hand, PGP000002 associated Mavaddat’s publication, also taken advantage neat function pgp_to_pgs() quickly get associated polygenic score ids:","code":"pub_by_pmid_30554720@pgs_ids #> # A tibble: 15 × 3 #>    pgp_id    pgs_id    stage    #>    <chr>     <chr>     <chr>    #>  1 PGP000002 PGS000004 gwas/dev #>  2 PGP000002 PGS000005 gwas/dev #>  3 PGP000002 PGS000006 gwas/dev #>  4 PGP000002 PGS000007 gwas/dev #>  5 PGP000002 PGS000008 gwas/dev #>  6 PGP000002 PGS000009 gwas/dev #>  7 PGP000002 PGS000001 eval     #>  8 PGP000002 PGS000002 eval     #>  9 PGP000002 PGS000003 eval     #> 10 PGP000002 PGS000004 eval     #> 11 PGP000002 PGS000005 eval     #> 12 PGP000002 PGS000006 eval     #> 13 PGP000002 PGS000007 eval     #> 14 PGP000002 PGS000008 eval     #> 15 PGP000002 PGS000009 eval # Newly published PGS scores (development stage) pub_by_pmid_30554720@pgs_ids %>% dplyr::filter(stage == \"development\") #> # A tibble: 0 × 3 #> # … with 3 variables: pgp_id <chr>, pgs_id <chr>, stage <chr> #> # ℹ Use `colnames()` to see all variable names  # All PGS scores evaluated (evaluation stage)   pub_by_pmid_30554720@pgs_ids %>% dplyr::filter(stage == \"evaluation\")  #> # A tibble: 0 × 3 #> # … with 3 variables: pgp_id <chr>, pgs_id <chr>, stage <chr> #> # ℹ Use `colnames()` to see all variable names pgp_to_pgs('PGP000002') #> # A tibble: 15 × 3 #>    pgp_id    pgs_id    stage    #>    <chr>     <chr>     <chr>    #>  1 PGP000002 PGS000004 gwas/dev #>  2 PGP000002 PGS000005 gwas/dev #>  3 PGP000002 PGS000006 gwas/dev #>  4 PGP000002 PGS000007 gwas/dev #>  5 PGP000002 PGS000008 gwas/dev #>  6 PGP000002 PGS000009 gwas/dev #>  7 PGP000002 PGS000001 eval     #>  8 PGP000002 PGS000002 eval     #>  9 PGP000002 PGS000003 eval     #> 10 PGP000002 PGS000004 eval     #> 11 PGP000002 PGS000005 eval     #> 12 PGP000002 PGS000006 eval     #> 13 PGP000002 PGS000007 eval     #> 14 PGP000002 PGS000008 eval     #> 15 PGP000002 PGS000009 eval"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"polygenic-scores-published-by-mavaddat-et-al--2018","dir":"Articles","previous_headings":"","what":"Polygenic Scores published by Mavaddat et al. (2018)","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"dive metadata polygenic scores, use quincunx function get_scores(): returns S4 object scores contains six tables (slots): scores, publications, samples, demographics, cohorts, traits, stages_tally, ancestry_frequencies, multi_ancestry_composition. can quickly check variables table consulting quincunx cheatsheet. description variable annotated scores object help page can accessed class?scores.","code":"mavaddat2018_scores <- get_scores(pubmed_id = \"30554720\") slotNames(mavaddat2018_scores) #> [1] \"scores\"                     \"publications\"               #> [3] \"samples\"                    \"demographics\"               #> [5] \"cohorts\"                    \"traits\"                     #> [7] \"stages_tally\"               \"ancestry_frequencies\"       #> [9] \"multi_ancestry_composition\""},{"path":[]},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"scores-object-scores-table","dir":"Articles","previous_headings":"Polygenic Scores Metadata","what":"scores object | scores table","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"S4 scores object mavaddat2018_scores starts table named scores lists score one row. scores identified PGS identifier (pgs_id column). Note , previously explained, polygenic scores newly developed publication (developmental stage) retrieved, PGS scores evaluated publication. addition, scores can name (pgs_name column). may name assigned authors source publication, name assigned PGS Catalog curator order identify particular score throughout curating process. PGS names can already see presence suffixes “ERpos” “ERneg”, suggestive specialized polygenic risk scores estrogen-receptor positive negative samples. column scoring_file contains URL FTP location containing corresponding PGS scoring files. PGS scoring files text files provided PGS Catalog team containing source data can use compute polygenic scores particular individuals, .e. allow apply scores individual samples. Learn scoring files vignette(\"pgs-scoring-file\"). quick consultation file format PGS scoring files may also check second page quincunx cheatsheet. additional feature, quincunx allows download relevant PGS scoring files directly R using function read_scoring_file(), making data immediately available R analysis. column matches_publication logical value indicating whether published polygenic score exactly one present PGS scoring file provided PGS Catalog. case 6 scores provided exactly published (values “TRUE”). columns scores table hold relevant information. example, columns pgs_method_name pgs_method_params provide extra details PGS development method. Finally, n_variants informs number variants comprising polygenic risk score, assembly indicates genome assembly version used.","code":"mavaddat2018_scores@scores[c('pgs_id', 'pgs_name')] #> # A tibble: 6 × 2 #>   pgs_id    pgs_name      #>   <chr>     <chr>         #> 1 PGS000004 PRS313_BC     #> 2 PGS000005 PRS313_ERpos  #> 3 PGS000006 PRS313_ERneg  #> 4 PGS000007 PRS3820_BC    #> 5 PGS000008 PRS3820_ERpos #> 6 PGS000009 PRS3820_ERneg mavaddat2018_scores@scores['scoring_file'] #> # A tibble: 6 × 1 #>   scoring_file                                                                   #>   <chr>                                                                          #> 1 https://ftp.ebi.ac.uk/pub/databases/spot/pgs/scores/PGS000004/ScoringFiles/PG… #> 2 https://ftp.ebi.ac.uk/pub/databases/spot/pgs/scores/PGS000005/ScoringFiles/PG… #> 3 https://ftp.ebi.ac.uk/pub/databases/spot/pgs/scores/PGS000006/ScoringFiles/PG… #> 4 https://ftp.ebi.ac.uk/pub/databases/spot/pgs/scores/PGS000007/ScoringFiles/PG… #> 5 https://ftp.ebi.ac.uk/pub/databases/spot/pgs/scores/PGS000008/ScoringFiles/PG… #> 6 https://ftp.ebi.ac.uk/pub/databases/spot/pgs/scores/PGS000009/ScoringFiles/PG… mavaddat2018_scores@scores[c('pgs_id', 'matches_publication')] #> # A tibble: 6 × 2 #>   pgs_id    matches_publication #>   <chr>     <lgl>               #> 1 PGS000004 TRUE                #> 2 PGS000005 TRUE                #> 3 PGS000006 TRUE                #> 4 PGS000007 TRUE                #> 5 PGS000008 TRUE                #> 6 PGS000009 TRUE mavaddat2018_scores@scores[c('pgs_name', 'pgs_method_name', 'pgs_method_params', 'n_variants', 'assembly')] #> # A tibble: 6 × 5 #>   pgs_name      pgs_method_name                          pgs_m…¹ n_var…² assem…³ #>   <chr>         <chr>                                    <chr>     <int> <chr>   #> 1 PRS313_BC     Hard-Thresholding Stepwise Forward Regr… p < 10…     313 GRCh37  #> 2 PRS313_ERpos  Hard-Thresholding Stepwise Forward Regr… p < 10…     313 GRCh37  #> 3 PRS313_ERneg  Hard-Thresholding Stepwise Forward Regr… p < 10…     313 GRCh37  #> 4 PRS3820_BC    LASSO penalized regression               p < 0.…    3820 GRCh37  #> 5 PRS3820_ERpos LASSO penalized regression               p < 0.…    3820 GRCh37  #> 6 PRS3820_ERneg LASSO penalized regression               p < 0.…    3820 GRCh37  #> # … with abbreviated variable names ¹​pgs_method_params, ²​n_variants, ³​assembly"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"scores-object-publications-table","dir":"Articles","previous_headings":"Polygenic Scores Metadata","what":"scores object | publications table","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"scores S4 object contains table dedicated source publications used collect score(s) retrieved. case, surprising PGS scores map publication identifier, .e., PGP000002, starting point.","code":"mavaddat2018_scores@publications[c('pgs_id', 'pgp_id', 'publication_date', 'author_fullname')] #> # A tibble: 6 × 4 #>   pgs_id    pgp_id    publication_date author_fullname #>   <chr>     <chr>     <date>           <chr>           #> 1 PGS000004 PGP000002 2018-12-13       Mavaddat N      #> 2 PGS000005 PGP000002 2018-12-13       Mavaddat N      #> 3 PGS000006 PGP000002 2018-12-13       Mavaddat N      #> 4 PGS000007 PGP000002 2018-12-13       Mavaddat N      #> 5 PGS000008 PGP000002 2018-12-13       Mavaddat N      #> 6 PGS000009 PGP000002 2018-12-13       Mavaddat N"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"scores-object-samples-table","dir":"Articles","previous_headings":"Polygenic Scores Metadata","what":"scores object | samples table","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"third table (slot) scores S4 object pertains samples used development PGS scores. total 15 columns metadata details sample. row corresponds one sample associated polygenic scores, combination values first two columns, pgs_id sample_id, uniquely identifies sample table. samples shown samples table scores object annotated stage, can take two values: \"discovery\" \"training\". \"discovery\" samples typically used determining variants afterwards used polygenic score development. variants originate typically Genome-Wide Association Studies (GWAS). Hence, samples might linked GWAS Catalog. case, information provided column study_id, indicating GWAS Catalog accession identifier. may find information GWAS studies using function gwasrapidd::get_studies() gwasrapidd R package developed previously 2. \"training\" samples used training particular polygenic score. Together, two stages (discovery training) referred development, contrast later testing phase polygenic scores, .e., evaluation phase (stage). sounds confusing check cheatsheet, section PGS Construction Process, second page. PGS Catalog provides brief records samples sizes (total number, number cases, number controls): Perhaps, surprisingly, percentage male participants training samples zero: Also, information trait disease studied ancestry information can accessed: , surprisingly, samples European ancestry, bias recognized research community. can find details ancestry variable ancestry_categories column. categories defined within NHGRI-EBI GWAS Catalog framework. provide ancestry nomenclature quincunx separate dataset named ancestry_categories. See ?ancestry_categories details. quickly lookup definition European ancestry:","code":"dplyr::glimpse(mavaddat2018_scores@samples) #> Rows: 12 #> Columns: 15 #> $ pgs_id                          <chr> \"PGS000004\", \"PGS000004\", \"PGS000005\",… #> $ sample_id                       <int> 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2 #> $ stage                           <chr> \"gwas\", \"dev\", \"gwas\", \"dev\", \"gwas\", … #> $ sample_size                     <int> 158648, 10444, 87368, 5159, 87368, 515… #> $ sample_cases                    <int> 88916, 5159, 55391, 4233, 15404, 926, … #> $ sample_controls                 <int> 69732, 5285, 31977, 926, 71964, 4233, … #> $ sample_percent_male             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 #> $ phenotype_description           <chr> \"Invasive breast cancer-affected\", \"In… #> $ ancestry_category               <chr> \"European\", \"European\", \"European\", \"E… #> $ ancestry                        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ country                         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ ancestry_additional_description <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ study_id                        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ pubmed_id                       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ cohorts_additional_description  <chr> \"Training Cohort\", \"Validation Cohort\"… mavaddat2018_scores@samples[1:6] #> # A tibble: 12 × 6 #>    pgs_id    sample_id stage sample_size sample_cases sample_controls #>    <chr>         <int> <chr>       <int>        <int>           <int> #>  1 PGS000004         1 gwas       158648        88916           69732 #>  2 PGS000004         2 dev         10444         5159            5285 #>  3 PGS000005         1 gwas        87368        55391           31977 #>  4 PGS000005         2 dev          5159         4233             926 #>  5 PGS000006         1 gwas        87368        15404           71964 #>  6 PGS000006         2 dev          5159          926            4233 #>  7 PGS000007         1 gwas       158648        88916           69732 #>  8 PGS000007         2 dev         10444         5159            5285 #>  9 PGS000008         1 gwas        87368        55391           31977 #> 10 PGS000008         2 dev          5159         4233             926 #> 11 PGS000009         1 gwas        87368        15404           71964 #> 12 PGS000009         2 dev          5159          926            4233 mavaddat2018_scores@samples[c('pgs_id', 'sample_id', 'stage', 'sample_percent_male')] #> # A tibble: 12 × 4 #>    pgs_id    sample_id stage sample_percent_male #>    <chr>         <int> <chr>               <dbl> #>  1 PGS000004         1 gwas                    0 #>  2 PGS000004         2 dev                     0 #>  3 PGS000005         1 gwas                    0 #>  4 PGS000005         2 dev                     0 #>  5 PGS000006         1 gwas                    0 #>  6 PGS000006         2 dev                     0 #>  7 PGS000007         1 gwas                    0 #>  8 PGS000007         2 dev                     0 #>  9 PGS000008         1 gwas                    0 #> 10 PGS000008         2 dev                     0 #> 11 PGS000009         1 gwas                    0 #> 12 PGS000009         2 dev                     0 mavaddat2018_scores@samples[c('pgs_id', 'sample_id', 'stage', 'phenotype_description', 'ancestry')] #> # A tibble: 12 × 5 #>    pgs_id    sample_id stage phenotype_description           ancestry #>    <chr>         <int> <chr> <chr>                           <chr>    #>  1 PGS000004         1 gwas  Invasive breast cancer-affected NA       #>  2 PGS000004         2 dev   Invasive breast cancer-affected NA       #>  3 PGS000005         1 gwas  ER-positive breast cancer cases NA       #>  4 PGS000005         2 dev   ER-positive breast cancer cases NA       #>  5 PGS000006         1 gwas  ER-negative breast cancer cases NA       #>  6 PGS000006         2 dev   ER-negative breast cancer cases NA       #>  7 PGS000007         1 gwas  Invasive breast cancer-affected NA       #>  8 PGS000007         2 dev   Invasive breast cancer-affected NA       #>  9 PGS000008         1 gwas  ER-positive breast cancer cases NA       #> 10 PGS000008         2 dev   ER-positive breast cancer cases NA       #> 11 PGS000009         1 gwas  ER-negative breast cancer cases NA       #> 12 PGS000009         2 dev   ER-negative breast cancer cases NA # Quick look at the ancestries definitions ancestry_categories #> # A tibble: 19 × 6 #>    ancestry_category                     ances…¹ ances…² ances…³ defin…⁴ examp…⁵ #>    <chr>                                 <chr>   <chr>   <chr>   <chr>   <chr>   #>  1 Aboriginal Australian                 Additi… OTH     #999999 \"Inclu… Martu … #>  2 African American or Afro-Caribbean    African AFR     #FFD900 \"Inclu… Africa… #>  3 African unspecified                   African AFR     #FFD900 \"Inclu… Africa… #>  4 Asian unspecified                     Additi… ASN     #B15928 \"Inclu… Asian,… #>  5 Central Asian                         Additi… ASN     #B15928 \"Inclu… Silk R… #>  6 East Asian                            East A… EAS     #4DAF4A \"Inclu… Chines… #>  7 European                              Europe… EUR     #377EB8 \"Inclu… Spanis… #>  8 Greater Middle Eastern (Middle Easte… Greate… GME     #00CED1 \"Inclu… Tunisi… #>  9 Hispanic or Latin American            Hispan… AMR     #E41A1C \"Inclu… Brazil… #> 10 Native American                       Additi… OTH     #999999 \"Inclu… Pima I… #> 11 Not reported                          Ancest… NR      #BBBBBB \"Inclu… NA      #> 12 Oceanian                              Additi… OTH     #999999 \"Inclu… Solomo… #> 13 Other                                 Additi… OTH     #999999 \"Inclu… Surina… #> 14 Other admixed ancestry                Additi… OTH     #999999 \"Inclu… NA      #> 15 South Asian                           South … SAS     #984EA3 \"Inclu… Bangla… #> 16 South East Asian                      Additi… ASN     #B15928 \"Inclu… Thai, … #> 17 Sub-Saharan African                   African AFR     #FFD900 \"Inclu… Yoruba… #> 18 Multi-Ancestry (including Europeans)  Multi-… MAE     #A6CEE3 \"Combi… NA      #> 19 Multi-Ancestry (excluding Europeans)  Multi-… MAO     #FF7F00 \"Combi… NA      #> # … with abbreviated variable names ¹​ancestry_class, ²​ancestry_class_symbol, #> #   ³​ancestry_class_colour, ⁴​definition, ⁵​examples"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"scores-object-demographics-table","dir":"Articles","previous_headings":"Polygenic Scores Metadata","what":"scores object | demographics table","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"demographics table usually lists demographic information sample. study table however empty, meaning information either available Mavaddat’s publication, included PGS Catalog. Nevertheless, demographics variables, present, follow-time, age study participants. want confirm quincunx retrieving exactly info provided PGS Catalog web interface, can always check showing online metadata PGP publication interest using function open_in_pgs_catalog.","code":"mavaddat2018_scores@demographics #> # A tibble: 0 × 11 #> # … with 11 variables: pgs_id <chr>, sample_id <int>, variable <chr>, #> #   estimate_type <chr>, estimate <dbl>, unit <chr>, variability_type <chr>, #> #   variability <dbl>, interval_type <chr>, interval_lower <dbl>, #> #   interval_upper <dbl> #> # ℹ Use `colnames()` to see all variable names open_in_pgs_catalog('PGP000002', pgs_catalog_entity = 'pgp')"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"scores-object-cohorts-table","dir":"Articles","previous_headings":"Polygenic Scores Metadata","what":"scores object | cohorts table","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"cohorts table can check cohorts associated samples. Note unique identification sample given combination values first two columns: pgs_id, sample_id. learn meaning cohorts PGS Catalog, visit check cheatsheet, section Cohorts, Samples Sample Sets, second page.","code":"mavaddat2018_scores@cohorts #> # A tibble: 558 × 4 #>    pgs_id    sample_id cohort_symbol cohort_name                                 #>    <chr>         <int> <chr>         <chr>                                       #>  1 PGS000004         1 ABCFS         Australian Breast Cancer Family Study       #>  2 PGS000004         1 MCCS          Melbourne Collaborative Cohort Study        #>  3 PGS000004         1 HMBCS         Hannover-Minsk Breast Cancer Study          #>  4 PGS000004         1 LMBC          Leuven Multidisciplinary Breast Centre      #>  5 PGS000004         1 MTLGEBCS      Montreal Gene-Environment Breast Cancer St… #>  6 PGS000004         1 CGPS          Copenhagen General Population Study         #>  7 PGS000004         1 KBCP          Kuopio Breast Cancer Project                #>  8 PGS000004         1 OBCS          Oulu Breast Cancer Study                    #>  9 PGS000004         1 CECILE        CECILE Breast Cancer Study                  #> 10 PGS000004         1 BBCC          Bavarian Breast Cancer Cases and Controls   #> # … with 548 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"scores-object-traits-table","dir":"Articles","previous_headings":"Polygenic Scores Metadata","what":"scores object | traits table","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"Finally, traits table, access traits (phenotypes) associated polygenic scores. study, scores indicate “breast cancer” one subtypes (column trait): Compared author-reported trait (column reported_trait table scores), trait description table follows controlled vocabulary ontology, .e., Experimental Factor Ontology (EFO). way, traits described objectively. useful comparing trait data among different studies different reported trait descriptions might used. example, want now know polygenic scores may deposited PGS Catalog also study breast cancer — namely, breast carcinoma, estrogen-receptor positive breast cancer, estrogen-receptor negative breast cancer — use respective EFO identifiers (EFO_0000305, EFO_1000649, EFO_1000650) function get_scores(): 107 scores present PGS Catalog. Included set 6 scores originating Mavaddat et al. (2018). want proceed analysing scores without including Mavaddat’s study, use function setdiff() remove S4 scores object: set operations, check documentation page: union(), intersect() setequal().","code":"mavaddat2018_scores@traits[c('pgs_id', 'efo_id', 'trait')] #> # A tibble: 6 × 3 #>   pgs_id    efo_id      trait                                    #>   <chr>     <chr>       <chr>                                    #> 1 PGS000004 EFO_0000305 breast carcinoma                         #> 2 PGS000005 EFO_1000649 estrogen-receptor positive breast cancer #> 3 PGS000006 EFO_1000650 estrogen-receptor negative breast cancer #> 4 PGS000007 EFO_0000305 breast carcinoma                         #> 5 PGS000008 EFO_1000649 estrogen-receptor positive breast cancer #> 6 PGS000009 EFO_1000650 estrogen-receptor negative breast cancer scores_bc <- get_scores(efo_id = unique(mavaddat2018_scores@traits[['efo_id']])) quincunx::n(scores_bc) #> [1] 107 # Use quincunx::setdiff to avoid collision with dplyr::setdiff() bc_scores_not_mavaddat2018 <- quincunx::setdiff(scores_bc, mavaddat2018_scores) quincunx::n(bc_scores_not_mavaddat2018) #> [1] 101 bc_scores_not_mavaddat2018@scores[c('pgs_id', 'reported_trait','n_variants')] #> # A tibble: 101 × 3 #>    pgs_id    reported_trait   n_variants #>    <chr>     <chr>                 <int> #>  1 PGS000001 \"Breast Cancer\"          77 #>  2 PGS000015 \"Breast cancer\"        5218 #>  3 PGS000028 \"Breast cancer\"          83 #>  4 PGS000029 \"Breast cancer\"          76 #>  5 PGS000045 \"Breast cancer\"          88 #>  6 PGS000050 \"Breast cancer\"          44 #>  7 PGS000051 \"Breast Cancer \"         67 #>  8 PGS000052 \"Breast cancer\"         161 #>  9 PGS000072 \"Breast cancer\"         187 #> 10 PGS000153 \"Breast cancer\"          66 #> # … with 91 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"performance-metrics","dir":"Articles","previous_headings":"","what":"Performance Metrics","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"According PGS Catalog team 3: “Performance Metrics assess validity PGS Sample Set, independent samples used score development. Common metrics include standardised effect sizes (odds/hazard ratios [/HR], regression coefficients [Beta]), classification accuracy metrics (e.g. AUROC, C-index, AUPRC), relevant metrics (e.g. calibration [Chi-square]) can also recorded. covariates used model (commonly age, sex, genetic principal components (PCs) account population structure) also linking set metrics. Multiple PGS can evaluated Sample Set indexed directly comparable Performance Metrics.” section learn retrieve details evaluation polygenic scores developed Mavaddat et al. (2018). , start querying performance metrics scores interest. Please recall pgs_ids reported_traits polygenic scores newly developed Mavaddat’s publication : use PGS identifiers query PGS Catalog performance metrics using function get_performance_metrics(). output S4 object 9 tables: performance_metrics, publications, sample_sets, samples, demographics, cohorts, pgs_effect_sizes, pgs_classification_metrics, pgs_other_metrics. Reminder | can quickly check variables table consulting quincunx cheatsheet. Also, description variable annotated performance_metrics object help page can accessed class?performance_metrics.","code":"mavaddat2018_scores@scores[c('pgs_id', 'reported_trait')] #> # A tibble: 6 × 2 #>   pgs_id    reported_trait            #>   <chr>     <chr>                     #> 1 PGS000004 Breast Cancer             #> 2 PGS000005 ER-positive Breast Cancer #> 3 PGS000006 ER-negative Breast Cancer #> 4 PGS000007 Breast Cancer             #> 5 PGS000008 ER-positive Breast Cancer #> 6 PGS000009 ER-negative Breast Cancer mavaddat2018_ppm <- get_performance_metrics(pgs_id = mavaddat2018_scores@scores$pgs_id)"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"performance_metrics-object-performance_metrics-table","dir":"Articles","previous_headings":"Performance Metrics","what":"performance_metrics object | performance_metrics table","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"first table performance_metrics get one performance metrics entity per row, following columns: ppm_id, pgs_id, reported_trait, covariates, comments. Note performance metrics indexed unique identifier starts “PPM”. According PGS Catalog documentation (http://www.pgscatalog.org/docs/): reported_trait displays reported trait, often corresponding test set names reported publication, specific aspects phenotype tested (e.g. disease cases incident vs. recurrent events). covariates column lists covariates used prediction model evaluate PGS. Examples include: age, sex, smoking habits, etc. comments column field additional relevant information can added aid understanding particular performance metrics. Looking performance_metrics table, can see one polygenic score (pgs_id) can associated several performance metrics (ppm_id), e.g., PGS000007 associates 8 PPMs: means polygenic score (PGS000007) validated several times, using different models. case, can immediately see PGS000007 performance evaluated, example, alternative breast cancer types (different reported_traits), namely: Invasive breast cancer, Breast Cancer (personal history), Breast cancer. Additionally, can see reported_trait (Breast Cancer (personal history)) validated 3 different performance metrics (PPMs): PPM000384, PPM000386, PPM000388; included different covariates model: age menarche, age, sex, NA. (NA means data field Available records).","code":"mavaddat2018_ppm@performance_metrics[1:4] #> # A tibble: 143 × 4 #>    ppm_id    pgs_id    reported_trait                                    covar…¹ #>    <chr>     <chr>     <chr>                                             <chr>   #>  1 PPM000004 PGS000004 Invasive breast cancer                            study,… #>  2 PPM000005 PGS000004 Incident breast cancer cases                      study,… #>  3 PPM000650 PGS000004 Breast cancer intrinsic-like subtype (luminal A-… NA      #>  4 PPM000653 PGS000004 Breast cancer intrinsic-like subtype (luminal B/… NA      #>  5 PPM000656 PGS000004 Breast cancer intrinsic-like subtype (luminal B-… NA      #>  6 PPM000659 PGS000004 Breast cancer intrinsic-like subtype (HER2-enric… NA      #>  7 PPM000662 PGS000004 Breast cancer intrinsic-like subtype (triple neg… NA      #>  8 PPM000934 PGS000004 Metachronous contralateral breast cancer          Country #>  9 PPM000935 PGS000004 Metachronous contralateral breast cancer          Countr… #> 10 PPM000936 PGS000004 Invasive metachronous contralateral breast cancer Country #> # … with 133 more rows, and abbreviated variable name ¹​covariates #> # ℹ Use `print(n = ...)` to see more rows dplyr::filter(mavaddat2018_ppm@performance_metrics, pgs_id == 'PGS000007') #> # A tibble: 8 × 5 #>   ppm_id    pgs_id    reported_trait                   covariates        comme…¹ #>   <chr>     <chr>     <chr>                            <chr>             <chr>   #> 1 PPM000008 PGS000007 Invasive breast cancer           study, genetic P… NA      #> 2 PPM000384 PGS000007 Breast Cancer (personal history) age at menarche   NA      #> 3 PPM000386 PGS000007 Breast Cancer (personal history) age, sex          NA      #> 4 PPM000388 PGS000007 Breast Cancer (personal history) NA                NA      #> 5 PPM005160 PGS000007 Breast cancer                    Age, family hist… NA      #> 6 PPM005163 PGS000007 Breast cancer                    Age, family hist… NA      #> 7 PPM005169 PGS000007 Breast cancer                    NA                NA      #> 8 PPM005172 PGS000007 Breast cancer                    NA                NA      #> # … with abbreviated variable name ¹​comments"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"performance_metrics-object-publications-table","dir":"Articles","previous_headings":"Performance Metrics","what":"performance_metrics object | publications table","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"publications table dedicated hold information related publications associated performance metrics. column pgp_id links performance metrics respective publication performance metrics reported collected. can immediately see publications just Mavaddat et al. (pubmed_id = 30554720) started . expected requested performance metrics PGS scores newly developed Mavaddat et al.; scores subsequently evaluated posterior publications, accordingly performance metrics reported posterior evaluations. easily confirmed checking publications dated December 13th 2018, date publication original Mavaddat et al. paper. can choose look publications later see evaluations (performance metrics) reported (traits, adjusting covariates, etc.). now, interested studying performance metrics reported Mavaddat et al. PGS scores newly developed publication. , let’s proceed creating vector containing ppm_ids interest. filtering ppm_ids pubmed_id corresponding Mavaddat publication. use vector subset following tables (display metrics PPMs interest). , can immediately see Mavaddat publication evaluated PGS000004 twice, two performance metrics (PPM000004 PPM000005), different include different set SNPs (see comments column PPM000005).","code":"mavaddat2018_ppm@publications #> # A tibble: 143 × 8 #>    ppm_id    pgp_id    pubmed_id publication_date publicat…¹ title autho…² doi   #>    <chr>     <chr>     <chr>     <date>           <chr>      <chr> <chr>   <chr> #>  1 PPM000004 PGP000002 30554720  2018-12-13       Am J Hum … Poly… Mavadd… 10.1… #>  2 PPM000005 PGP000002 30554720  2018-12-13       Am J Hum … Poly… Mavadd… 10.1… #>  3 PPM000650 PGP000088 32424353  2020-05-18       Nat Genet  Geno… Zhang H 10.1… #>  4 PPM000653 PGP000088 32424353  2020-05-18       Nat Genet  Geno… Zhang H 10.1… #>  5 PPM000656 PGP000088 32424353  2020-05-18       Nat Genet  Geno… Zhang H 10.1… #>  6 PPM000659 PGP000088 32424353  2020-05-18       Nat Genet  Geno… Zhang H 10.1… #>  7 PPM000662 PGP000088 32424353  2020-05-18       Nat Genet  Geno… Zhang H 10.1… #>  8 PPM000934 PGP000109 33022221  2020-10-05       Am J Hum … Brea… Kramer… 10.1… #>  9 PPM000935 PGP000109 33022221  2020-10-05       Am J Hum … Brea… Kramer… 10.1… #> 10 PPM000936 PGP000109 33022221  2020-10-05       Am J Hum … Brea… Kramer… 10.1… #> # … with 133 more rows, and abbreviated variable names ¹​publication, #> #   ²​author_fullname #> # ℹ Use `print(n = ...)` to see more rows mavaddat2018_ppm@publications$publication_date %>% unique() #>  [1] \"2018-12-13\" \"2020-05-18\" \"2020-10-05\" \"2020-07-15\" \"2020-12-14\" #>  [6] \"2020-03-12\" \"2021-04-01\" \"2020-08-20\" \"2021-03-26\" \"2021-07-28\" #> [11] \"2021-07-14\" \"2021-08-02\" \"2022-02-09\" \"2022-01-01\" \"2022-06-02\" #> [16] \"2019-11-26\" mavaddat2018_ppm_ids <- mavaddat2018_ppm@publications %>% dplyr::filter(pubmed_id == \"30554720\") %>% dplyr::pull(ppm_id) mavaddat2018_ppm_ids #> [1] \"PPM000004\" \"PPM000005\" \"PPM000006\" \"PPM000007\" \"PPM000008\" \"PPM000009\" #> [7] \"PPM000010\"  # Find the corresponding pgs_id, reported_trait, covariates, and comments mavaddat2018_ppm@performance_metrics %>% dplyr::filter(ppm_id %in% mavaddat2018_ppm_ids) #> # A tibble: 7 × 5 #>   ppm_id    pgs_id    reported_trait               covariates            comme…¹ #>   <chr>     <chr>     <chr>                        <chr>                 <chr>   #> 1 PPM000004 PGS000004 Invasive breast cancer       study, genetic PCs 1… NA      #> 2 PPM000005 PGS000004 Incident breast cancer cases study, genetic PCs 1… Includ… #> 3 PPM000006 PGS000005 ER-positive breast cancer    study, genetic PCs 1… NA      #> 4 PPM000007 PGS000006 ER-negative breast cancer    study, genetic PCs 1… NA      #> 5 PPM000008 PGS000007 Invasive breast cancer       study, genetic PCs 1… NA      #> 6 PPM000009 PGS000008 ER-positive breast cancer    study, genetic PCs 1… NA      #> 7 PPM000010 PGS000009 ER-negative breast cancer    study, genetic PCs 1… NA      #> # … with abbreviated variable name ¹​comments"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"performance_metrics-object-sample_sets-table","dir":"Articles","previous_headings":"Performance Metrics","what":"performance_metrics object | sample_sets table","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"PGS Catalog provides Sample Set Id (PSS) links PPMs sample sets used evaluate corresponding PGS. mapping stored sample_sets table.","code":"mavaddat2018_ppm@sample_sets %>% dplyr::filter(ppm_id %in% mavaddat2018_ppm_ids)  #> # A tibble: 7 × 2 #>   ppm_id    pss_id    #>   <chr>     <chr>     #> 1 PPM000004 PSS000004 #> 2 PPM000005 PSS000007 #> 3 PPM000006 PSS000005 #> 4 PPM000007 PSS000006 #> 5 PPM000008 PSS000004 #> 6 PPM000009 PSS000005 #> 7 PPM000010 PSS000006"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"performance_metrics-object-samples-table","dir":"Articles","previous_headings":"Performance Metrics","what":"performance_metrics object | samples table","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"samples table gathers relevant information regarding samples used relevant evaluations. table contains following columns: ppm_id, pss_id, sample_id, stage, sample_size, sample_cases, sample_controls, sample_percent_male, phenotype_description, ancestry_category, ancestry, country, ancestry_additional_description, study_id, pubmed_id, cohorts_additional_description. Please note samples identified PGS Catalog global unique identifier, quincunx assigns surrogate identifier (sample_id) allow mapping tables. can, example see sample sizes different evaluation. Let’s take quick look values.  plot clearly shows PPM000005 uses large sample (particularly regarding number controls) compared reported PPMs.","code":"mavaddat2018_ppm@samples %>% dplyr::filter(ppm_id %in% mavaddat2018_ppm_ids) #> # A tibble: 7 × 16 #>   ppm_id    pss_id sampl…¹ stage sampl…² sampl…³ sampl…⁴ sampl…⁵ pheno…⁶ ances…⁷ #>   <chr>     <chr>    <int> <chr>   <int>   <int>   <int>   <dbl> <chr>   <chr>   #> 1 PPM000004 PSS00…       1 eval    29751   11428   18323       0 Invasi… Europe… #> 2 PPM000005 PSS00…       1 eval   190040    3215  186825       0 Incide… Europe… #> 3 PPM000006 PSS00…       1 eval    11428    7992    3436       0 ER-pos… Europe… #> 4 PPM000007 PSS00…       1 eval    11428    1259   10169       0 ER-neg… Europe… #> 5 PPM000008 PSS00…       1 eval    29751   11428   18323       0 Invasi… Europe… #> 6 PPM000009 PSS00…       1 eval    11428    7992    3436       0 ER-pos… Europe… #> 7 PPM000010 PSS00…       1 eval    11428    1259   10169       0 ER-neg… Europe… #> # … with 6 more variables: ancestry <chr>, country <chr>, #> #   ancestry_additional_description <chr>, study_id <chr>, pubmed_id <chr>, #> #   cohorts_additional_description <chr>, and abbreviated variable names #> #   ¹​sample_id, ²​sample_size, ³​sample_cases, ⁴​sample_controls, #> #   ⁵​sample_percent_male, ⁶​phenotype_description, ⁷​ancestry_category #> # ℹ Use `colnames()` to see all variable names mavaddat2018_ppm@samples %>%   dplyr::filter(ppm_id %in% mavaddat2018_ppm_ids) %>%   dplyr::select(ppm_id, sample_cases, sample_controls) %>%   tidyr::pivot_longer(!ppm_id, names_to = \"sample_type\", values_to = \"count\") %>%   ggplot2::ggplot(ggplot2::aes(fill=sample_type, y=count, x=ppm_id)) +    ggplot2::geom_bar(position=\"dodge\", stat=\"identity\") +   ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 20, vjust = 0.5, hjust=0.5))"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"performance_metrics-object-demographics-table","dir":"Articles","previous_headings":"Performance Metrics","what":"performance_metrics object | demographics table","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"demographics table holds information regarding demographics’ variables sample. demographics’ variable (row) uniquely identified combination values columns: ppm_id, pss_id, sample_id, variable. Currently, PGS Catalog describes two demographic variables: age participants follow-time. columns presented table : ppm_id, pss_id, sample_id, variable, estimate_type, estimate, unit, variability_type, variability, interval_type, interval_lower, interval_upper can see neither PPMs shown Mavaddat paper. means performance metrics reported paper information regarding demographics’ variables belong table (age follow-time).","code":"mavaddat2018_ppm@demographics %>% dplyr::glimpse() #> Rows: 17 #> Columns: 12 #> $ ppm_id           <chr> \"PPM001345\", \"PPM001347\", \"PPM012909\", \"PPM012910\", \"… #> $ pss_id           <chr> \"PSS000450\", \"PSS000450\", \"PSS009609\", \"PSS009610\", \"… #> $ sample_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 #> $ variable         <chr> \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age… #> $ estimate_type    <chr> \"mean age (at the end of follow-up)\", \"mean age (at t… #> $ estimate         <dbl> 58.5, 58.5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 4… #> $ unit             <chr> \"years\", \"years\", \"years\", \"years\", \"years\", \"years\",… #> $ variability_type <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ variability      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ interval_type    <chr> \"iqr\", \"iqr\", \"range\", \"range\", \"range\", \"range\", \"ra… #> $ interval_lower   <dbl> 45.10, 45.10, 0.00, 50.00, 0.00, 50.00, 50.00, 50.00,… #> $ interval_upper   <dbl> 72.20, 72.20, 50.00, 100.00, 50.00, 100.00, 70.00, 70…"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"performance_metrics-object-cohorts-table","dir":"Articles","previous_headings":"Performance Metrics","what":"performance_metrics object | cohorts table","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"Similarly cohorts table described (scores object class), table shows cohorts associated sample. However , unique identification sample can obtained combining values first three columns: ppm_id, pss_id sample_id.","code":"mavaddat2018_ppm@cohorts %>% dplyr::filter(ppm_id %in% mavaddat2018_ppm_ids) #> # A tibble: 61 × 5 #>    ppm_id    pss_id    sample_id cohort_symbol cohort_name                       #>    <chr>     <chr>         <int> <chr>         <chr>                             #>  1 PPM000004 PSS000004         1 AHS           Agricultural Health Study         #>  2 PPM000004 PSS000004         1 BGS           Breakthrough Generations Study    #>  3 PPM000004 PSS000004         1 EPIC          European Prospective Investigati… #>  4 PPM000004 PSS000004         1 FHRISK        Family History Clinic in Manches… #>  5 PPM000004 PSS000004         1 NHS           Nurses Health Study               #>  6 PPM000004 PSS000004         1 NHS2          Nurses Health Study II            #>  7 PPM000004 PSS000004         1 PLCO          Prostate, Lung, Colorectal, and … #>  8 PPM000004 PSS000004         1 PROCAS        Breast Screening Programme (NHSB… #>  9 PPM000004 PSS000004         1 KARMA         Karolinska Mammography Project f… #> 10 PPM000004 PSS000004         1 SISTER        The Sister Study                  #> # … with 51 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"performance_metrics-object-pgs-effect-sizes-pgs-classification-metrics-pgs-other-metrics-tables","dir":"Articles","previous_headings":"Performance Metrics","what":"performance_metrics object | PGS effect sizes & PGS classification metrics & PGS other metrics tables","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"three final tables performance_metrics object hold performance metrics used validation. table presents column structure 11 total columns, second column different three tables. column shows id created quincunx used identify individual metrics tables (effect_size_id, classification_metrics_id, other_metrics_id). columns variables: ppm_id, effect_size_id, estimate_type_long, estimate_type, estimate, unit, variability_type, variability, interval_type, interval_lower, interval_upper. (column names specifically pgs_effect_sizes table, indicated second column name. columns equally named three tables). According PGS Catalog online documentation (http://www.pgscatalog.org/docs/): “reported values performance metrics reported similarly (e.g. estimate recorded along 95% confidence interval (supplied)) grouped according type statistic represent: - PGS Effect Sizes (per SD change) | Standardized effect sizes, per standard deviation [SD] change PGS. Examples include regression coefficients (Betas) continuous traits, Odds ratios () /Hazard ratios (HR) dichotomous traits depending availability time--event data. - PGS Classification Metrics | Examples include Area Receiver Operating Characteristic (AUROC) Harrell’s C-index (Concordance statistic). - Metrics | Metrics fit two categories. Examples include: R2 (proportion variance explained), reclassification metrics.” Now, let’s briefly explore data tables (usual filtered PPMs newly reported Mavaddat et al.). can immediately see third table (reserved metrics effect sizes classification metrics) empty; effect sizes estimated using Odds Ratio Hazard Ratio, classification metric applied AUROC. Now can look reported values PPM metrics decide validation relevant, therefore make informed choice use associated PGS score study, eventually apply dataset.","code":"mavaddat2018_ppm@pgs_effect_sizes %>% dplyr::filter(ppm_id %in% mavaddat2018_ppm_ids) #> # A tibble: 7 × 11 #>   ppm_id   effec…¹ estim…² estim…³ estim…⁴ unit  varia…⁵ varia…⁶ inter…⁷ inter…⁸ #>   <chr>      <int> <chr>   <chr>     <dbl> <chr> <chr>     <dbl> <chr>     <dbl> #> 1 PPM0000…       1 Odds R… OR         1.61 NA    se           NA ci         1.57 #> 2 PPM0000…       1 Hazard… HR         1.59 NA    se           NA ci         1.54 #> 3 PPM0000…       1 Odds R… OR         1.68 NA    se           NA ci         1.63 #> 4 PPM0000…       1 Odds R… OR         1.45 NA    se           NA ci         1.37 #> 5 PPM0000…       1 Odds R… OR         1.66 NA    se           NA ci         1.61 #> 6 PPM0000…       1 Odds R… OR         1.73 NA    se           NA ci         1.68 #> 7 PPM0000…       1 Odds R… OR         1.44 NA    se           NA ci         1.36 #> # … with 1 more variable: interval_upper <dbl>, and abbreviated variable names #> #   ¹​effect_size_id, ²​estimate_type_long, ³​estimate_type, ⁴​estimate, #> #   ⁵​variability_type, ⁶​variability, ⁷​interval_type, ⁸​interval_lower #> # ℹ Use `colnames()` to see all variable names mavaddat2018_ppm@pgs_classification_metrics %>% dplyr::filter(ppm_id %in% mavaddat2018_ppm_ids) #> # A tibble: 6 × 11 #>   ppm_id   class…¹ estim…² estim…³ estim…⁴ unit  varia…⁵ varia…⁶ inter…⁷ inter…⁸ #>   <chr>      <int> <chr>   <chr>     <dbl> <chr> <chr>     <dbl> <chr>     <dbl> #> 1 PPM0000…       1 Area U… AUROC     0.63  NA    se           NA ci           NA #> 2 PPM0000…       1 Area U… AUROC     0.641 NA    se           NA ci           NA #> 3 PPM0000…       1 Area U… AUROC     0.601 NA    se           NA ci           NA #> 4 PPM0000…       1 Area U… AUROC     0.636 NA    se           NA ci           NA #> 5 PPM0000…       1 Area U… AUROC     0.647 NA    se           NA ci           NA #> 6 PPM0000…       1 Area U… AUROC     0.6   NA    se           NA ci           NA #> # … with 1 more variable: interval_upper <dbl>, and abbreviated variable names #> #   ¹​classification_metrics_id, ²​estimate_type_long, ³​estimate_type, ⁴​estimate, #> #   ⁵​variability_type, ⁶​variability, ⁷​interval_type, ⁸​interval_lower #> # ℹ Use `colnames()` to see all variable names mavaddat2018_ppm@pgs_other_metrics %>% dplyr::filter(ppm_id %in% mavaddat2018_ppm_ids) #> # A tibble: 0 × 11 #> # … with 11 variables: ppm_id <chr>, other_metrics_id <int>, #> #   estimate_type_long <chr>, estimate_type <chr>, estimate <dbl>, unit <chr>, #> #   variability_type <chr>, variability <dbl>, interval_type <chr>, #> #   interval_lower <dbl>, interval_upper <dbl> #> # ℹ Use `colnames()` to see all variable names"},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"concluding-remarks","dir":"Articles","previous_headings":"","what":"Concluding remarks","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"Useful reminders: can quickly check variables table consulting quincunx cheatsheet. quincunx functions annotated help pages accessed ?function_name (e.g. ?get_scores, ?get_traits, ?get_performance_metrics). tables retrieved quincunx’s functions annotated help files describe variables present. accessible via class?object_name (e.g. class?scores, class?performance_metrics). quincunx package published peer-reviewed journal. Use citation(package=\"quincunx\") get full paper citation.","code":""},{"path":"https://maialab.org/quincunx/articles/pgs-scores-mavaddat.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Exploring PGS scores by Mavaddat et al. (2018)","text":"1. Mavaddat, N. et al. Polygenic Risk Scores Prediction Breast Cancer Breast Cancer Subtypes. American Journal Human Genetics 104, 21–34 (2019). 2. Magno, R. & Maia, .-T. Gwasrapidd: R package query, download wrangle GWAS catalog data. Bioinformatics (2019) doi:10.1093/bioinformatics/btz605. 3. Lambert, S. . et al. Polygenic Score Catalog open database reproducibility systematic evaluation. Nature Genetics 53, 420–425 (2021).","code":""},{"path":"https://maialab.org/quincunx/articles/pgs-scoring-file.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"PGS scoring file","text":"PGS scoring files files provided PGS Catalog allow compute polygenic scores samples. files hosted PGS Catalog FTP server: http://ftp.ebi.ac.uk/pub/databases/spot/pgs/scores/. labelled respective PGS Score ID (e.g. PGS000001.txt.gz). Essentially, scoring file contains variant identification, effect alleles respective score weights. file formatted gzipped tab-delimited text file. file starts header contains brief metadata score.","code":"###PGS CATALOG SCORING FILE - see https://www.pgscatalog.org/downloads/#dl_ftp_scoring for additional information #format_version=2.0 ##POLYGENIC SCORE (PGS) INFORMATION #pgs_id=PGS000117 #pgs_name=CVD_EJ2020 #trait_reported=Cardiovascular Disease  #trait_mapped=cardiovascular disease #trait_efo=EFO_0000319 #weight_type=NR #genome_build=GRCh37 #variants_number=267863 ##SOURCE INFORMATION #pgp_id=PGP000054 #citation=Elliott J et al. JAMA (2020). doi:10.1001/jama.2019.22241 rsID    chr_name    chr_position    effect_allele   other_allele    effect_weight rs11240779  1   808631  A   G   0.00077622 rs1921  1   949608  A   G   -0.00583829 rs2710890   1   958905  G   A   -0.00182583 rs4970349   1   967658  T   C   -0.001855691 rs2710887   1   986443  T   C   -0.003430246"},{"path":"https://maialab.org/quincunx/articles/pgs-scoring-file.html","id":"getting-pgs-scoring-files","dir":"Articles","previous_headings":"","what":"Getting PGS scoring files","title":"PGS scoring file","text":"get PGS scoring files may either download directly FTP server use quincunx function read_scoring_file(). function automatically downloads, unzips reads header data data frame R. Let’s look example: polygenic score “PGS000655”. can use directly PGS score ID argument source parameter function read_scoring_file(), translate corresponding URL, download file import data data frame appropriate data types. returned object read_scoring_file() list lists. outer list runs (potentially) several PGS IDs asked one. start extracting first (case ) score name: Now, inner list comprises two elements: metadata data. metadata part contains information retrieved initial comment block file: metadata can see score trait Non-alcoholic fatty liver disease, composed 10 variants. Remember can retrieve metadata information score using get_scores('PGS000655') get_performance_metrics('PGS000655'). data element contains actual relevant information calculating scores: minimal information calculating scores : variant identification information, effect allele, well corresponding score weight. Currently, PGS Catalog project, identifies variant either rsID (column rsID), genomic position (columns chr_name chr_position). effect allele score weight given columns effect_allele effect_weight, respectively.","code":"my_pgs <- read_scoring_file(source = \"PGS000655\") length(my_pgs) #> [1] 1 names(my_pgs) #> [1] \"PGS000655\" PGS000655 <- my_pgs[['PGS000655']] names(PGS000655) #> [1] \"metadata\" \"data\" dplyr::glimpse(PGS000655$metadata) #> Rows: 1 #> Columns: 10 #> $ pgs_id             <chr> \"PGS000655\" #> $ pgs_name           <chr> \"NAFLD-10\" #> $ reported_trait     <chr> \"Non-alcoholic fatty liver disease\" #> $ mapped_trait       <chr> \"non-alcoholic fatty liver disease\" #> $ efo_trait          <chr> \"EFO_0003095\" #> $ genome_build       <chr> \"GRCh37\" #> $ weight_type        <chr> \"beta\" #> $ number_of_variants <int> 10 #> $ pgp_id             <chr> \"PGP000119\" #> $ citation           <chr> \"Namjou B et al. BMC Med (2019). doi:10.1186/s12916… PGS000655$data #> # A tibble: 10 × 4 #>    rsID       effect_allele effect_weight    OR #>    <chr>      <chr>                 <dbl> <dbl> #>  1 rs1260326  T                    0.0571  1.14 #>  2 rs780094   T                    0.0611  1.15 #>  3 rs2954021  G                   -0.0980  0.8  #>  4 rs4808199  A                    0.0868  1.22 #>  5 rs58542926 T                    0.0899  1.23 #>  6 rs738409   G                    0.253   1.79 #>  7 rs3747207  A                    0.250   1.78 #>  8 rs2294915  T                    0.243   1.75 #>  9 rs1227756  G                    0.0261  1.06 #> 10 rs2294918  A                   -0.114   0.78 PGS000655$data[c('rsID', 'effect_allele', 'effect_weight')] #> # A tibble: 10 × 3 #>    rsID       effect_allele effect_weight #>    <chr>      <chr>                 <dbl> #>  1 rs1260326  T                    0.0571 #>  2 rs780094   T                    0.0611 #>  3 rs2954021  G                   -0.0980 #>  4 rs4808199  A                    0.0868 #>  5 rs58542926 T                    0.0899 #>  6 rs738409   G                    0.253  #>  7 rs3747207  A                    0.250  #>  8 rs2294915  T                    0.243  #>  9 rs1227756  G                    0.0261 #> 10 rs2294918  A                   -0.114"},{"path":"https://maialab.org/quincunx/articles/pgs-scoring-file.html","id":"note-about-large-pgs-files","dir":"Articles","previous_headings":"","what":"Note about large PGS files","title":"PGS scoring file","text":"Please note number variants comprising PGS scores can vary wildly. example (\"PGS000655\") provided small example. scores may composed millions variants, e.g., \"PGS000013\". Reading scoring files directly memory may take substantial amount resources (order Gigabytes). prevent stalling computer reading files recommend read metadata, can done efficiently. number variants indicated metadata can decide whether read information . read metadata set parameter metadata_only TRUE: can seen variable number_of_variants, number variants greater 6 million. means reading PGS scoring file many rows can make burdensome computers. know many variants included every score, can take advantage get_scores() function:","code":"my_big_scoring_file <- read_scoring_file(source = \"PGS000013\", metadata_only = TRUE) dplyr::glimpse(my_big_scoring_file[['PGS000013']]$metadata) #> Rows: 1 #> Columns: 10 #> $ pgs_id             <chr> \"PGS000013\" #> $ pgs_name           <chr> \"GPS_CAD\" #> $ reported_trait     <chr> \"Coronary artery disease\" #> $ mapped_trait       <chr> \"coronary artery disease\" #> $ efo_trait          <chr> \"EFO_0001645\" #> $ genome_build       <chr> \"hg19\" #> $ weight_type        <chr> NA #> $ number_of_variants <int> 6630150 #> $ pgp_id             <chr> \"PGP000006\" #> $ citation           <chr> \"Khera AV et al. Nat Genet (2018). doi:10.1038/s415… # all_scores <- get_scores() # all_scores@scores[c('pgs_id', 'n_variants')]"},{"path":"https://maialab.org/quincunx/articles/pgs-scoring-file.html","id":"pgs-scoring-file-format","dir":"Articles","previous_headings":"","what":"PGS scoring file format","title":"PGS scoring file","text":"scoring file contains variant identification, effect alleles respective score weights. file formatted gzipped tab-delimited text file, header containing brief metadata score.","code":""},{"path":"https://maialab.org/quincunx/articles/pgs-scoring-file.html","id":"header","dir":"Articles","previous_headings":"PGS scoring file format","what":"Header","title":"PGS scoring file","text":"","code":"### PGS CATALOG SCORING FILE - see www.pgscatalog.org/downloads/#dl_ftp for additional information ## POLYGENIC SCORE (PGS) INFORMATION # PGS ID = <PGS idenfier, e.g. 'PGS000001'> # PGS Name = <PGS name, e.g. 'PRS77_BC' - optional> # Reported Trait = <trait, e.g. 'Breast Cancer'> # Original Genome Build = <Genome build/assembly, e.g. 'GRCh38'> # Number of Variants = <Number of variants listed in the PGS> ## SOURCE INFORMATION # PGP ID = <PGS publication idenfier, e.g. 'PGP000001'> # Citation = <Information about the publication> # LICENSE = <License and terms of PGS use/distribution - refers to the EMBL-EBI Terms of Use by default>"},{"path":"https://maialab.org/quincunx/articles/pgs-scoring-file.html","id":"columns","dir":"Articles","previous_headings":"PGS scoring file format","what":"Columns","title":"PGS scoring file","text":"following table lists possible columns PGS scoring file. columns required, optional; either rsID alone combination chr_name chr_position required, optional. read_scoring_file() function automatically reads available columns right R types data frame. Original source https://www.pgscatalog.org/downloads/#scoring_columns.","code":""},{"path":"https://maialab.org/quincunx/articles/pgs-scoring-file.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"PGS scoring file","text":"information provided gathered PGS Catalog documentation PGS scoring file schema: PGS Scoring Files.","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-development.html","id":"api-underlying-retrieval-functions","dir":"Articles","previous_headings":"","what":"API underlying retrieval functions","title":"Contributing to quincunx development","text":"gain glimpse core functions quincunx organised dependent please check table:","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-development.html","id":"family-of-get_entities-functions","dir":"Articles","previous_headings":"API underlying retrieval functions","what":"Family of get_<entities>() functions","title":"Contributing to quincunx development","text":"exposed API, family functions user sees get_<entities>(), e.g., get_scores() get_sample_sets(). family internal functions coerce_to_S4_<entities>() translate list relational tibbles S4 object. advantage lists tibbles encapsulated S4 objects can benefit methods written . placeholder <entities> stands one : scores, publications, sample_sets, performance_metrics, traits, trait_categories, cohorts releases.","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-development.html","id":"family-of-get_endpoint-functions","dir":"Articles","previous_headings":"API underlying retrieval functions","what":"Family of get_<endpoint> functions","title":"Contributing to quincunx development","text":"<endpoint> typically loosely based snake case name PGS Catalog endpoint, e.g., endpoint '/rest/score/search' used trait_id parameter corresponding quincunx function: get_score_by_trait_id().","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-development.html","id":"family-of-get_type-functions","dir":"Articles","previous_headings":"API underlying retrieval functions","what":"Family of get_<type> functions","title":"Contributing to quincunx development","text":"<type> often name PGS Catalog entity singular, e.g., score polygenic scores, corresponds function get_score(). family functions return always type return value, list relational tibbles. heavy lifting translation JSON tibbles happens as_tidy_tables_<entities>.","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-development.html","id":"low-level-functions-get-request_all-and-request","dir":"Articles","previous_headings":"API underlying retrieval functions","what":"Low-level functions: get(), request_all() and request()","title":"Contributing to quincunx development","text":"bottom stack httr::GET() actual function retrieves JSON response specific URL. request() quincunx’s fundamental function httr::GET(). request() calls memoised version httr::GET() —memoised_GET()— make package agile avoid hammering REST API server unnecessarily. request_all() essentially request() handles pagination, meaning follow pages gathered results. get() function adds metadata columns tibbles, namely, ..resource (full endpoint URL), ..timestamp (endpoint retrieval timestamp), ..page (endpoint pagination).","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-development.html","id":"s4-classes","dir":"Articles","previous_headings":"","what":"S4 classes","title":"Contributing to quincunx development","text":"S4 classes defined documented source files named class-<entities>.R, e.g., class-scores.R class-performance_metrics.R","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-development.html","id":"parsing-of-json-to-tibbles","dir":"Articles","previous_headings":"","what":"Parsing of JSON to tibbles","title":"Contributing to quincunx development","text":"conversion JSON use done using terrific package tidyjson. source files containing code parse-<entities>.R, e.g., parse-cohorts.R parse-publications.R. parsing functions also used across different entities, cases dedicated source files: unwrap_<entities>.R, e.g., unwrap_efotrait.R unwrap_sample.R.","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-s-advantages.html","id":"handling-of-lower-level-tasks","dir":"Articles","previous_headings":"","what":"Handling of lower-level tasks","title":"quincunx vs REST API direct access","text":"quincunx automatically handles lower-level tasks related GET requests, pagination handling errors. user quincunx calls get functions, .e.g, get_scores(), translate GET requests one following endpoints: /rest/score/, /rest/score/{pgs_id}, /rest/score/search. first last endpoints return paginated JSON responses, meaning need logic client side iterates paginated resources, making respective GET requests data fetched. quincunx automatically detects endpoint returning paginated response (always paginated), iterates automatically. Also, quincunx’s get functions gracefully handle http errors might arise along process, breaking execution, collecting data responses successful, generating warnings failed. Moreover, user control offered warnings, verbose flag also provided functions easy debugging underlying requests. menial features , nevertheless, important smooth usage REST API.","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-s-advantages.html","id":"endpoint-abstraction","dir":"Articles","previous_headings":"","what":"Endpoint abstraction","title":"quincunx vs REST API direct access","text":"quincunx’s set get_<entity>() functions provide API abstracts away REST API endpoint construction best matches user expectations, .e., one get function type Catalog entity. example, quincunx’s user needs know get_scores() retrieve metadata Polygenic Scores. direct access REST API implies knowing three endpoints pass parameters. Also, one function related endpoints, means can provide single interface search criteria. example, case get_scores(), user may search PGS identifier (pgs_id), Trait id (efo_id) PubMed id (pubmed_id), even get polygenic scores supplying criteria. quincunx’s accepts options single interface, provides extra argument (set_operation) combine results obtained different criteria. Without client like quincunx logic implemented anew.","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-s-advantages.html","id":"automatic-json-deserialization","dir":"Articles","previous_headings":"","what":"Automatic JSON deserialization","title":"quincunx vs REST API direct access","text":"Retrieving data REST API environment, R programming language, requires conversion JSON text R objects, .e., JSON deserialization. , hinge R package tidyjson. direct access method REST API require users either learn use similar tool implement .","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-s-advantages.html","id":"relational-database-representation-of-catalog-entities","dir":"Articles","previous_headings":"","what":"Relational database representation of Catalog entities","title":"quincunx vs REST API direct access","text":"importantly, besides JSON deserialization, chose represent Catalog entity relational database (quincunx’s S4 objects). follow automatically data structure JSON responses. process required careful analysis Catalog data relationships different data structures, since information explicit Catalog documentation. Specifically, partly reverse engineered studying JSON responses frequently communicated Catalog team development package.","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-s-advantages.html","id":"tidyverse-friendly-for-easy-data-wrangling-and-visualisation","dir":"Articles","previous_headings":"","what":"Tidyverse friendly for easy data wrangling and visualisation","title":"quincunx vs REST API direct access","text":"actual implementation -memory relational databases based lists tibbles provides commonly used interface R community nowadays, .e., use -called tidy data, allows taking advantage tidyverse toolkit direct data analysis/modeling visualization, e.g. ggplot2.","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-s-advantages.html","id":"variable-name-harmonisation","dir":"Articles","previous_headings":"","what":"Variable name harmonisation","title":"quincunx vs REST API direct access","text":"table quincunx’s relational databases simply automatic result parsing JSON responses. majority column names unified follow common naming scheme , whenever possible, simplified better communicate biological meaning. example, nearly JSON responses, id element, , depending endpoint, can stand PGS id, PGP id, PSS id, PPM id, Trait id, etc.; quincunx, aptly mapped pgs_id, pgp_id, pss_id, ppm_id efo_id clarity prevent id mistakes. Moreover, new identifiers created quincunx’s objects, allowing connection information tables. new identifiers indicated “local” scope (see vignette('identifiers').","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-s-advantages.html","id":"correct-variable-type-coercion","dir":"Articles","previous_headings":"","what":"Correct variable type coercion","title":"quincunx vs REST API direct access","text":"Basic data types, booleans, strings, integers doubles correctly mapped R’s equivalent basic types quincunx’s tables. Note JSON distinction integers doubles, ambiguity can resolved analysis data variables’ meaning. Also, various representations missing data (e.g., \"NR\", \"Reported\", null, \"\", etc.) correctly mapped NA R. case null JSON objects nested schema, corresponding relational tables recreated correct columns types (albeit empty) scripts break. data structure consistency important feature allowing posterior data wrangling, combination results structure. although tables inside S4 objects might seem raw, actually result data tidying cleaning, reverse engineering relationships objects can made relational tables.","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-s-advantages.html","id":"database-level-subsetting-of-tables","dir":"Articles","previous_headings":"","what":"Database level subsetting of tables","title":"quincunx vs REST API direct access","text":"useful feature S4 objects subsetting based indices identifiers. Moreover, subsetting quincunx’s objects conveniently permeates tables (slots).","code":""},{"path":"https://maialab.org/quincunx/articles/quincunx-s-advantages.html","id":"part-of-the-hapiverse","dir":"Articles","previous_headings":"","what":"Part of the hapiverse","title":"quincunx vs REST API direct access","text":"quincunx’s sibling package gwasrapidd— providing access GWAS Catalog—, incorporates design principles, particularly comes data representation wrangling. users working field already used one tools, see knowledge easily transferred one.","code":""},{"path":"https://maialab.org/quincunx/articles/risk-strat-brs-patients.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Risk of Brugada syndrome patients","text":"example walk hypothetical usage case quincunx application goal calculating risk developing specific disease. illustrative purposes, disease chosen Brugada syndrome 1. Brugada syndrome rare, inherited cardiac disease leading ventricular fibrillation sudden cardiac death structurally normal hearts. People Brugada syndrome increased risk irregular heart rhythms beginning lower chambers heart (ventricles) 2. prevalence varies among regions ethnicities, affecting mostly males. risk stratification management patients, predominantly asymptomatic, still remains challenging. Currently, despite several genes identified, SCN5A attracted attention, approximately 30% patients, genetic variant may implicated causal factor comprehensive analysis 3. walk-, show use quincunx search Brugada syndrome related polygenic scores, compute associated risk depending risk alleles associated genetic variants.","code":""},{"path":"https://maialab.org/quincunx/articles/risk-strat-brs-patients.html","id":"searching-for-brugada-syndrome-in-the-pgs-catalog","dir":"Articles","previous_headings":"","what":"Searching for Brugada syndrome in the PGS Catalog","title":"Risk of Brugada syndrome patients","text":"anything, let us load quincunx: Now, start searching Brugada syndrome PGS Catalog. search traits/diseases might include term \"brugada\" trait description using function get_traits(): can see indeed one trait specifically associated Brugada syndrome, EFO trait MONDO_0015263, whose description confirms genetic disease ventricular arrhythmia may result sudden death. addition, table pgs_ids can retrieve associated PGS score identifiers. date, one polygenic score associated Brugada syndrome: PGS000737.","code":"library(quincunx) # Search in PGS Catalog for traits/diseases containing the term \"brugada\" brs_traits <- get_traits(trait_term = 'brugada', exact_term = FALSE) # EFO Id brs_traits@traits$efo_id #> [1] \"MONDO_0015263\"  # Brugada syndrome description as defined by the Experimental Factor Ontology brs_traits@traits$description #> [1] \"A genetically heterogeneous condition characterized by complete or incomplete right bundle branch block accompanied by ST elevation in leads V1-V3. There is a high incidence of ventricular arrhythmia that may result in sudden death. [NCIT: C142891]\"  # PGS scores associated with Brugada syndrome brs_traits@pgs_ids$pgs_id #> [1] \"PGS000737\" \"PGS001779\""},{"path":"https://maialab.org/quincunx/articles/risk-strat-brs-patients.html","id":"getting-details-about-the-polygenic-score-pgs000737","dir":"Articles","previous_headings":"","what":"Getting details about the polygenic score PGS000737","title":"Risk of Brugada syndrome patients","text":"main table, scores, brs_pgs object, can see following details: name given polygenic score PGS000737 PRS_BrS PRS_BrS definition PGS Catalog one original publication, matches_publication TRUE original authors’ reported trait Brugada syndrome finally, number variants comprising PRS_BrS three.","code":"brs_pgs <- get_scores(pgs_id = 'PGS000737')  # PGS code name brs_pgs@scores$pgs_name #> [1] \"PRS_BrS\"  # Does the PGS score matches the one in the source publication? brs_pgs@scores$matches_publication #> [1] TRUE  # Authors' own description of the trait brs_pgs@scores$reported_trait #> [1] \"Brugada syndrome\"  # Number of variants included in the polygenic risk score brs_pgs@scores$n_variants #> [1] 3"},{"path":"https://maialab.org/quincunx/articles/risk-strat-brs-patients.html","id":"original-publication-that-developed-pgs000737","dir":"Articles","previous_headings":"","what":"Original publication that developed PGS000737","title":"Risk of Brugada syndrome patients","text":"table publications, brs_pgs object, can see, inter alia, following details publication behind PGS PGS000737: Catalog identifier assigned publication PGP000144 publication PubMed id 31504448 published 2019-10-01 publication title : Predicting cardiac electrical response sodium-channel blockade Brugada syndrome using polygenic risk scores. view publication online: open_in_pubmed(brs_pgs@publications$pubmed_id).","code":"# PGP id brs_pgs@publications$pgp_id #> [1] \"PGP000144\"  # PubMed id brs_pgs@publications$pubmed_id #> [1] \"31504448\"  # Publication date brs_pgs@publications$publication_date #> [1] \"2019-10-01\"  # Journal brs_pgs@publications$publication #> [1] \"Eur Heart J\"  # Title brs_pgs@publications$title #> [1] \"Predicting cardiac electrical response to sodium-channel blockade and Brugada syndrome using polygenic risk scores.\""},{"path":"https://maialab.org/quincunx/articles/risk-strat-brs-patients.html","id":"sample-ancestry","dir":"Articles","previous_headings":"","what":"Sample ancestry","title":"Risk of Brugada syndrome patients","text":"get feeling applicability polygenic score, important know genetic diversity participants involved development risk score. can get details ancestry composition samples used develop PRS_BrS looking samples table. table can see one sample (sample_id = 1) r brs_pgs@samples$sample_size individuals used r brs_pgs@samples$stage stage. ancestry category associated individuals European. can use quincunx’s internal dataset possible ancestry categories: ancestry_categories. data, one may assume applicability risk score probably restricted people European ancestry.","code":"# Stage brs_pgs@samples$stage #> [1] \"gwas\"  # Sample size brs_pgs@samples$sample_size #> [1] 1427  # Ancestry brs_pgs@samples$ancestry_category #> [1] \"European\"  # Definition of European ancestry ancestry_categories[ancestry_categories$ancestry_category == 'European', 'definition', drop = TRUE] #> [1] \"Includes individuals who either self-report or have been described by authors as European, Caucasian, white, or one of the sub-populations from this region (e.g., Dutch). This category also includes individuals who genetically cluster with reference populations from this region, for example, 1000 Genomes and/or HapMap CEU, FIN, GBR, IBS, and TSI populations\"  # Cohort brs_pgs@cohorts #> # A tibble: 1 × 4 #>   pgs_id    sample_id cohort_symbol cohort_name                                  #>   <chr>         <int> <chr>         <chr>                                        #> 1 PGS000737         1 DESIR         Epidemiological Study on the Insulin Resist…"},{"path":"https://maialab.org/quincunx/articles/risk-strat-brs-patients.html","id":"the-genetic-composition-of-prs_brs","dir":"Articles","previous_headings":"","what":"The genetic composition of PRS_BrS","title":"Risk of Brugada syndrome patients","text":"get polygenic risk score PRS_BrS (.e., PGS000737), start downloading using function read_scoring_file: PGS comprised three variants: rs11708996, rs10428132, rs9388451. variants located near loci well-know associated Brugada syndrome: SCN5A, SCN10A, NCOA7, HEY2. effect_weight column, can see effect allele (\"C\" cases) variants rs11708996 rs9388451 increases risk score (\\(\\beta = 0.55\\) \\(\\beta = 0.46\\), respectively), whereas \"G\" allele rs10428132 protective effect relative \"T\" allele (\\(\\beta = -0.94\\)). Now, illustrate calculation PRS_BrS using appropriate patient-level data, generate possible genotypes three variants, calculate respective risk scores. (using real patient data since human datasets open). biallelic variant three possible genotypes: /, //. Given score also comprised three variants, total number possible genotypes \\(3\\times3\\times3= 27\\). function genotypes defined generates three genotypes given variant alleles: example, rs11708996 genotypes : set 27 genotypes can generated follows: BrS_genotypes now table possible genotypes comprising three variants PRS_BrS. prepended column dummy patient identifier (patient) refer one 27 possible genotypes unambiguous way.","code":"PRS_BrS <- read_scoring_file('PGS000737') PRS_BrS #> $PGS000737 #> $PGS000737$metadata #> # A tibble: 1 × 10 #>   pgs_id  pgs_n…¹ repor…² mappe…³ efo_t…⁴ genom…⁵ weigh…⁶ numbe…⁷ pgp_id citat…⁸ #>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>     <int> <chr>  <chr>   #> 1 PGS000… PRS_BrS Brugad… Brugad… MONDO_… GRCh37  beta          3 PGP00… Tadros… #> # … with abbreviated variable names ¹​pgs_name, ²​reported_trait, ³​mapped_trait, #> #   ⁴​efo_trait, ⁵​genome_build, ⁶​weight_type, ⁷​number_of_variants, ⁸​citation #>  #> $PGS000737$data #> # A tibble: 3 × 7 #>   rsID       chr_name chr_position effect_allele other_allele effect_w…¹ locus…² #>   <chr>      <chr>           <int> <chr>         <chr>             <dbl> <chr>   #> 1 rs11708996 3            38633923 C             G                  0.55 SCN5A   #> 2 rs10428132 3            38777554 G             T                 -0.94 SCN10A  #> 3 rs9388451  6           126090377 C             T                  0.46 NCOA7,… #> # … with abbreviated variable names ¹​effect_weight, ²​locus_name genotypes <- function(allele1, allele2) {   alleles <- c(allele1, allele2)   m <- tidyr::expand_grid(allele1 = alleles, allele2 = alleles)[-3,]   paste(m[, 1, drop = TRUE], m[, 2, drop = TRUE], sep = '/') } genotypes('G', 'C') #> [1] \"G/G\" \"G/C\" \"C/C\" BrS_genotypes <- tidyr::expand_grid(   rs11708996 = genotypes('G', 'C'),   rs10428132 = genotypes('T', 'G'),   rs9388451 = genotypes('T', 'C') ) %>%   tibble::rowid_to_column('patient')  print(BrS_genotypes, n = Inf) #> # A tibble: 27 × 4 #>    patient rs11708996 rs10428132 rs9388451 #>      <int> <chr>      <chr>      <chr>     #>  1       1 G/G        T/T        T/T       #>  2       2 G/G        T/T        T/C       #>  3       3 G/G        T/T        C/C       #>  4       4 G/G        T/G        T/T       #>  5       5 G/G        T/G        T/C       #>  6       6 G/G        T/G        C/C       #>  7       7 G/G        G/G        T/T       #>  8       8 G/G        G/G        T/C       #>  9       9 G/G        G/G        C/C       #> 10      10 G/C        T/T        T/T       #> 11      11 G/C        T/T        T/C       #> 12      12 G/C        T/T        C/C       #> 13      13 G/C        T/G        T/T       #> 14      14 G/C        T/G        T/C       #> 15      15 G/C        T/G        C/C       #> 16      16 G/C        G/G        T/T       #> 17      17 G/C        G/G        T/C       #> 18      18 G/C        G/G        C/C       #> 19      19 C/C        T/T        T/T       #> 20      20 C/C        T/T        T/C       #> 21      21 C/C        T/T        C/C       #> 22      22 C/C        T/G        T/T       #> 23      23 C/C        T/G        T/C       #> 24      24 C/C        T/G        C/C       #> 25      25 C/C        G/G        T/T       #> 26      26 C/C        G/G        T/C       #> 27      27 C/C        G/G        C/C"},{"path":"https://maialab.org/quincunx/articles/risk-strat-brs-patients.html","id":"prs_brs-calculation","dir":"Articles","previous_headings":"","what":"PRS_BrS calculation","title":"Risk of Brugada syndrome patients","text":"assume additive genetic architecture, independence risk variants, calculation PRS_BrS straightforward: simply multiply number effect alleles genotype effect_weight, add everything: \\[{PRS_{BrS}} = \\beta_{\\text{rs11708996}} \\times x_{rs11708996} + \\beta_{\\text{rs10428132}} \\times x_{rs10428132} + \\beta_{\\text{rs9388451}} \\times x_{rs9388451}\\] , e.g., \\(\\beta_{\\text{rs11708996}} = 0.55\\), \\(x_{rs11708996}\\) either \\(0\\), genotype “G/G”, \\(1\\), genotype “G/C” \\(2\\), genotype “C/C”. side note, although simplistic, additive model reflects best estimate genetic architecture common complex disorders, little evidence interaction genetic variants detected. although type model ignores gene-gene gene-environment interactions 4, seems, nevertheless, largest meta-analysis heritability twin studies supports simple additive model traits examined 5. Next calculate PRS_BrS genotypes BrS_genotypes: , voilà, risk scores possible genotypes: graphical visualisation risk scores lowest (top) highest (bottom):  polygenic risk score spans range (almost) \\(-2\\) (litle ) \\(2\\). genotypes negative score carry mostly “protective” alleles, e.g., extreme case G/G-G/G-T/T (containing “protective” alleles)—individuals carrying genotype lowest risk developing Brugada syndrome; hand, individuals carrying genotype C/C-T/T-C/C highest risk, probably subject closer clinical follow-.","code":"prs <- Vectorize(function(scoring, variant_id, genotype) {   alleles <- unlist(strsplit(genotype, '/'))   eff <-     scoring[scoring$rsID == variant_id, 'effect_allele', drop = TRUE]   weight <-     scoring[scoring$rsID == variant_id, 'effect_weight', drop = TRUE]      (alleles[1] == eff) * weight + (alleles[2] == eff) * weight }, vectorize.args = 'genotype') s <- PRS_BrS$PGS000737$data scores <- BrS_genotypes %>%   dplyr::mutate(     score = prs(s, 'rs11708996', rs11708996) +       prs(s, 'rs10428132', rs10428132) +       prs(s, 'rs9388451', rs9388451)   )  print(scores, n = Inf) #> # A tibble: 27 × 5 #>    patient rs11708996 rs10428132 rs9388451   score #>      <int> <chr>      <chr>      <chr>       <dbl> #>  1       1 G/G        T/T        T/T        0      #>  2       2 G/G        T/T        T/C        0.46   #>  3       3 G/G        T/T        C/C        0.92   #>  4       4 G/G        T/G        T/T       -0.94   #>  5       5 G/G        T/G        T/C       -0.48   #>  6       6 G/G        T/G        C/C       -0.0200 #>  7       7 G/G        G/G        T/T       -1.88   #>  8       8 G/G        G/G        T/C       -1.42   #>  9       9 G/G        G/G        C/C       -0.96   #> 10      10 G/C        T/T        T/T        0.55   #> 11      11 G/C        T/T        T/C        1.01   #> 12      12 G/C        T/T        C/C        1.47   #> 13      13 G/C        T/G        T/T       -0.39   #> 14      14 G/C        T/G        T/C        0.0700 #> 15      15 G/C        T/G        C/C        0.53   #> 16      16 G/C        G/G        T/T       -1.33   #> 17      17 G/C        G/G        T/C       -0.87   #> 18      18 G/C        G/G        C/C       -0.410  #> 19      19 C/C        T/T        T/T        1.1    #> 20      20 C/C        T/T        T/C        1.56   #> 21      21 C/C        T/T        C/C        2.02   #> 22      22 C/C        T/G        T/T        0.160  #> 23      23 C/C        T/G        T/C        0.62   #> 24      24 C/C        T/G        C/C        1.08   #> 25      25 C/C        G/G        T/T       -0.78   #> 26      26 C/C        G/G        T/C       -0.320  #> 27      27 C/C        G/G        C/C        0.140"},{"path":"https://maialab.org/quincunx/articles/risk-strat-brs-patients.html","id":"final-remarks","dir":"Articles","previous_headings":"","what":"Final remarks","title":"Risk of Brugada syndrome patients","text":"question use risk scores obtained, namely, proceed clinically, open -going discussion medical community typically needs considered larger context individual characteristics. good place start looking discussion original paper published polygenic risk score 6. Furthermore, purpose vignette show start trait disease interest, end actually calculating risk scores particular individuals (user real patient data). example, individuals hypothetical, represented silico constructed genotypes. trying apply workflow traits diseases, things likely different simple example, namely, number variants likely much larger, polygenic risk score model applied complex simple additive architecture assumed . Also, probably want take advantage dedicated tool specialises score computation instead using custom R code, e.g., use popular bigsnpr package 7.","code":""},{"path":"https://maialab.org/quincunx/articles/risk-strat-brs-patients.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Risk of Brugada syndrome patients","text":"1. Brugada, J. Featuring: Josep Brugada. European Cardiology Review 14, 197–200 (2019). 2. Sarquella-Brugada, G., Campuzano, O., Arbelo, E., Brugada, J. & Brugada, R. Brugada syndrome: Clinical genetic findings. Genetics Medicine 18, 3–12 (2015). 3. Brugada, J., Campuzano, O., Arbelo, E., Sarquella-Brugada, G. & Brugada, R. Present Status Brugada Syndrome. Journal American College Cardiology 72, 1046–1059 (2018). 4. Aschard, H. perspective interaction effects genetic association studies. Genetic Epidemiology 40, 678–688 (2016). 5. Polderman, T. J. C. et al. Meta-analysis heritability human traits based fifty years twin studies. Nature Genetics 47, 702–709 (2015). 6. Tadros, R. et al. Predicting cardiac electrical response sodium-channel blockade Brugada syndrome using polygenic risk scores. European Heart Journal 40, 3097–3107 (2019). 7. Privé, F., Aschard, H., Ziyatdinov, . & Blum, M. G. B. Efficient analysis large-scale genome-wide data two R packages: Bigstatsr bigsnpr. Bioinformatics (2018) doi:10.1093/bioinformatics/bty185.","code":""},{"path":"https://maialab.org/quincunx/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ramiro Magno. Author, maintainer. Isabel Duarte. Author. Ana-Teresa Maia. Author. . Copyright holder, funder.","code":""},{"path":"https://maialab.org/quincunx/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ramiro Magno, Isabel Duarte, Ana-Teresa Maia,  quincunx: R package query, download wrangle PGS Catalog data,  Bioinformatics, btab522, 16 July 2021, Pages 1-3,   https://doi.org/10.1093/bioinformatics/btab522","code":"@Article{,   title = {quincunx: an R package to query, download and wrangle PGS Catalog data},   author = {Ramiro Magno and Isabel Duarte and Ana-Teresa Maia},   journal = {Bioinformatics},   year = {2021},   pages = {1--3},   url = {https://doi.org/10.1093/bioinformatics/btab522}, }"},{"path":"https://maialab.org/quincunx/index.html","id":"quincunx-","dir":"","previous_headings":"","what":"Access the PGS Catalog from R","title":"Access the PGS Catalog from R","text":"goal quincunx provide programmatic access Polygenic Score (PGS) Catalog, open resource polygenic scores associated metadata describing development respective assessment. Browse online documentation maialab.org/quincunx get started.","code":""},{"path":"https://maialab.org/quincunx/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access the PGS Catalog from R","text":"Install quincunx CRAN: can instead install development version quincunx setting Ramiro Magno’s universe repository:","code":"# Install from CRAN install.packages(\"quincunx\") options(repos = c(ramiromagno = 'https://ramiromagno.r-universe.dev',                 CRAN = 'https://cloud.r-project.org'))  install.packages('quincunx')"},{"path":[]},{"path":"https://maialab.org/quincunx/index.html","id":"citing-this-work","dir":"","previous_headings":"","what":"Citing this work","title":"Access the PGS Catalog from R","text":"quincunx published Bioinformatics 2021: https://doi.org/10.1093/bioinformatics/btab522. generate citation publication within R:","code":"citation('quincunx') #>  #> To cite quincunx in publications use: #>  #>   Ramiro Magno, Isabel Duarte, Ana-Teresa Maia, quincunx: an R package #>   to query, download and wrangle PGS Catalog data, Bioinformatics, #>   btab522, 16 July 2021, Pages 1-3, #>   https://doi.org/10.1093/bioinformatics/btab522 #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {quincunx: an R package to query, download and wrangle PGS Catalog data}, #>     author = {Ramiro Magno and Isabel Duarte and Ana-Teresa Maia}, #>     journal = {Bioinformatics}, #>     year = {2021}, #>     pages = {1--3}, #>     url = {https://doi.org/10.1093/bioinformatics/btab522}, #>   }"},{"path":"https://maialab.org/quincunx/index.html","id":"citing-pgs-catalog-publications","dir":"","previous_headings":"","what":"Citing PGS Catalog publications","title":"Access the PGS Catalog from R","text":"Also, please forget cite authors behind original studies papers associated PGS Catalog project: Lambert, S.., Gil, L., Jupp, S. et al. Polygenic Score Catalog open database reproducibility systematic evaluation. Nat Genet 53, 420–425 (2021). doi: 10.1038/s41588-021-00783-5 Wand, H., Lambert, S.., Tamburro, C. et al. Improving reporting standards polygenic scores risk prediction studies. Nature 591, 211–219 (2021). doi: 10.1038/s41586-021-03243-6","code":""},{"path":"https://maialab.org/quincunx/index.html","id":"terms-of-use","dir":"","previous_headings":"","what":"Terms of use","title":"Access the PGS Catalog from R","text":"Please note use data provided PGS Catalog either directly via quincunx agree abide EMBL-EBI Terms Use.","code":""},{"path":"https://maialab.org/quincunx/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Access the PGS Catalog from R","text":"Please note {quincunx} project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://maialab.org/quincunx/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Access the PGS Catalog from R","text":"work possible without precious feedback PGS Catalog team, particularly Samuel Lambert Laurent Gil.","code":""},{"path":"https://maialab.org/quincunx/index.html","id":"package-name-and-hex-sticker","dir":"","previous_headings":"","what":"Package name and hex sticker","title":"Access the PGS Catalog from R","text":"package name quincunx another name Galton Board, nicely exemplifies Central Limit Theorem, turn key concept genetics, namely, Fisher’s infinitesimal model… leads us Polygenic Scores, key concept PGS Catalog. bird hex sticker Porphyrio porphyrio, emblematic species native Ria Formosa Natural Park, wildlife reserve surrounding University Algarve, authors affiliated.","code":""},{"path":"https://maialab.org/quincunx/reference/ancestry_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Ancestry categories and classes — ancestry_categories","title":"Ancestry categories and classes — ancestry_categories","text":"dataset containing ancestry categories defined NHGRI-EBI GWAS Catalog framework (Table 1, doi:10.1186/s13059-018-1396-2 ). Ancestry categories assigned samples distinct well-defined patterns genetic variation. find categories variable ancestry_category following objects: scores, performance_metrics sample_sets. Ancestry categories (ancestry_category) clustered ancestry classes (ancestry_class).","code":""},{"path":"https://maialab.org/quincunx/reference/ancestry_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ancestry categories and classes — ancestry_categories","text":"","code":"ancestry_categories"},{"path":"https://maialab.org/quincunx/reference/ancestry_categories.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ancestry categories and classes — ancestry_categories","text":"data frame 19 ancestry categories (rows) 6 columns: ancestry_category Ancestry category. ancestry_class reduce complexity associated many   ancestry categories, merged higher-level groupings   (ancestry_class). groupings represent current breadth   data PGS Catalog likely change data added. ancestry_class_symbol 3-letter code ancestry_class   e.g. \"EUR\" \"MAE\". ancestry_class_colour Hexadecimal colour code associated   ancestry groupings (ancestry_class). can useful   visually communicating ancestries. definition Description ancestry category. examples Examples detailed descriptions sample ancestries   included category.","code":""},{"path":"https://maialab.org/quincunx/reference/ancestry_categories.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Ancestry categories and classes — ancestry_categories","text":"Table 1 Moralles et al. (2018): doi:10.1186/s13059-018-1396-2 PGS Catalog Ancestry Documentation: http://www.pgscatalog.org/docs/ancestry/","code":""},{"path":"https://maialab.org/quincunx/reference/ancestry_categories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ancestry categories and classes — ancestry_categories","text":"","code":"ancestry_categories #> # A tibble: 19 × 6 #>    ancestry_category                     ances…¹ ances…² ances…³ defin…⁴ examp…⁵ #>    <chr>                                 <chr>   <chr>   <chr>   <chr>   <chr>   #>  1 Aboriginal Australian                 Additi… OTH     #999999 \"Inclu… Martu … #>  2 African American or Afro-Caribbean    African AFR     #FFD900 \"Inclu… Africa… #>  3 African unspecified                   African AFR     #FFD900 \"Inclu… Africa… #>  4 Asian unspecified                     Additi… ASN     #B15928 \"Inclu… Asian,… #>  5 Central Asian                         Additi… ASN     #B15928 \"Inclu… Silk R… #>  6 East Asian                            East A… EAS     #4DAF4A \"Inclu… Chines… #>  7 European                              Europe… EUR     #377EB8 \"Inclu… Spanis… #>  8 Greater Middle Eastern (Middle Easte… Greate… GME     #00CED1 \"Inclu… Tunisi… #>  9 Hispanic or Latin American            Hispan… AMR     #E41A1C \"Inclu… Brazil… #> 10 Native American                       Additi… OTH     #999999 \"Inclu… Pima I… #> 11 Not reported                          Ancest… NR      #BBBBBB \"Inclu… NA      #> 12 Oceanian                              Additi… OTH     #999999 \"Inclu… Solomo… #> 13 Other                                 Additi… OTH     #999999 \"Inclu… Surina… #> 14 Other admixed ancestry                Additi… OTH     #999999 \"Inclu… NA      #> 15 South Asian                           South … SAS     #984EA3 \"Inclu… Bangla… #> 16 South East Asian                      Additi… ASN     #B15928 \"Inclu… Thai, … #> 17 Sub-Saharan African                   African AFR     #FFD900 \"Inclu… Yoruba… #> 18 Multi-Ancestry (including Europeans)  Multi-… MAE     #A6CEE3 \"Combi… NA      #> 19 Multi-Ancestry (excluding Europeans)  Multi-… MAO     #FF7F00 \"Combi… NA      #> # … with abbreviated variable names ¹​ancestry_class, ²​ancestry_class_symbol, #> #   ³​ancestry_class_colour, ⁴​definition, ⁵​examples"},{"path":"https://maialab.org/quincunx/reference/bind.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind PGS Catalog objects — bind","title":"Bind PGS Catalog objects — bind","text":"Binds together PGS Catalog objects class. Note bind() preserves duplicates whereas union .","code":""},{"path":"https://maialab.org/quincunx/reference/bind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind PGS Catalog objects — bind","text":"","code":"bind(x, ...)"},{"path":"https://maialab.org/quincunx/reference/bind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind PGS Catalog objects — bind","text":"x object either class scores, publications, traits, performance_metrics, sample_sets, cohorts trait_categories. ... Objects class x.","code":""},{"path":"https://maialab.org/quincunx/reference/bind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind PGS Catalog objects — bind","text":"object class x.","code":""},{"path":"https://maialab.org/quincunx/reference/bind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind PGS Catalog objects — bind","text":"","code":"if (FALSE) { # interactive() # Get some `scores` objects: my_scores_1 <- get_scores(c('PGS000012', 'PGS000013')) my_scores_2 <- get_scores(c('PGS000013', 'PGS000014'))  # NB: with `bind()`, PGS000013 is repeated (as opposed to `union()`) bind(my_scores_1, my_scores_2)@scores }"},{"path":"https://maialab.org/quincunx/reference/clear_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear quincunx cache of memoised functions — clear_cache","title":"Clear quincunx cache of memoised functions — clear_cache","text":"quincunx uses memoised functions REST API calls. Use function reset cache.","code":""},{"path":"https://maialab.org/quincunx/reference/clear_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear quincunx cache of memoised functions — clear_cache","text":"","code":"clear_cache()"},{"path":"https://maialab.org/quincunx/reference/clear_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear quincunx cache of memoised functions — clear_cache","text":"Returns logical value, indicating whether resetting   cache successful (TRUE)  FALSE.","code":""},{"path":"https://maialab.org/quincunx/reference/clear_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear quincunx cache of memoised functions — clear_cache","text":"","code":"clear_cache() #> [1] TRUE"},{"path":"https://maialab.org/quincunx/reference/cohorts-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a set of cohorts — cohorts-class","title":"An S4 class to represent a set of cohorts — cohorts-class","text":"cohorts object consists two tables (slots) combined form relational database subset cohorts. cohort observation (row) cohorts table (first table).","code":""},{"path":"https://maialab.org/quincunx/reference/cohorts-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a set of cohorts — cohorts-class","text":"cohorts table cohorts. cohort (row) identified   cohort_symbol. Columns: cohort_symbol Cohort symbol. Example: \"CECILE\". cohort_name Cohort full name. Example: \"CECILE Breast Cancer Study\". pgs_ids table cohorts associated polygenic scores   identifiers. Columns: cohort_symbol Cohort symbol. Example: \"CECILE\". pgs_id Polygenic Score (PGS) identifier. stage Sample stage: either \"gwas/dev\" \"eval\".","code":""},{"path":"https://maialab.org/quincunx/reference/cohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the S4 cohorts object. — cohorts","title":"Constructor for the S4 cohorts object. — cohorts","text":"Constructor S4 cohorts object.","code":""},{"path":"https://maialab.org/quincunx/reference/cohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the S4 cohorts object. — cohorts","text":"","code":"cohorts(cohorts = s4cohorts_cohorts_tbl(), pgs_ids = s4cohorts_pgs_ids_tbl())"},{"path":"https://maialab.org/quincunx/reference/cohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the S4 cohorts object. — cohorts","text":"cohorts s4cohorts_cohorts_tbl tibble. pgs_ids s4cohorts_pgs_ids_tbl tibble.","code":""},{"path":"https://maialab.org/quincunx/reference/cohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for the S4 cohorts object. — cohorts","text":"object class cohorts.","code":""},{"path":"https://maialab.org/quincunx/reference/collect_pgs_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect development and evaluation pgs_ids — collect_pgs_ids","title":"Collect development and evaluation pgs_ids — collect_pgs_ids","text":"Collect development evaluation pgs_ids.","code":""},{"path":"https://maialab.org/quincunx/reference/collect_pgs_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect development and evaluation pgs_ids — collect_pgs_ids","text":"","code":"collect_pgs_ids(tbl_json)"},{"path":"https://maialab.org/quincunx/reference/collect_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect samples_variants and samples_training — collect_samples","title":"Collect samples_variants and samples_training — collect_samples","text":"Collect samples_variants samples_training reference unique id (sample_id).","code":""},{"path":"https://maialab.org/quincunx/reference/collect_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect samples_variants and samples_training — collect_samples","text":"","code":"collect_samples(tbl_json)"},{"path":"https://maialab.org/quincunx/reference/contains_question_mark.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a string contain a question mark? — contains_question_mark","title":"Does a string contain a question mark? — contains_question_mark","text":"Find strings contain question mark. function uses following regular expression: [\\?].","code":""},{"path":"https://maialab.org/quincunx/reference/contains_question_mark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a string contain a question mark? — contains_question_mark","text":"","code":"contains_question_mark(str, convert_NA_to_FALSE = TRUE)"},{"path":"https://maialab.org/quincunx/reference/contains_question_mark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does a string contain a question mark? — contains_question_mark","text":"str character vector strings. convert_NA_to_FALSE Whether treat NA NA (convert_NA_to_FALSE = FALSE) whether return FALSE NA found (convert_NA_to_FALSE = TRUE).","code":""},{"path":"https://maialab.org/quincunx/reference/contains_question_mark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does a string contain a question mark? — contains_question_mark","text":"logical vector.","code":""},{"path":"https://maialab.org/quincunx/reference/count.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the count field from a JSON response — count","title":"Extract the count field from a JSON response — count","text":"function takes string JSON response returns value count field. fails match pattern returns NA_integer_.","code":""},{"path":"https://maialab.org/quincunx/reference/count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the count field from a JSON response — count","text":"","code":"count(json_string)"},{"path":"https://maialab.org/quincunx/reference/count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the count field from a JSON response — count","text":"json_string string.","code":""},{"path":"https://maialab.org/quincunx/reference/count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the count field from a JSON response — count","text":"integer value.","code":""},{"path":"https://maialab.org/quincunx/reference/filter_by_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter PGS Catalog objects by identifier. — filter_by_id","title":"Filter PGS Catalog objects by identifier. — filter_by_id","text":"Use filter_by_id filter PGS Catalog objects respective identifier (id).","code":""},{"path":"https://maialab.org/quincunx/reference/filter_by_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter PGS Catalog objects by identifier. — filter_by_id","text":"","code":"filter_by_id(x, id)"},{"path":"https://maialab.org/quincunx/reference/filter_by_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter PGS Catalog objects by identifier. — filter_by_id","text":"x object class eitherscores, publications, traits, performance_metrics, sample_sets. id Identifier.","code":""},{"path":"https://maialab.org/quincunx/reference/filter_by_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter PGS Catalog objects by identifier. — filter_by_id","text":"Returns object class either scores,  publications, traits,  performance_metrics, sample_sets.","code":""},{"path":"https://maialab.org/quincunx/reference/first_non_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the position of the first non-NA value — first_non_na","title":"Returns the position of the first non-NA value — first_non_na","text":"Returns position first non-NA value","code":""},{"path":"https://maialab.org/quincunx/reference/first_non_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the position of the first non-NA value — first_non_na","text":"","code":"first_non_na(x)"},{"path":"https://maialab.org/quincunx/reference/first_non_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the position of the first non-NA value — first_non_na","text":"x atomic vector.","code":""},{"path":"https://maialab.org/quincunx/reference/get_ancestry_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ancestry categories and classes — get_ancestry_categories","title":"Get ancestry categories and classes — get_ancestry_categories","text":"Retrieves ancestry categories classes. function simply returns object ancestry_categories.","code":""},{"path":"https://maialab.org/quincunx/reference/get_ancestry_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ancestry categories and classes — get_ancestry_categories","text":"","code":"get_ancestry_categories()"},{"path":"https://maialab.org/quincunx/reference/get_ancestry_categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ancestry categories and classes — get_ancestry_categories","text":"tibble ancestry categories, classes associated   information. See  ancestry_categories details   column.","code":""},{"path":"https://maialab.org/quincunx/reference/get_ancestry_categories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ancestry categories and classes — get_ancestry_categories","text":"","code":"get_ancestry_categories() #> # A tibble: 19 × 6 #>    ancestry_category                     ances…¹ ances…² ances…³ defin…⁴ examp…⁵ #>    <chr>                                 <chr>   <chr>   <chr>   <chr>   <chr>   #>  1 Aboriginal Australian                 Additi… OTH     #999999 \"Inclu… Martu … #>  2 African American or Afro-Caribbean    African AFR     #FFD900 \"Inclu… Africa… #>  3 African unspecified                   African AFR     #FFD900 \"Inclu… Africa… #>  4 Asian unspecified                     Additi… ASN     #B15928 \"Inclu… Asian,… #>  5 Central Asian                         Additi… ASN     #B15928 \"Inclu… Silk R… #>  6 East Asian                            East A… EAS     #4DAF4A \"Inclu… Chines… #>  7 European                              Europe… EUR     #377EB8 \"Inclu… Spanis… #>  8 Greater Middle Eastern (Middle Easte… Greate… GME     #00CED1 \"Inclu… Tunisi… #>  9 Hispanic or Latin American            Hispan… AMR     #E41A1C \"Inclu… Brazil… #> 10 Native American                       Additi… OTH     #999999 \"Inclu… Pima I… #> 11 Not reported                          Ancest… NR      #BBBBBB \"Inclu… NA      #> 12 Oceanian                              Additi… OTH     #999999 \"Inclu… Solomo… #> 13 Other                                 Additi… OTH     #999999 \"Inclu… Surina… #> 14 Other admixed ancestry                Additi… OTH     #999999 \"Inclu… NA      #> 15 South Asian                           South … SAS     #984EA3 \"Inclu… Bangla… #> 16 South East Asian                      Additi… ASN     #B15928 \"Inclu… Thai, … #> 17 Sub-Saharan African                   African AFR     #FFD900 \"Inclu… Yoruba… #> 18 Multi-Ancestry (including Europeans)  Multi-… MAE     #A6CEE3 \"Combi… NA      #> 19 Multi-Ancestry (excluding Europeans)  Multi-… MAO     #FF7F00 \"Combi… NA      #> # … with abbreviated variable names ¹​ancestry_class, ²​ancestry_class_symbol, #> #   ³​ancestry_class_colour, ⁴​definition, ⁵​examples"},{"path":"https://maialab.org/quincunx/reference/get_ancestry_symbol_mappings.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PGS Catalog Ancestry Symbol Mappings — get_ancestry_symbol_mappings","title":"Get PGS Catalog Ancestry Symbol Mappings — get_ancestry_symbol_mappings","text":"Retrieves mappings ancestry class symbols ancestry class via PGS Catalog REST API. Note: function exported used debugging reasons. Use alternative get_ancestry_categories.","code":""},{"path":"https://maialab.org/quincunx/reference/get_ancestry_symbol_mappings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PGS Catalog Ancestry Symbol Mappings — get_ancestry_symbol_mappings","text":"","code":"get_ancestry_symbol_mappings(   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/get_ancestry_symbol_mappings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get PGS Catalog Ancestry Symbol Mappings — get_ancestry_symbol_mappings","text":"verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar indicating download progress REST API server.","code":""},{"path":"https://maialab.org/quincunx/reference/get_ancestry_symbol_mappings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PGS Catalog Ancestry Symbol Mappings — get_ancestry_symbol_mappings","text":"Return tibble mappings ancestry symbols   name, e.g. EUR European, respectively.","code":""},{"path":"https://maialab.org/quincunx/reference/get_cohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PGS Catalog Cohorts — get_cohorts","title":"Get PGS Catalog Cohorts — get_cohorts","text":"Retrieves cohorts via PGS Catalog REST API. Please note cohort_symbol vectorised, thus allowing batch mode search.","code":""},{"path":"https://maialab.org/quincunx/reference/get_cohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PGS Catalog Cohorts — get_cohorts","text":"","code":"get_cohorts(   cohort_symbol = NULL,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/get_cohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get PGS Catalog Cohorts — get_cohorts","text":"cohort_symbol cohort symbol NULL cohorts intended. verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar indicating download progress REST API server.","code":""},{"path":"https://maialab.org/quincunx/reference/get_cohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PGS Catalog Cohorts — get_cohorts","text":"cohorts object.","code":""},{"path":"https://maialab.org/quincunx/reference/get_cohorts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get PGS Catalog Cohorts — get_cohorts","text":"","code":"# Get information about specific cohorts by their symbols (acronyms) get_cohorts(cohort_symbol = c('23andMe', 'IPOBCS')) #> An object of class \"cohorts\" #> Slot \"cohorts\": #> # A tibble: 2 × 2 #>   cohort_symbol cohort_name                                             #>   <chr>         <chr>                                                   #> 1 23andMe       23andMe                                                 #> 2 IPOBCS        Portuguese Oncology Institute-Porto Breast Cancer Study #>  #> Slot \"pgs_ids\": #> # A tibble: 35 × 3 #>    cohort_symbol pgs_id    stage    #>    <chr>         <chr>     <chr>    #>  1 23andMe       PGS000336 gwas/dev #>  2 23andMe       PGS000730 gwas/dev #>  3 23andMe       PGS000731 gwas/dev #>  4 23andMe       PGS000732 gwas/dev #>  5 23andMe       PGS000766 gwas/dev #>  6 23andMe       PGS000767 gwas/dev #>  7 23andMe       PGS000780 gwas/dev #>  8 23andMe       PGS000790 gwas/dev #>  9 23andMe       PGS000800 gwas/dev #> 10 23andMe       PGS000810 gwas/dev #> # … with 25 more rows #> # ℹ Use `print(n = ...)` to see more rows #>   # Get info on all cohorts (may take a few minutes to download) if (FALSE) { get_cohorts() }"},{"path":"https://maialab.org/quincunx/reference/get_performance_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PGS Catalog Performance Metrics — get_performance_metrics","title":"Get PGS Catalog Performance Metrics — get_performance_metrics","text":"Retrieves performance metrics via PGS Catalog REST API. REST API queried multiple times criteria passed arguments (see ). default performance metrics match criteria supplied arguments retrieved: corresponds default option set_operation set 'union'. rather associations match simultaneously criteria provided, set set_operation 'intersection'.","code":""},{"path":"https://maialab.org/quincunx/reference/get_performance_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PGS Catalog Performance Metrics — get_performance_metrics","text":"","code":"get_performance_metrics(   ppm_id = NULL,   pgs_id = NULL,   set_operation = \"union\",   interactive = TRUE,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/get_performance_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get PGS Catalog Performance Metrics — get_performance_metrics","text":"ppm_id character vector PGS Catalog performance metrics accession identifiers. pgs_id character vector PGS Catalog score accession identifiers. set_operation Either 'union' 'intersection'. tells performance metrics retrieved different criteria  combined: 'union' binds together results removing duplicates 'intersection' keeps performance metrics found different criteria. interactive logical. performance metrics requested, whether ask interactively really want proceed. verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/get_performance_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PGS Catalog Performance Metrics — get_performance_metrics","text":"performance_metrics object.","code":""},{"path":"https://maialab.org/quincunx/reference/get_performance_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get PGS Catalog Performance Metrics — get_performance_metrics","text":"Please note search criteria vectorised, thus allowing batch mode search.","code":""},{"path":"https://maialab.org/quincunx/reference/get_performance_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get PGS Catalog Performance Metrics — get_performance_metrics","text":"","code":"if (FALSE) { # Get performance metrics catalogued with identifier 'PPM000001' get_performance_metrics(ppm_id = 'PPM000001')  # Get performance metrics associated with polygenic score id 'PGS000001' get_performance_metrics(pgs_id = 'PGS000001')  # To retrieve all catalogued performed metrics in PGS Catalog you simply # leave the parameters `ppm_id` and `pgs_id` as `NULL`. get_performance_metrics() }"},{"path":"https://maialab.org/quincunx/reference/get_publications.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PGS Catalog Publications — get_publications","title":"Get PGS Catalog Publications — get_publications","text":"Retrieves PGS publications via PGS Catalog REST API. REST API queried multiple times criteria passed arguments (see ). default publications match criteria supplied arguments retrieved: corresponds default option set_operation set 'union'. rather associations match simultaneously criteria provided, set set_operation 'intersection'.","code":""},{"path":"https://maialab.org/quincunx/reference/get_publications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PGS Catalog Publications — get_publications","text":"","code":"get_publications(   pgp_id = NULL,   pgs_id = NULL,   pubmed_id = NULL,   author = NULL,   set_operation = \"union\",   interactive = TRUE,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/get_publications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get PGS Catalog Publications — get_publications","text":"pgp_id character vector PGS Catalog publication accession identifiers. pgs_id character vector PGS Catalog score accession identifiers. pubmed_id integer vector PubMed identifiers. author character vector author names, author list authors publication, .e.g. 'Mavaddat'. set_operation Either 'union' 'intersection'. tells publications retrieved different criteria  combined: 'union' binds together results removing duplicates 'intersection' keeps publications found different criteria. interactive logical. publications requested, whether ask interactively really want proceed. verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/get_publications.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PGS Catalog Publications — get_publications","text":"publications object.","code":""},{"path":"https://maialab.org/quincunx/reference/get_publications.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get PGS Catalog Publications — get_publications","text":"Please note search criteria vectorised, thus allowing batch mode search. details see help vignette: vignette(\"getting-pgs-publications\", package = \"quincunx\").","code":""},{"path":"https://maialab.org/quincunx/reference/get_publications.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get PGS Catalog Publications — get_publications","text":"","code":"if (FALSE) { # Get PGS publications by their identifier get_publications(pgp_id = c('PGP000001', 'PGP000002'))  # By polygenic score identifier get_publications(pgs_id = 'PGS000003')  # By PubMed identifier get_publications(pubmed_id = '30554720')  # By author's last name get_publications(author = 'Natarajan') }"},{"path":"https://maialab.org/quincunx/reference/get_releases.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PGS Catalog Releases — get_releases","title":"Get PGS Catalog Releases — get_releases","text":"function retrieves PGS Catalog release information. Note columns pgs_id, ppm_id pgp_id contain element vector. columns can unnested using unnest_longer (see Examples).","code":""},{"path":"https://maialab.org/quincunx/reference/get_releases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PGS Catalog Releases — get_releases","text":"","code":"get_releases(   date = \"latest\",   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/get_releases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get PGS Catalog Releases — get_releases","text":"date One dates formatted \"YYYY-MM-DD\" respective releases, \"latest\" latest release, \"\" releases. verbose Whether print information underlying requests REST API server. warnings Whether print warnings underlying requests REST API server. progress_bar Whether show progress bar indicating download progress REST API server.","code":""},{"path":"https://maialab.org/quincunx/reference/get_releases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PGS Catalog Releases — get_releases","text":"data frame row release. Columns : date Release date. n_pgs Number released Polygenic Score (PGS) identifiers (pgs_id). n_ppm Number released Performance Metric (PPM) identifiers (ppm_id). n_pgp Number released PGS Catalog Publication (PGP) identifiers (pgp_id). pgs_id Released Polygenic Score (PGS) identifiers. ppm_id Released Performance Metric (PPM) identifiers. pgp_id Released PGS Catalog Publication (PGP) identifiers. notes News release.","code":""},{"path":"https://maialab.org/quincunx/reference/get_releases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get PGS Catalog Releases — get_releases","text":"","code":"if (FALSE) { # Get the latest release get_releases() get_releases(date = 'latest')  # Get all releases get_releases(date = 'all')  # Get a specific release by date get_releases(date = '2020-08-19') }"},{"path":"https://maialab.org/quincunx/reference/get_sample_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PGS Catalog Sample Sets — get_sample_sets","title":"Get PGS Catalog Sample Sets — get_sample_sets","text":"Retrieves sample sets via PGS Catalog REST API. REST API queried multiple times criteria passed arguments (see ). default sample sets match criteria supplied arguments retrieved: corresponds default option set_operation set 'union'. rather associations match simultaneously criteria provided, set set_operation 'intersection'.","code":""},{"path":"https://maialab.org/quincunx/reference/get_sample_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PGS Catalog Sample Sets — get_sample_sets","text":"","code":"get_sample_sets(   pss_id = NULL,   pgs_id = NULL,   set_operation = \"union\",   interactive = TRUE,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/get_sample_sets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get PGS Catalog Sample Sets — get_sample_sets","text":"pss_id character vector PGS Catalog sample sets accession identifiers. pgs_id character vector PGS Catalog score accession identifiers. set_operation Either 'union' 'intersection'. tells performance metrics retrieved different criteria  combined: 'union' binds together results removing duplicates 'intersection' keeps sample sets found different criteria. interactive logical. sample sets requested, whether ask interactively really want proceed. verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar indicating download progress REST API server.","code":""},{"path":"https://maialab.org/quincunx/reference/get_sample_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PGS Catalog Sample Sets — get_sample_sets","text":"sample_sets object.","code":""},{"path":"https://maialab.org/quincunx/reference/get_sample_sets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get PGS Catalog Sample Sets — get_sample_sets","text":"Please note search criteria vectorised, thus allowing batch mode search.","code":""},{"path":"https://maialab.org/quincunx/reference/get_sample_sets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get PGS Catalog Sample Sets — get_sample_sets","text":"","code":"if (FALSE) { # Search by PGS identifier get_sample_sets(pgs_id = 'PGS000013')  # Search by the PSS identifier get_sample_sets(pss_id = 'PSS000068') }"},{"path":"https://maialab.org/quincunx/reference/get_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PGS Catalog Scores — get_scores","title":"Get PGS Catalog Scores — get_scores","text":"Retrieves polygenic scores via PGS Catalog REST API. REST API queried multiple times criteria passed arguments (see ). default scores match criteria supplied arguments retrieved: corresponds default option set_operation set 'union'. rather associations match simultaneously criteria provided, set set_operation 'intersection'.","code":""},{"path":"https://maialab.org/quincunx/reference/get_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PGS Catalog Scores — get_scores","text":"","code":"get_scores(   pgs_id = NULL,   efo_id = NULL,   pubmed_id = NULL,   set_operation = \"union\",   interactive = TRUE,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/get_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get PGS Catalog Scores — get_scores","text":"pgs_id character vector PGS Catalog score accession identifiers. efo_id character vector EFO identifiers. pubmed_id integer vector PubMed identifiers. set_operation Either 'union' 'intersection'. tells scores retrieved different criteria  combined: 'union' binds together results removing duplicates 'intersection' keeps scores found different criteria. interactive logical. scores requested, whether ask interactively really want proceed. verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/get_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PGS Catalog Scores — get_scores","text":"scores object.","code":""},{"path":"https://maialab.org/quincunx/reference/get_scores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get PGS Catalog Scores — get_scores","text":"Please note search criteria vectorised, thus allowing batch mode search.","code":""},{"path":"https://maialab.org/quincunx/reference/get_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get PGS Catalog Scores — get_scores","text":"","code":"if (FALSE) { # By `pgs_id` get_scores(pgs_id = 'PGS000088')  # By `efo_id` get_scores(efo_id = 'EFO_0007992')  # By `pubmed_id` get_scores(pubmed_id = '25748612') }"},{"path":"https://maialab.org/quincunx/reference/get_trait_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PGS Catalog Trait Categories — get_trait_categories","title":"Get PGS Catalog Trait Categories — get_trait_categories","text":"Retrieves trait categories via PGS Catalog REST API.","code":""},{"path":"https://maialab.org/quincunx/reference/get_trait_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PGS Catalog Trait Categories — get_trait_categories","text":"","code":"get_trait_categories(verbose = FALSE, warnings = TRUE, progress_bar = TRUE)"},{"path":"https://maialab.org/quincunx/reference/get_trait_categories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get PGS Catalog Trait Categories — get_trait_categories","text":"verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar indicating download progress REST API server.","code":""},{"path":"https://maialab.org/quincunx/reference/get_trait_categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PGS Catalog Trait Categories — get_trait_categories","text":"trait_categories object.","code":""},{"path":"https://maialab.org/quincunx/reference/get_trait_categories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get PGS Catalog Trait Categories — get_trait_categories","text":"","code":"if (FALSE) { # interactive() get_trait_categories(progress_bar = FALSE) }"},{"path":"https://maialab.org/quincunx/reference/get_traits.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PGS Catalog Traits — get_traits","title":"Get PGS Catalog Traits — get_traits","text":"Retrieves traits via PGS Catalog REST API. REST API queried multiple times criteria passed arguments (see ). default traits match criteria supplied arguments retrieved: corresponds default option set_operation set 'union'. rather traits match simultaneously criteria provided, set set_operation 'intersection'.","code":""},{"path":"https://maialab.org/quincunx/reference/get_traits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PGS Catalog Traits — get_traits","text":"","code":"get_traits(   efo_id = NULL,   trait_term = NULL,   exact_term = TRUE,   include_children = FALSE,   set_operation = \"union\",   interactive = TRUE,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/get_traits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get PGS Catalog Traits — get_traits","text":"efo_id character vector EFO identifiers. trait_term character vector terms matched trait identifiers (efo_id), trait descriptions, synonyms thereof, externally mapped terms, even trait categories. exact_term logical value, indicating whether match trait_term exactly (TRUE) (FALSE). include_children logical value, indicating whether include child traits . set_operation Either 'union' 'intersection'. tells performance metrics retrieved different criteria  combined: 'union' binds together results removing duplicates 'intersection' keeps sample sets found different criteria. interactive logical. traits requested, whether ask interactively really want proceed. verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar indicating download progress REST API server.","code":""},{"path":"https://maialab.org/quincunx/reference/get_traits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PGS Catalog Traits — get_traits","text":"traits object.","code":""},{"path":"https://maialab.org/quincunx/reference/get_traits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get PGS Catalog Traits — get_traits","text":"Please note search criteria vectorised, thus allowing batch mode search.","code":""},{"path":"https://maialab.org/quincunx/reference/get_traits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get PGS Catalog Traits — get_traits","text":"","code":"if (FALSE) { # Get a trait by its EFO identifier get_traits(efo_id = 'EFO_0004631')  # Get a trait by matching a term in EFO identifier (`efo_id`), label, # description synonyms, categories, or external mapped terms get_traits(trait_term = 'stroke', exact_term = FALSE)  # Get a trait matching its name (`trait`) exactly (default) get_traits(trait_term = 'stroke', exact_term = TRUE)  # Get traits, excluding its children traits (default) get_traits(trait_term = 'breast cancer')  # Get traits, including its children traits (check column `is_child` for # child traits) get_traits(trait_term = 'breast cancer', include_children = TRUE) }"},{"path":"https://maialab.org/quincunx/reference/is_paginated.html","id":null,"dir":"Reference","previous_headings":"","what":"Is the response paginated? — is_paginated","title":"Is the response paginated? — is_paginated","text":"Checks response paginated checking count element exists response.","code":""},{"path":"https://maialab.org/quincunx/reference/is_paginated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is the response paginated? — is_paginated","text":"","code":"is_paginated(json_string)"},{"path":"https://maialab.org/quincunx/reference/is_paginated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is the response paginated? — is_paginated","text":"json_string string.","code":""},{"path":"https://maialab.org/quincunx/reference/is_paginated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is the response paginated? — is_paginated","text":"logical value.","code":""},{"path":"https://maialab.org/quincunx/reference/is_pgs_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a string a PGS Catalog identifier? — is_pgs_id","title":"Is a string a PGS Catalog identifier? — is_pgs_id","text":"Find strings valid PGS Catalog identifiers (returns TRUE). Association IDs tested following regular expression: ^PGS\\\\d{6}$.","code":""},{"path":"https://maialab.org/quincunx/reference/is_pgs_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a string a PGS Catalog identifier? — is_pgs_id","text":"","code":"is_pgs_id(str, convert_NA_to_FALSE = TRUE)"},{"path":"https://maialab.org/quincunx/reference/is_pgs_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a string a PGS Catalog identifier? — is_pgs_id","text":"str character vector strings. convert_NA_to_FALSE Whether treat NA NA (convert_NA_to_FALSE = FALSE) whether return FALSE NA found (convert_NA_to_FALSE = TRUE).","code":""},{"path":"https://maialab.org/quincunx/reference/is_pgs_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a string a PGS Catalog identifier? — is_pgs_id","text":"logical vector.","code":""},{"path":"https://maialab.org/quincunx/reference/is_pubmed_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a string a PubMed ID? — is_pubmed_id","title":"Is a string a PubMed ID? — is_pubmed_id","text":"Find strings valid PubMed IDs (returns TRUE). PubMed IDs tested following regular expression: ^\\\\d+$.","code":""},{"path":"https://maialab.org/quincunx/reference/is_pubmed_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a string a PubMed ID? — is_pubmed_id","text":"","code":"is_pubmed_id(str, convert_NA_to_FALSE = TRUE)"},{"path":"https://maialab.org/quincunx/reference/is_pubmed_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a string a PubMed ID? — is_pubmed_id","text":"str character vector strings. convert_NA_to_FALSE Whether treat NA NA (convert_NA_to_FALSE = FALSE) whether return FALSE NA found (convert_NA_to_FALSE = TRUE).","code":""},{"path":"https://maialab.org/quincunx/reference/is_pubmed_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a string a PubMed ID? — is_pubmed_id","text":"logical vector.","code":""},{"path":"https://maialab.org/quincunx/reference/list_to_s4.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a named list to an S4 object — list_to_s4","title":"Convert a named list to an S4 object — list_to_s4","text":"Convert named list S4 object","code":""},{"path":"https://maialab.org/quincunx/reference/list_to_s4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a named list to an S4 object — list_to_s4","text":"","code":"list_to_s4(list, class)"},{"path":"https://maialab.org/quincunx/reference/list_to_s4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a named list to an S4 object — list_to_s4","text":"list list class character vector indicating S4 class","code":""},{"path":"https://maialab.org/quincunx/reference/list_to_s4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a named list to an S4 object — list_to_s4","text":"S4 object class class.","code":""},{"path":"https://maialab.org/quincunx/reference/msg_400.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty printing of 404 error — msg_400","title":"Pretty printing of 404 error — msg_400","text":"Pretty printing 404 error.","code":""},{"path":"https://maialab.org/quincunx/reference/msg_400.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty printing of 404 error — msg_400","text":"","code":"msg_400(response)"},{"path":"https://maialab.org/quincunx/reference/msg_400.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty printing of 404 error — msg_400","text":"response response object.","code":""},{"path":"https://maialab.org/quincunx/reference/msg_400.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty printing of 404 error — msg_400","text":"function run side effect: printing.","code":""},{"path":"https://maialab.org/quincunx/reference/msg_404.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty printing of 404 error — msg_404","title":"Pretty printing of 404 error — msg_404","text":"Pretty printing 404 error.","code":""},{"path":"https://maialab.org/quincunx/reference/msg_404.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty printing of 404 error — msg_404","text":"","code":"msg_404(response)"},{"path":"https://maialab.org/quincunx/reference/msg_404.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty printing of 404 error — msg_404","text":"response response object.","code":""},{"path":"https://maialab.org/quincunx/reference/msg_404.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty printing of 404 error — msg_404","text":"function run side effect: printing.","code":""},{"path":"https://maialab.org/quincunx/reference/msg_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty printing of empty response — msg_empty","title":"Pretty printing of empty response — msg_empty","text":"Pretty printing empty response","code":""},{"path":"https://maialab.org/quincunx/reference/msg_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty printing of empty response — msg_empty","text":"","code":"msg_empty(response)"},{"path":"https://maialab.org/quincunx/reference/msg_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty printing of empty response — msg_empty","text":"response response object.","code":""},{"path":"https://maialab.org/quincunx/reference/msg_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty printing of empty response — msg_empty","text":"function run side effect: printing.","code":""},{"path":"https://maialab.org/quincunx/reference/n.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of PGS Catalog entities — n","title":"Number of PGS Catalog entities — n","text":"function returns number entities PGS Catalog object. avoid ambiguity dplyr::n() use quincunx::n().","code":""},{"path":"https://maialab.org/quincunx/reference/n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of PGS Catalog entities — n","text":"","code":"n(x, unique = FALSE)  # S4 method for scores n(x, unique = FALSE)  # S4 method for publications n(x, unique = FALSE)  # S4 method for traits n(x, unique = FALSE)  # S4 method for performance_metrics n(x, unique = FALSE)  # S4 method for sample_sets n(x, unique = FALSE)  # S4 method for cohorts n(x, unique = FALSE)  # S4 method for trait_categories n(x, unique = FALSE)  # S4 method for releases n(x, unique = FALSE)"},{"path":"https://maialab.org/quincunx/reference/n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of PGS Catalog entities — n","text":"x scores, publications, traits, performance_metrics, sample_sets, cohorts, trait_categories releases object. unique Whether count unique entries (TRUE) (FALSE).","code":""},{"path":"https://maialab.org/quincunx/reference/n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of PGS Catalog entities — n","text":"integer scalar.","code":""},{"path":"https://maialab.org/quincunx/reference/n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of PGS Catalog entities — n","text":"","code":"if (FALSE) { # interactive() # Return the number of polygenic scores in a scores object: my_scores <- get_scores(pgs_id = c('PGS000007', 'PGS000007', 'PGS000042')) n(my_scores)  # If you want to count unique scores only, then use the `unique` parameter: n(my_scores, unique = TRUE)  # Total number of curated publications in the PGS Catalog: all_pub <- get_publications(interactive = FALSE, progress_bar = FALSE) n(all_pub)  # Total number of curated traits in the PGS Catalog: all_traits <- get_traits(interactive = FALSE, progress_bar = FALSE) n(all_traits) }"},{"path":"https://maialab.org/quincunx/reference/n_pages.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of pages — n_pages","title":"Number of pages — n_pages","text":"Determine number pages requested total number results (count) number results per page (limit). wording used --- count limit --- borrowed PGS Catalog REST API documentation.","code":""},{"path":"https://maialab.org/quincunx/reference/n_pages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of pages — n_pages","text":"","code":"n_pages(count, limit = 50L)"},{"path":"https://maialab.org/quincunx/reference/n_pages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of pages — n_pages","text":"count total number results. limit number results per page.","code":""},{"path":"https://maialab.org/quincunx/reference/n_pages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of pages — n_pages","text":"number pages, integer value.","code":""},{"path":"https://maialab.org/quincunx/reference/no_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty printing of no error message — no_msg","title":"Pretty printing of no error message — no_msg","text":"Pretty printing error message","code":""},{"path":"https://maialab.org/quincunx/reference/no_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty printing of no error message — no_msg","text":"","code":"no_msg(response)"},{"path":"https://maialab.org/quincunx/reference/no_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty printing of no error message — no_msg","text":"response response object.","code":""},{"path":"https://maialab.org/quincunx/reference/no_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty printing of no error message — no_msg","text":"function run side effect: printing.","code":""},{"path":"https://maialab.org/quincunx/reference/nr_to_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert NR (Not Recorded) to NA (Not Available) — nr_to_na","title":"Convert NR (Not Recorded) to NA (Not Available) — nr_to_na","text":"function converts 'NR' string NA.","code":""},{"path":"https://maialab.org/quincunx/reference/nr_to_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert NR (Not Recorded) to NA (Not Available) — nr_to_na","text":"","code":"nr_to_na(x)"},{"path":"https://maialab.org/quincunx/reference/nr_to_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert NR (Not Recorded) to NA (Not Available) — nr_to_na","text":"x character vector.","code":""},{"path":"https://maialab.org/quincunx/reference/nr_to_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert NR (Not Recorded) to NA (Not Available) — nr_to_na","text":"character vector whose 'NR' replaced  NA.","code":""},{"path":"https://maialab.org/quincunx/reference/offsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate offset values — offsets","title":"Generate offset values — offsets","text":"Generate offset values passed PGS Catalog REST API endpoints. offset parameter, together limit parameter, allow access desired range results. offset parameter specifies starting index range results desired. zero based index.","code":""},{"path":"https://maialab.org/quincunx/reference/offsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate offset values — offsets","text":"","code":"offsets(count, limit)"},{"path":"https://maialab.org/quincunx/reference/offsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate offset values — offsets","text":"count total number results. limit number results per page.","code":""},{"path":"https://maialab.org/quincunx/reference/offsets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate offset values — offsets","text":"Offset values, integer vector.","code":""},{"path":"https://maialab.org/quincunx/reference/open_in_dbsnp.html","id":null,"dir":"Reference","previous_headings":"","what":"Browse dbSNP from SNP identifiers. — open_in_dbsnp","title":"Browse dbSNP from SNP identifiers. — open_in_dbsnp","text":"function launches web browser dbSNP opens tab SNP identifier.","code":""},{"path":"https://maialab.org/quincunx/reference/open_in_dbsnp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browse dbSNP from SNP identifiers. — open_in_dbsnp","text":"","code":"open_in_dbsnp(variant_id)"},{"path":"https://maialab.org/quincunx/reference/open_in_dbsnp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Browse dbSNP from SNP identifiers. — open_in_dbsnp","text":"variant_id variant identifier, character vector.","code":""},{"path":"https://maialab.org/quincunx/reference/open_in_dbsnp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Browse dbSNP from SNP identifiers. — open_in_dbsnp","text":"Returns TRUE successful. Note however function run side effect.","code":""},{"path":"https://maialab.org/quincunx/reference/open_in_dbsnp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Browse dbSNP from SNP identifiers. — open_in_dbsnp","text":"","code":"if (FALSE) { # interactive() open_in_dbsnp('rs56261590') }"},{"path":"https://maialab.org/quincunx/reference/open_in_pgs_catalog.html","id":null,"dir":"Reference","previous_headings":"","what":"Browse PGS Catalog entities from the PGS Catalog Web Graphical User Interface — open_in_pgs_catalog","title":"Browse PGS Catalog entities from the PGS Catalog Web Graphical User Interface — open_in_pgs_catalog","text":"function launches web browser opens tab identifier PGS Catalog web graphical user interface: https://www.pgscatalog.org/.","code":""},{"path":"https://maialab.org/quincunx/reference/open_in_pgs_catalog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browse PGS Catalog entities from the PGS Catalog Web Graphical User Interface — open_in_pgs_catalog","text":"","code":"open_in_pgs_catalog(   identifier = NULL,   pgs_catalog_entity = c(\"pgs\", \"pgp\", \"pss\", \"efo\") )"},{"path":"https://maialab.org/quincunx/reference/open_in_pgs_catalog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Browse PGS Catalog entities from the PGS Catalog Web Graphical User Interface — open_in_pgs_catalog","text":"identifier vector identifiers. identifiers can : PGS, PGP, PSS EFO identifiers. pgs_catalog_entity Either 'pgs' (default), 'pgp', 'pss', 'efo'. argument indicates type identifiers passed identifier.","code":""},{"path":"https://maialab.org/quincunx/reference/open_in_pgs_catalog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Browse PGS Catalog entities from the PGS Catalog Web Graphical User Interface — open_in_pgs_catalog","text":"Returns TRUE successful, FALSE otherwise.   note function run side effect.","code":""},{"path":"https://maialab.org/quincunx/reference/open_in_pgs_catalog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Browse PGS Catalog entities from the PGS Catalog Web Graphical User Interface — open_in_pgs_catalog","text":"","code":"if (FALSE) { # interactive() # Open in PGS scores Catalog Web Graphical User Interface open_in_pgs_catalog(c('PGS000001', 'PGS000002'))  # Open PGS Catalog Publications open_in_pgs_catalog(c('PGP000001', 'PGP000002'),   pgs_catalog_entity = 'pgp')  # Open Sample Sets (PSS) open_in_pgs_catalog(c('PSS000001', 'PSS000002'),   pgs_catalog_entity = 'pss')  # Open EFO traits (EFO) open_in_pgs_catalog(c('EFO_0001645', 'MONDO_0007254'),   pgs_catalog_entity = 'efo') }"},{"path":"https://maialab.org/quincunx/reference/open_in_pubmed.html","id":null,"dir":"Reference","previous_headings":"","what":"Browse PubMed from PubMed identifiers. — open_in_pubmed","title":"Browse PubMed from PubMed identifiers. — open_in_pubmed","text":"function launches web browser opens tab PubMed citation.","code":""},{"path":"https://maialab.org/quincunx/reference/open_in_pubmed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browse PubMed from PubMed identifiers. — open_in_pubmed","text":"","code":"open_in_pubmed(pubmed_id)"},{"path":"https://maialab.org/quincunx/reference/open_in_pubmed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Browse PubMed from PubMed identifiers. — open_in_pubmed","text":"pubmed_id PubMed identifier, either character integer vector.","code":""},{"path":"https://maialab.org/quincunx/reference/open_in_pubmed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Browse PubMed from PubMed identifiers. — open_in_pubmed","text":"Returns TRUE successful. Note however function run side effect.","code":""},{"path":"https://maialab.org/quincunx/reference/open_in_pubmed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Browse PubMed from PubMed identifiers. — open_in_pubmed","text":"","code":"if (FALSE) { # interactive() open_in_pubmed(c('26301688', '30595370')) }"},{"path":"https://maialab.org/quincunx/reference/performance_metrics-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a set of PGS Catalog Performance Metrics — performance_metrics-class","title":"An S4 class to represent a set of PGS Catalog Performance Metrics — performance_metrics-class","text":"performance_metrics object consists nine tables (slots) combined form relational database subset performance metrics. performance metric observation (row) scores table (first table).","code":""},{"path":"https://maialab.org/quincunx/reference/performance_metrics-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a set of PGS Catalog Performance Metrics — performance_metrics-class","text":"performance_metrics table PGS Performance Metrics (PPM). PPM (row)   uniquely identified ppm_id column. Columns: ppm_id PGS Performance Metrics identifier. Example: \"PPM000001\". pgs_id Polygenic Score (PGS) identifier. reported_trait author-reported trait PGS developed predict. Example: \"Breast Cancer\". covariates Comma-separated list covariates used prediction model evaluate PGS. comments information relevant understanding performance metrics. publications table publications. publication (row)   uniquely identified column pgp_id. Columns: ppm_id PGS Performance Metrics identifier. Example: \"PPM000001\". pgp_id PGS Publication identifier. Example: \"PGP000001\". pubmed_id PubMed identifier. Example: \"25855707\". publication_date Publication date. Example: \"2020-09-28\". Note class publication_date Date. publication Abbreviated name journal. Example: \"J Hum Genet\". title Publication title. author_fullname First author publication. Example: 'Mavaddat N'. doi Digital Object Identifier (DOI). variable also curated allow unpublished work (e.g. preprints) added catalog. Example: \"10.1093/jnci/djv036\". sample_sets table sample sets. sample set (row) uniquely   identified column pss_id. Columns: ppm_id PGS Performance Metrics identifier. Example: \"PPM000001\". pss_id PGS Sample Set identifier. Example: \"PSS000042\". samples table samples. sample (row) uniquely identified   combination values columns: ppm_id, pss_id,   sample_id. Columns: ppm_id PGS Performance Metrics identifier. Example: \"PPM000001\". pss_id PGS Sample Set identifier. Example: \"PSS000042\". sample_id Sample identifier. surrogate key identify sample. stage Sample stage: always Evaluation (\"eval\"). sample_size Number individuals included sample. sample_cases Number cases. sample_controls Number controls. sample_percent_male Percentage male participants. phenotype_description Detailed phenotype description. ancestry_category Author reported ancestry mapped best matching ancestry category NHGRI-EBI GWAS Catalog framework (see ancestry_categories) possible values. ancestry detailed description sample ancestry usually matches specific description described authors (e.g. French, Chinese). country Author reported countries recruitment (available). ancestry_additional_description additional description captured columns (e.g. founder genetically isolated populations, description admixed samples). study_id Associated GWAS Catalog study accession identifier, e.g., \"GCST002735\". pubmed_id PubMed identifier. cohorts_additional_description additional description samples (e.g. sub-cohort information). demographics table sample demographics' variables.   demographics' variable (row) uniquely identified combination   values columns: ppm_id, pss_id, sample_id,   variable. Columns: ppm_id PGS Performance Metrics identifier. Example: \"PPM000001\". pss_id PGS Sample Set identifier. Example: \"PSS000042\". sample_id Sample identifier. surrogate identifier identify sample. variable Demographics variable. Following columns report indicated variable. estimate_type Type statistical estimate variable. estimate variable's statistical value. unit Unit variable. variability_type Measure statistical dispersion variable, e.g. standard error (se) standard deviation (sd). variability value measure dispersion. interval_type Type statistical interval variable: range, iqr (interquartile), ci (confidence interval). interval_lower Interval lower bound. interval_upper Interval upper bound. cohorts table cohorts. cohort (row) uniquely identified   combination values columns: ppm_id, sample_id   cohort_symbol. Columns: ppm_id PGS Performance Metrics identifier. Example: \"PPM000001\". sample_id Sample identifier. surrogate key identify sample. cohort_symbol Cohort symbol. cohort_name Cohort full name. pgs_effect_sizes table effect sizes per standard deviation change   PGS. Examples include regression coefficients (betas) continuous   traits, odds ratios () /hazard ratios (HR) dichotomous traits   depending availability time--event data. effect size   uniquely identified combination values columns:   ppm_id effect_size_id. Columns: ppm_id PGS Performance Metrics identifier. Example: \"PPM000001\". effect_size_id Effect size identifier. surrogate identifier identify effect size. estimate_type_long Long notation effect size (e.g. Odds Ratio). estimate_type Short notation effect size (e.g. ). estimate estimate's value. unit Unit estimate. variability_type Measure statistical dispersion variable, e.g. standard error (se) standard deviation (sd). variability value measure dispersion. interval_type Type statistical interval variable: range, iqr (interquartile), ci (confidence interval). interval_lower Interval lower bound. interval_upper Interval upper bound. pgs_classification_metrics table classification metrics. Examples   include Area Receiver Operating Characteristic (AUROC)   Harrell's C-index (Concordance statistic). Columns: ppm_id PGS Performance Metrics identifier. Example: \"PPM000001\". classification_metrics_id Classification metric identifier. surrogate identifier identify classification metric. estimate_type_long Long notation classification metric (e.g. Concordance Statistic). estimate_type Short notation classification metric (e.g. C-index). estimate estimate's value. unit Unit estimate. variability_type Measure statistical dispersion variable, e.g. standard error (se) standard deviation (sd). variability value measure dispersion. interval_type Type statistical interval variable: range, iqr (interquartile), ci (confidence interval). interval_lower Interval lower bound. interval_upper Interval upper bound. pgs_other_metrics table metrics neither effect   sizes classification metrics. Examples include: R² (proportion   variance explained), reclassification metrics. Columns: ppm_id PGS Performance Metrics identifier. Example: \"PPM000001\". other_metrics_id metric identifier. surrogate identifier identify metric. estimate_type_long Long notation metric. Example: \"Proportion variance explained\". estimate_type Short notation metric. Example: \"R²\". estimate estimate's value. unit Unit estimate. variability_type Measure statistical dispersion variable, e.g. standard error (se) standard deviation (sd). variability value measure dispersion. interval_type Type statistical interval variable: range, iqr (interquartile), ci (confidence interval). interval_lower Interval lower bound. interval_upper Interval upper bound.","code":""},{"path":"https://maialab.org/quincunx/reference/performance_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the S4 performance_metrics object. — performance_metrics","title":"Constructor for the S4 performance_metrics object. — performance_metrics","text":"Constructor S4 performance_metrics object.","code":""},{"path":"https://maialab.org/quincunx/reference/performance_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the S4 performance_metrics object. — performance_metrics","text":"","code":"performance_metrics(   performance_metrics = s4ppm_performance_metrics_tbl(),   publications = s4ppm_publications_tbl(),   sample_sets = s4ppm_sample_sets_tbl(),   samples = s4ppm_samples_tbl(),   demographics = s4ppm_demographics_tbl(),   cohorts = s4ppm_pgs_cohorts_tbl(),   pgs_effect_sizes = s4ppm_pgs_effect_sizes_tbl(),   pgs_classification_metrics = s4ppm_pgs_classification_metrics_tbl(),   pgs_other_metrics = s4ppm_pgs_other_metrics_tbl() )"},{"path":"https://maialab.org/quincunx/reference/performance_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the S4 performance_metrics object. — performance_metrics","text":"performance_metrics s4ppm_performance_metrics_tbl tibble. publications s4ppm_publications_tbl tibble. sample_sets s4ppm_sample_sets_tbl tibble. samples s4ppm_samples_tbl tibble. demographics s4ppm_demographics_tbl tibble. cohorts s4ppm_pgs_cohorts_tbl tibble. pgs_effect_sizes s4ppm_pgs_effect_sizes_tbl tibble. pgs_classification_metrics s4ppm_pgs_classification_metrics_tbl tibble. pgs_other_metrics s4ppm_pgs_other_metrics_tbl tibble.","code":""},{"path":"https://maialab.org/quincunx/reference/performance_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for the S4 performance_metrics object. — performance_metrics","text":"object class performance_metrics.","code":""},{"path":"https://maialab.org/quincunx/reference/pgp_to_pgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Map PGP identifiers to PGS identifiers — pgp_to_pgs","title":"Map PGP identifiers to PGS identifiers — pgp_to_pgs","text":"Map PGP identifiers PGS identifiers.","code":""},{"path":"https://maialab.org/quincunx/reference/pgp_to_pgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map PGP identifiers to PGS identifiers — pgp_to_pgs","text":"","code":"pgp_to_pgs(   pgp_id = NULL,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/pgp_to_pgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map PGP identifiers to PGS identifiers — pgp_to_pgs","text":"pgp_id character vector PGS Catalog Publication identifiers, e.g., \"PGP000001\". NULL returns results PGP identifiers Catalog. verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/pgp_to_pgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map PGP identifiers to PGS identifiers — pgp_to_pgs","text":"data frame two columns: pgp_id pgs_id.","code":""},{"path":"https://maialab.org/quincunx/reference/pgp_to_pgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map PGP identifiers to PGS identifiers — pgp_to_pgs","text":"","code":"if (FALSE) { pgp_to_pgs('PGP000001') pgp_to_pgs(c('PGP000017', 'PGP000042')) }"},{"path":"https://maialab.org/quincunx/reference/pgp_to_ppm.html","id":null,"dir":"Reference","previous_headings":"","what":"Map PGP identifiers to PPM identifiers — pgp_to_ppm","title":"Map PGP identifiers to PPM identifiers — pgp_to_ppm","text":"Map PGP identifiers PPM identifiers.","code":""},{"path":"https://maialab.org/quincunx/reference/pgp_to_ppm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map PGP identifiers to PPM identifiers — pgp_to_ppm","text":"","code":"pgp_to_ppm(   pgp_id = NULL,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/pgp_to_ppm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map PGP identifiers to PPM identifiers — pgp_to_ppm","text":"pgp_id character vector PGS Catalog Publication identifiers, e.g., \"PGP000001\". NULL returns results PGP identifiers Catalog. verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/pgp_to_ppm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map PGP identifiers to PPM identifiers — pgp_to_ppm","text":"data frame two columns: pgp_id ppm_id.","code":""},{"path":"https://maialab.org/quincunx/reference/pgp_to_ppm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map PGP identifiers to PPM identifiers — pgp_to_ppm","text":"","code":"if (FALSE) { pgp_to_ppm('PGP000001') pgp_to_ppm(c('PGP000017', 'PGP000042')) }"},{"path":"https://maialab.org/quincunx/reference/pgp_to_pss.html","id":null,"dir":"Reference","previous_headings":"","what":"Map PGP identifiers to PSS identifiers — pgp_to_pss","title":"Map PGP identifiers to PSS identifiers — pgp_to_pss","text":"Map PGP identifiers PSS identifiers.","code":""},{"path":"https://maialab.org/quincunx/reference/pgp_to_pss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map PGP identifiers to PSS identifiers — pgp_to_pss","text":"","code":"pgp_to_pss(   pgp_id = NULL,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/pgp_to_pss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map PGP identifiers to PSS identifiers — pgp_to_pss","text":"pgp_id character vector PGS Catalog Publication identifiers, e.g., \"PGP000001\". NULL returns results PGP identifiers Catalog. verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/pgp_to_pss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map PGP identifiers to PSS identifiers — pgp_to_pss","text":"data frame two columns: pgp_id pss_id.","code":""},{"path":"https://maialab.org/quincunx/reference/pgp_to_pss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map PGP identifiers to PSS identifiers — pgp_to_pss","text":"","code":"if (FALSE) { pgp_to_pss('PGP000001') pgp_to_pss(c('PGP000017', 'PGP000042')) }"},{"path":"https://maialab.org/quincunx/reference/pgs_server.html","id":null,"dir":"Reference","previous_headings":"","what":"PGS REST API server — pgs_server","title":"PGS REST API server — pgs_server","text":"PGS REST API server","code":""},{"path":"https://maialab.org/quincunx/reference/pgs_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PGS REST API server — pgs_server","text":"","code":"pgs_server()"},{"path":"https://maialab.org/quincunx/reference/pgs_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PGS REST API server — pgs_server","text":"string containing PGS REST API server URL.","code":""},{"path":"https://maialab.org/quincunx/reference/pgs_to_pgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Map PGS identifiers to PGP identifiers — pgs_to_pgp","title":"Map PGS identifiers to PGP identifiers — pgs_to_pgp","text":"Map PGS identifiers PGP identifiers.","code":""},{"path":"https://maialab.org/quincunx/reference/pgs_to_pgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map PGS identifiers to PGP identifiers — pgs_to_pgp","text":"","code":"pgs_to_pgp(   pgs_id = NULL,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/pgs_to_pgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map PGS identifiers to PGP identifiers — pgs_to_pgp","text":"pgs_id character vector PGS identifiers, e.g., \"PGS000001\". NULL returns results PGS identifiers Catalog. verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/pgs_to_pgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map PGS identifiers to PGP identifiers — pgs_to_pgp","text":"data frame two columns: pgs_id pgp_id.","code":""},{"path":"https://maialab.org/quincunx/reference/pgs_to_pgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map PGS identifiers to PGP identifiers — pgs_to_pgp","text":"","code":"if (FALSE) { pgs_to_pgp('PGS000001') pgs_to_pgp(c('PGS000017', 'PGS000042')) }"},{"path":"https://maialab.org/quincunx/reference/pgs_to_ppm.html","id":null,"dir":"Reference","previous_headings":"","what":"Map PGS identifiers to PPM identifiers — pgs_to_ppm","title":"Map PGS identifiers to PPM identifiers — pgs_to_ppm","text":"Map PGS identifiers PPM identifiers.","code":""},{"path":"https://maialab.org/quincunx/reference/pgs_to_ppm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map PGS identifiers to PPM identifiers — pgs_to_ppm","text":"","code":"pgs_to_ppm(pgs_id, verbose = FALSE, warnings = TRUE, progress_bar = TRUE)"},{"path":"https://maialab.org/quincunx/reference/pgs_to_ppm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map PGS identifiers to PPM identifiers — pgs_to_ppm","text":"pgs_id character vector PGS identifiers, e.g., \"PGS000001\". verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/pgs_to_ppm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map PGS identifiers to PPM identifiers — pgs_to_ppm","text":"data frame two columns: pgs_id ppm_id.","code":""},{"path":"https://maialab.org/quincunx/reference/pgs_to_ppm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map PGS identifiers to PPM identifiers — pgs_to_ppm","text":"","code":"if (FALSE) { pgs_to_ppm('PGS000001') pgs_to_ppm(c('PGS000017', 'PGS000042')) }"},{"path":"https://maialab.org/quincunx/reference/pgs_to_pss.html","id":null,"dir":"Reference","previous_headings":"","what":"Map PGS identifiers to PSS identifiers — pgs_to_pss","title":"Map PGS identifiers to PSS identifiers — pgs_to_pss","text":"Map PGS identifiers PSS identifiers.","code":""},{"path":"https://maialab.org/quincunx/reference/pgs_to_pss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map PGS identifiers to PSS identifiers — pgs_to_pss","text":"","code":"pgs_to_pss(   pgs_id = NULL,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/pgs_to_pss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map PGS identifiers to PSS identifiers — pgs_to_pss","text":"pgs_id character vector PGS identifiers, e.g., \"PGS000001\". NULL returns results PGS identifiers Catalog. verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/pgs_to_pss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map PGS identifiers to PSS identifiers — pgs_to_pss","text":"data frame two columns: pgs_id pss_id.","code":""},{"path":"https://maialab.org/quincunx/reference/pgs_to_pss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map PGS identifiers to PSS identifiers — pgs_to_pss","text":"","code":"if (FALSE) { pgs_to_pss('PGS000001') pgs_to_pss(c('PGS000017', 'PGS000042')) }"},{"path":"https://maialab.org/quincunx/reference/pgs_to_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Map PGS identifiers to GWAS study identifiers — pgs_to_study","title":"Map PGS identifiers to GWAS study identifiers — pgs_to_study","text":"Map PGS identifiers GWAS study identifiers. Retrieves GWAS study identifiers associated samples used discovery stage queried PGS identifiers.","code":""},{"path":"https://maialab.org/quincunx/reference/pgs_to_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map PGS identifiers to GWAS study identifiers — pgs_to_study","text":"","code":"pgs_to_study(   pgs_id = NULL,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/pgs_to_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map PGS identifiers to GWAS study identifiers — pgs_to_study","text":"pgs_id character vector PGS Catalog score accession identifiers., e.g., \"PGS000001\". NULL returns results PGS identifiers Catalog. verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/pgs_to_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map PGS identifiers to GWAS study identifiers — pgs_to_study","text":"data frame two columns: pgs_id study_id.","code":""},{"path":"https://maialab.org/quincunx/reference/pgs_to_study.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map PGS identifiers to GWAS study identifiers — pgs_to_study","text":"","code":"if (FALSE) { pgs_to_study('PGS000001') # Unmappable pgs ids will be missing, e.g., PGS000023 pgs_to_study(c('PGS000013', 'PGS000023')) }"},{"path":"https://maialab.org/quincunx/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://maialab.org/quincunx/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://maialab.org/quincunx/reference/ppm_to_pgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Map PPM identifiers to PGP identifiers — ppm_to_pgp","title":"Map PPM identifiers to PGP identifiers — ppm_to_pgp","text":"Map PPM identifiers PGP identifiers.","code":""},{"path":"https://maialab.org/quincunx/reference/ppm_to_pgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map PPM identifiers to PGP identifiers — ppm_to_pgp","text":"","code":"ppm_to_pgp(ppm_id, verbose = FALSE, warnings = TRUE, progress_bar = TRUE)"},{"path":"https://maialab.org/quincunx/reference/ppm_to_pgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map PPM identifiers to PGP identifiers — ppm_to_pgp","text":"ppm_id character vector PPM identifiers, e.g., \"PPM000001\". verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/ppm_to_pgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map PPM identifiers to PGP identifiers — ppm_to_pgp","text":"data frame two columns: ppm_id pgp_id.","code":""},{"path":"https://maialab.org/quincunx/reference/ppm_to_pgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map PPM identifiers to PGP identifiers — ppm_to_pgp","text":"","code":"if (FALSE) { ppm_to_pgp('PPM000001') ppm_to_pgp(c('PPM000017', 'PPM000042')) }"},{"path":"https://maialab.org/quincunx/reference/ppm_to_pgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Map PPM identifiers to PGS identifiers — ppm_to_pgs","title":"Map PPM identifiers to PGS identifiers — ppm_to_pgs","text":"Map PPM identifiers PGS identifiers.","code":""},{"path":"https://maialab.org/quincunx/reference/ppm_to_pgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map PPM identifiers to PGS identifiers — ppm_to_pgs","text":"","code":"ppm_to_pgs(ppm_id, verbose = FALSE, warnings = TRUE, progress_bar = TRUE)"},{"path":"https://maialab.org/quincunx/reference/ppm_to_pgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map PPM identifiers to PGS identifiers — ppm_to_pgs","text":"ppm_id character vector PPM identifiers, e.g., \"PPPM000001\". verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/ppm_to_pgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map PPM identifiers to PGS identifiers — ppm_to_pgs","text":"data frame two columns: ppm_id pgs_id.","code":""},{"path":"https://maialab.org/quincunx/reference/ppm_to_pgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map PPM identifiers to PGS identifiers — ppm_to_pgs","text":"","code":"if (FALSE) { ppm_to_pgs('PPM000001') ppm_to_pgs(c('PPM000017', 'PPM000042')) }"},{"path":"https://maialab.org/quincunx/reference/ppm_to_pss.html","id":null,"dir":"Reference","previous_headings":"","what":"Map PPM identifiers to PSS identifiers — ppm_to_pss","title":"Map PPM identifiers to PSS identifiers — ppm_to_pss","text":"Map PPM identifiers PSS identifiers.","code":""},{"path":"https://maialab.org/quincunx/reference/ppm_to_pss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map PPM identifiers to PSS identifiers — ppm_to_pss","text":"","code":"ppm_to_pss(ppm_id, verbose = FALSE, warnings = TRUE, progress_bar = TRUE)"},{"path":"https://maialab.org/quincunx/reference/ppm_to_pss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map PPM identifiers to PSS identifiers — ppm_to_pss","text":"ppm_id character vector PPM identifiers, e.g., \"PPM000001\". verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/ppm_to_pss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map PPM identifiers to PSS identifiers — ppm_to_pss","text":"data frame two columns: ppm_id pss_id.","code":""},{"path":"https://maialab.org/quincunx/reference/ppm_to_pss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map PPM identifiers to PSS identifiers — ppm_to_pss","text":"","code":"if (FALSE) { ppm_to_pss('PPM000001') ppm_to_pss(c('PPM000017', 'PPM000042')) }"},{"path":"https://maialab.org/quincunx/reference/pss_to_pgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Map PSS identifiers to PGP identifiers — pss_to_pgp","title":"Map PSS identifiers to PGP identifiers — pss_to_pgp","text":"Map PSS identifiers PGP identifiers. slow function starts downloading first Performance Metrics, linkage PSS PGP.","code":""},{"path":"https://maialab.org/quincunx/reference/pss_to_pgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map PSS identifiers to PGP identifiers — pss_to_pgp","text":"","code":"pss_to_pgp(pss_id, verbose = FALSE, warnings = TRUE, progress_bar = TRUE)"},{"path":"https://maialab.org/quincunx/reference/pss_to_pgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map PSS identifiers to PGP identifiers — pss_to_pgp","text":"pss_id character vector PSS identifiers, e.g., \"PSS000001\". verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/pss_to_pgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map PSS identifiers to PGP identifiers — pss_to_pgp","text":"data frame two columns: pss_id pgp_id.","code":""},{"path":"https://maialab.org/quincunx/reference/pss_to_pgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map PSS identifiers to PGP identifiers — pss_to_pgp","text":"","code":"if (FALSE) { pss_to_pgp('PSS000001') pss_to_pgp(c('PSS000017', 'PSS000042')) }"},{"path":"https://maialab.org/quincunx/reference/pss_to_pgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Map PSS identifiers to PGS identifiers — pss_to_pgs","title":"Map PSS identifiers to PGS identifiers — pss_to_pgs","text":"Map PSS identifiers PGS identifiers. slow function starts downloading first Performance Metrics, linkage PSS PGS.","code":""},{"path":"https://maialab.org/quincunx/reference/pss_to_pgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map PSS identifiers to PGS identifiers — pss_to_pgs","text":"","code":"pss_to_pgs(pss_id, verbose = FALSE, warnings = TRUE, progress_bar = TRUE)"},{"path":"https://maialab.org/quincunx/reference/pss_to_pgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map PSS identifiers to PGS identifiers — pss_to_pgs","text":"pss_id character vector PSS identifiers, e.g., \"PSS000001\". verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/pss_to_pgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map PSS identifiers to PGS identifiers — pss_to_pgs","text":"data frame two columns: pss_id pgs_id.","code":""},{"path":"https://maialab.org/quincunx/reference/pss_to_pgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map PSS identifiers to PGS identifiers — pss_to_pgs","text":"","code":"if (FALSE) { pss_to_pgs('PSS000001') pss_to_pgs(c('PSS000017', 'PSS000042')) }"},{"path":"https://maialab.org/quincunx/reference/pss_to_ppm.html","id":null,"dir":"Reference","previous_headings":"","what":"Map PSS identifiers to PPM identifiers — pss_to_ppm","title":"Map PSS identifiers to PPM identifiers — pss_to_ppm","text":"Map PSS identifiers PPM identifiers. slow function starts downloading first Performance Metrics.","code":""},{"path":"https://maialab.org/quincunx/reference/pss_to_ppm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map PSS identifiers to PPM identifiers — pss_to_ppm","text":"","code":"pss_to_ppm(pss_id, verbose = FALSE, warnings = TRUE, progress_bar = TRUE)"},{"path":"https://maialab.org/quincunx/reference/pss_to_ppm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map PSS identifiers to PPM identifiers — pss_to_ppm","text":"pss_id character vector PSS identifiers, e.g., \"PSS000001\". verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/pss_to_ppm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map PSS identifiers to PPM identifiers — pss_to_ppm","text":"data frame two columns: pss_id ppm_id.","code":""},{"path":"https://maialab.org/quincunx/reference/pss_to_ppm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map PSS identifiers to PPM identifiers — pss_to_ppm","text":"","code":"if (FALSE) { pss_to_ppm('PSS000001') pss_to_ppm(c('PSS000017', 'PSS000042')) }"},{"path":"https://maialab.org/quincunx/reference/publications-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a set of PGS Catalog Publications — publications-class","title":"An S4 class to represent a set of PGS Catalog Publications — publications-class","text":"publications object consists two tables (slots), table combined form relational database subset PGS Catalog Publications. publication observation (row) publications table (first table).","code":""},{"path":"https://maialab.org/quincunx/reference/publications-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a set of PGS Catalog Publications — publications-class","text":"publications table publications. publication (row)   uniquely identified pgp_id column. Columns: pgp_id PGS Publication identifier. Example: \"PGP000001\". pubmed_id PubMed identifier. Example: \"25855707\". publication_date Publication date. Example: \"2020-09-28\". Note class publication_date Date. publication Abbreviated name journal. Example: \"J Hum Genet\". title Publication title. author_fullname First author publication. Example: 'Mavaddat N'. doi Digital Object Identifier (DOI). variable also curated allow unpublished work (e.g. preprints) added catalog. Example: \"10.1093/jnci/djv036\". authors Concatenated list publication authors. pgs_ids table publication associated PGS identifiers. Columns: pgp_id PGS Publication identifier. Example: \"PGP000001\". pgs_id Polygenic Score (PGS) identifier. stage PGS stage: either \"gwas/dev\" \"eval\".","code":""},{"path":"https://maialab.org/quincunx/reference/publications.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the S4 publications object. — publications","title":"Constructor for the S4 publications object. — publications","text":"Constructor S4 publications object.","code":""},{"path":"https://maialab.org/quincunx/reference/publications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the S4 publications object. — publications","text":"","code":"publications(publications = publications_tbl(), pgs_ids = pgs_ids_tbl())"},{"path":"https://maialab.org/quincunx/reference/publications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the S4 publications object. — publications","text":"publications publications_tbl tibble. pgs_ids pgs_ids_tbl tibble.","code":""},{"path":"https://maialab.org/quincunx/reference/publications.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for the S4 publications object. — publications","text":"object class publications.","code":""},{"path":"https://maialab.org/quincunx/reference/read_scoring_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a polygenic scoring file — read_scoring_file","title":"Read a polygenic scoring file — read_scoring_file","text":"function imports PGS scoring file. information scoring file schema check vignette(\"pgs-scoring-file\", package = \"quincunx\").","code":""},{"path":"https://maialab.org/quincunx/reference/read_scoring_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a polygenic scoring file — read_scoring_file","text":"","code":"read_scoring_file(source, protocol = \"http\", metadata_only = FALSE)"},{"path":"https://maialab.org/quincunx/reference/read_scoring_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a polygenic scoring file — read_scoring_file","text":"source PGS scoring file. can specified three forms: () PGS identifier, e.g. \"PGS000001\", (ii) path local file, e.g. \"~/PGS000001.txt\" \"~/PGS000001.txt.gz\" (iii) direct URL PGS Catalog FTP server, e.g. \"http://ftp.ebi.ac.uk/pub/databases/spot/pgs/scores/PGS000001/ScoringFiles/PGS000001.txt.gz\". protocol Network protocol communication PGS Catalog FTP server: either \"http\" \"ftp\". metadata_only Whether read comment block (header) scoring file.","code":""},{"path":"https://maialab.org/quincunx/reference/read_scoring_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a polygenic scoring file — read_scoring_file","text":"returned value named list. names copied   arguments passed source. element list contains   another list two elements: \"metadata\" \"data\".   \"metadata\" element contains data parsed header PGS scoring   file. \"data\" element contains data frame many rows   variants constitute PGS score. columns can vary.   mandatory optional columns. mandatory columns   identify variant, effect allele (effect_allele),   respective weight (effect_weight) score. columns   identify variant can either rsID combination  chr_name chr_position. \"data\" element  NULL argument metadata_only TRUE.   information scoring file schema check  vignette(\"pgs-scoring-file\", package = \"quincunx\").","code":""},{"path":"https://maialab.org/quincunx/reference/read_scoring_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a polygenic scoring file — read_scoring_file","text":"","code":"if (FALSE) { # Read a PGS scoring file by PGS ID # (internally, it translates the PGS ID #  to the corresponding FTP URL) try(read_scoring_file(\"PGS000655\"))  # Equivalent to `read_scoring_file(\"PGS000655\")` url <- paste0(   \"http://ftp.ebi.ac.uk/\",   \"pub/databases/spot/pgs/scores/\",   \"PGS000655/ScoringFiles/\",   \"PGS000655.txt.gz\" ) read_scoring_file(url)   # Reading from a local file try(read_scoring_file(\"~/PGS000655.txt.gz\")) }"},{"path":"https://maialab.org/quincunx/reference/releases-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a set of PGS Catalog Releases — releases-class","title":"An S4 class to represent a set of PGS Catalog Releases — releases-class","text":"releases object consists four tables (slots) combined form relational database subset PGS Catalog releases. release observation (row) releases table (first table).","code":""},{"path":"https://maialab.org/quincunx/reference/releases-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a set of PGS Catalog Releases — releases-class","text":"releases table PGS Catalog releases. release (row)   uniquely identified release date (date). Columns: date Release date. n_pgs Number newly released Polygenic Scores. n_ppm Number newly released PGS Performance Metrics. n_pgp Number newly released PGS Publications. pgs_ids table released Polygenic Scores (PGS) identifiers.   Columns: date Release date. pgs_id Polygenic Score (PGS) identifier. Example: \"PGS000001\". ppm_ids table released PGS Performance Metrics identifiers.   Columns: date Release date. ppm_id PGS Performance Metrics identifier. Example: \"PPM000001\". pgp_ids table released PGS Publication identifiers. Columns: date Release date. pgp_id PGS Publication identifier. Example: \"PGP000001\".","code":""},{"path":"https://maialab.org/quincunx/reference/releases.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the S4 releases object. — releases","title":"Constructor for the S4 releases object. — releases","text":"Constructor S4 releases object.","code":""},{"path":"https://maialab.org/quincunx/reference/releases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the S4 releases object. — releases","text":"","code":"releases(   releases = s4releases_releases_tbl(),   pgs_ids = s4releases_pgs_ids_tbl(),   ppm_ids = s4releases_ppm_ids_tbl(),   pgp_ids = s4releases_pgp_ids_tbl() )"},{"path":"https://maialab.org/quincunx/reference/releases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the S4 releases object. — releases","text":"releases s4releases_releases_tbl tibble. pgs_ids s4releases_pgs_ids_tbl tibble. ppm_ids s4releases_ppm_ids_tbl tibble. pgp_ids s4releases_pgp_ids_tbl tibble.","code":""},{"path":"https://maialab.org/quincunx/reference/releases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for the S4 releases object. — releases","text":"object class releases.","code":""},{"path":"https://maialab.org/quincunx/reference/remap_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Remap identifiers — remap_id","title":"Remap identifiers — remap_id","text":"Remap identifiers","code":""},{"path":"https://maialab.org/quincunx/reference/remap_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remap identifiers — remap_id","text":"","code":"remap_id(lst_tbls, old, new)"},{"path":"https://maialab.org/quincunx/reference/request.html","id":null,"dir":"Reference","previous_headings":"","what":"Request a resource from the PGS REST API — request","title":"Request a resource from the PGS REST API — request","text":"Performs GET request endpoint specified resource_url.","code":""},{"path":"https://maialab.org/quincunx/reference/request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request a resource from the PGS REST API — request","text":"","code":"request(   resource_url,   base_url = pgs_server(),   user_agent = user_agent_id(),   verbose = FALSE,   warnings = TRUE )"},{"path":"https://maialab.org/quincunx/reference/request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request a resource from the PGS REST API — request","text":"resource_url Endpoint URL. endpoint internally appended base_url. start forward slash ('/'). base_url PGS REST API base URL. user_agent User agent. verbose Whether verbose. warnings Whether print warnings.","code":""},{"path":"https://maialab.org/quincunx/reference/request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request a resource from the PGS REST API — request","text":"named list four elements: resource URL endpoint. code HTTP status code. message string describing status response obtained: 'OK' successful description error. json JSON response string.","code":""},{"path":"https://maialab.org/quincunx/reference/request_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Request a paginated resource from the PGS REST API — request_all","title":"Request a paginated resource from the PGS REST API — request_all","text":"Performs GET request specified resource_url pages.","code":""},{"path":"https://maialab.org/quincunx/reference/request_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request a paginated resource from the PGS REST API — request_all","text":"","code":"request_all(   resource_url = \"/\",   base_url = pgs_server(),   limit = 20L,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://maialab.org/quincunx/reference/request_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request a paginated resource from the PGS REST API — request_all","text":"resource_url Endpoint URL. endpoint internally appended base_url. start forward slash (/). base_url PGS REST API base URL (one need change default value). limit number results per page. verbose whether print information API request. warnings whether print warnings related API requests. progress_bar whether show progress bar paginated resources retrieved.","code":""},{"path":"https://maialab.org/quincunx/reference/request_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request a paginated resource from the PGS REST API — request_all","text":"list four named elements: resource URL endpoint. code HTTP status code. message string describing status response obtained. \"OK\" everything went OK string describing problem. json list JSON responses (response string).","code":""},{"path":"https://maialab.org/quincunx/reference/request_warning.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty printing of http error — request_warning","title":"Pretty printing of http error — request_warning","text":"Pretty printing http error","code":""},{"path":"https://maialab.org/quincunx/reference/request_warning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty printing of http error — request_warning","text":"","code":"request_warning(response, warnings = FALSE)"},{"path":"https://maialab.org/quincunx/reference/request_warning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty printing of http error — request_warning","text":"response response object.","code":""},{"path":"https://maialab.org/quincunx/reference/request_warning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty printing of http error — request_warning","text":"function run side effect: printing.","code":""},{"path":"https://maialab.org/quincunx/reference/s4_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an S4 object into a list — s4_to_list","title":"Convert an S4 object into a list — s4_to_list","text":"Convert S4 object list","code":""},{"path":"https://maialab.org/quincunx/reference/s4_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an S4 object into a list — s4_to_list","text":"","code":"s4_to_list(s4_obj)"},{"path":"https://maialab.org/quincunx/reference/s4_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an S4 object into a list — s4_to_list","text":"s4_obj S4 object","code":""},{"path":"https://maialab.org/quincunx/reference/s4_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an S4 object into a list — s4_to_list","text":"list version S4 object.","code":""},{"path":"https://maialab.org/quincunx/reference/sample_sets-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a set of PGS Catalog Sample Sets — sample_sets-class","title":"An S4 class to represent a set of PGS Catalog Sample Sets — sample_sets-class","text":"sample_sets object consists four tables (slots) combined form relational database subset PGS Catalog sample sets. sample set observation (row) sample_sets table (first table).","code":""},{"path":"https://maialab.org/quincunx/reference/sample_sets-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a set of PGS Catalog Sample Sets — sample_sets-class","text":"sample_sets table sample sets. sample set (row) uniquely   identified column pss_id. Columns: pss_id PGS Sample Set identifier. Example: \"PSS000042\". samples table samples. sample (row) uniquely identified   combination values columns: pss_id   sample_id. Columns: pss_id PGS Sample Set identifier. Example: \"PSS000042\". sample_id Sample identifier. surrogate key identify sample. stage Sample stage: always Evaluation (\"eval\"). sample_size Number individuals included sample. sample_cases Number cases. sample_controls Number controls. sample_percent_male Percentage male participants. phenotype_description Detailed phenotype description. ancestry_category Author reported ancestry mapped best matching ancestry category NHGRI-EBI GWAS Catalog framework (see ancestry_categories) possible values. ancestry detailed description sample ancestry usually matches specific description described authors (e.g. French, Chinese). country Author reported countries recruitment (available). ancestry_additional_description additional description captured columns (e.g. founder genetically isolated populations, description admixed samples). study_id Associated GWAS Catalog study accession identifier, e.g., \"GCST002735\". pubmed_id PubMed identifier. cohorts_additional_description additional description samples (e.g. sub-cohort information). demographics table sample demographics' variables.   demographics' variable (row) uniquely identified combination   values columns: pss_id, sample_id,   variable. Columns: pss_id PGS Sample Set identifier. Example: \"PSS000042\". sample_id Sample identifier. surrogate identifier identify sample. variable Demographics variable. Following columns report indicated variable. estimate_type Type statistical estimate variable. estimate variable's statistical value. unit Unit variable. variability_type Measure statistical dispersion variable, e.g. standard error (se) standard deviation (sd). variability value measure dispersion. interval_type Type statistical interval variable: range, iqr (interquartile), ci (confidence interval). interval_lower Interval lower bound. interval_upper Interval upper bound. cohorts table cohorts. cohort (row) uniquely identified   combination values columns: pss_id, sample_id   cohort_symbol. Columns: pss_id PGS Sample Set identifier. Example: \"PSS000042\". sample_id Sample identifier. surrogate key identify sample. cohort_symbol Cohort symbol. cohort_name Cohort full name.","code":""},{"path":"https://maialab.org/quincunx/reference/sample_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the S4 sample_sets object. — sample_sets","title":"Constructor for the S4 sample_sets object. — sample_sets","text":"Constructor S4 sample_sets object.","code":""},{"path":"https://maialab.org/quincunx/reference/sample_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the S4 sample_sets object. — sample_sets","text":"","code":"sample_sets(   sample_sets = s4pss_sample_sets_tbl(),   samples = s4pss_samples_tbl(),   demographics = s4pss_demographics_tbl(),   cohorts = s4pss_pgs_cohorts_tbl() )"},{"path":"https://maialab.org/quincunx/reference/sample_sets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the S4 sample_sets object. — sample_sets","text":"sample_sets s4pss_sample_sets_tbl tibble. samples s4pss_samples_tbl tibble. demographics s4pss_demographics_tbl tibble. cohorts s4pss_pgs_cohorts_tbl tibble.","code":""},{"path":"https://maialab.org/quincunx/reference/sample_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for the S4 sample_sets object. — sample_sets","text":"object class sample_sets.","code":""},{"path":"https://maialab.org/quincunx/reference/scores-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a set of PGS Catalog Polygenic Scores — scores-class","title":"An S4 class to represent a set of PGS Catalog Polygenic Scores — scores-class","text":"scores object consists six tables (slots) combined form relational database subset PGS Catalog polygenic scores. score observation (row) scores table (first table).","code":""},{"path":"https://maialab.org/quincunx/reference/scores-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a set of PGS Catalog Polygenic Scores — scores-class","text":"scores table polygenic scores. polygenic score (row)   uniquely identified pgs_id column. Columns: pgs_id Polygenic Score (PGS) identifier. Example: \"PGS000001\". pgs_name may name authors describe PGS source publication, name curator PGS Catalog assigned identify score curation process (PGS identifier given). Example: PRS77_BC. scoring_file URL scoring file PGS FTP server. Example: \"http://ftp.ebi.ac.uk/pub/databases/spot/pgs/scores/PGS000001/ScoringFiles/PGS000001.txt.gz\". matches_publication Indicate PGS data matches published polygenic score (TRUE). (FALSE), authors provided alternative polygenic Catalog data, performance metrics, may differ publication. reported_trait author-reported trait PGS developed predict. Example: \"Breast Cancer\". trait_additional_description additional description captured columns. Example: \"Femoral neck BMD (g/cm2)\". pgs_method_name name description method computational algorithm used develop PGS. pgs_method_params description relevant inputs parameters relevant PGS development method/process. n_variants Number variants used calculate PGS. n_variants_interactions Number higher-order variant interactions included PGS. assembly version genome assembly variants present PGS associated . Example: GRCh37. license PGS Catalog distributes data according EBI's standard Terms Use. PGS specific terms, licenses, restrictions (e.g. non-commercial use) highlight field, known. publications table publications. publication (row)   uniquely identified pgp_id column. Columns: pgs_id Polygenic Score (PGS) identifier. pgp_id PGS Publication identifier. Example: \"PGP000001\". pubmed_id PubMed identifier. Example: \"25855707\". publication_date Publication date. Example: \"2020-09-28\". Note class publication_date Date. publication Abbreviated name journal. Example: \"J Hum Genet\". title Publication title. author_fullname First author publication. Example: 'Mavaddat N'. doi Digital Object Identifier (DOI). variable also curated allow unpublished work (e.g. preprints) added catalog. Example: \"10.1093/jnci/djv036\". samples table samples. sample (row) uniquely identified   combination values columns: pgs_id   sample_id. Columns: pgs_id Polygenic score identifier. identifier starts 'PGS' followed six digits, e.g. 'PGS000001'. sample_id Sample identifier. surrogate key identify sample. stage Sample stage: either \"discovery\" \"training\". sample_size Number individuals included sample. sample_cases Number cases. sample_controls Number controls. sample_percent_male Percentage male participants. phenotype_description Detailed phenotype description. ancestry_category Author reported ancestry mapped best matching ancestry category NHGRI-EBI GWAS Catalog framework (see ancestry_categories) possible values. ancestry detailed description sample ancestry usually matches specific description described authors (e.g. French, Chinese). country Author reported countries recruitment (available). ancestry_additional_description additional description captured columns (e.g. founder genetically isolated populations, description admixed samples). study_id Associated GWAS Catalog study accession identifier, e.g., \"GCST002735\". pubmed_id PubMed identifier. cohorts_additional_description additional description samples (e.g. sub-cohort information). demographics table sample demographics' variables.   demographics' variable (row) uniquely identified combination   values columns: pgs_id, sample_id   variable. Columns: pgs_id Polygenic Score (PGS) identifier. sample_id Sample identifier. surrogate identifier identify sample. variable Demographics variable. Following columns report indicated variable. estimate_type Type statistical estimate variable. estimate variable's statistical value. unit Unit variable. variability_type Measure statistical dispersion variable, e.g. standard error (se) standard deviation (sd). variability value measure dispersion. interval_type Type statistical interval variable: range, iqr (interquartile), ci (confidence interval). interval_lower Interval lower bound. interval_upper Interval upper bound. cohorts table cohorts. cohort (row) uniquely identified   combination values columns: pgs_id, sample_id   cohort_symbol. Columns: pgs_id Polygenic Score (PGS) identifier. sample_id Sample identifier. surrogate key identify sample. cohort_symbol Cohort symbol. cohort_name Cohort full name. traits table EFO traits. trait (row) uniquely identified   combination columns pgs_id efo_id. Columns: pgs_id Polygenic Score (PGS) identifier. efo_id EFO identifier. trait Trait name. description Detailed description trait EFO. url External link EFO entry. stages_tally table sample sizes number samples sets stage. pgs_id Polygenic Score (PGS) identifier. stage Sample stage: either \"gwas\", \"dev\" \"eval\". sample_size Sample size. n_sample_sets Number sample sets (meaningful evaluation stage \"eval\") ancestry_frequencies table describes ancestry composition stage. pgs_id Polygenic Score (PGS) identifier. stage Sample stage: either \"gwas\", \"dev\" \"eval\". ancestry_class_symbol Ancestry class symbol. frequency Ancestry fraction (percentage). multi_ancestry_composition table breakdown ancestries included multi-ancestries. pgs_id Polygenic Score (PGS) identifier. stage Sample stage: either \"gwas\", \"dev\" \"eval\". multi_ancestry_class_symbol Multi-ancestry class symbol. ancestry_class_symbol Ancestry class symbol.","code":""},{"path":"https://maialab.org/quincunx/reference/scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the S4 scores object. — scores","title":"Constructor for the S4 scores object. — scores","text":"Constructor S4 scores object.","code":""},{"path":"https://maialab.org/quincunx/reference/scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the S4 scores object. — scores","text":"","code":"scores(   scores = s4scores_scores_tbl(),   publications = s4scores_publications_tbl(),   samples = s4scores_samples_tbl(),   demographics = s4scores_demographics_tbl(),   cohorts = s4scores_cohorts_tbl(),   traits = s4scores_traits_tbl(),   stages_tally = s4scores_stages_tally_tbl(),   ancestry_frequencies = s4scores_ancestry_frequencies_tbl(),   multi_ancestry_composition = s4scores_multi_ancestry_composition_tbl() )"},{"path":"https://maialab.org/quincunx/reference/scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the S4 scores object. — scores","text":"scores s4scores_scores_tbl tibble. publications s4scores_publications_tbl tibble. samples s4scores_samples_tbl tibble. demographics s4scores_demographics_tbl tibble. cohorts s4scores_cohorts_tbl tibble. traits s4scores_traits_tbl tibble.","code":""},{"path":"https://maialab.org/quincunx/reference/scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for the S4 scores object. — scores","text":"object class scores.","code":""},{"path":"https://maialab.org/quincunx/reference/setop.html","id":null,"dir":"Reference","previous_headings":"","what":"Set operations on PGS Catalog objects — setop","title":"Set operations on PGS Catalog objects — setop","text":"Performs set union, intersection, (asymmetric!) difference two objects either class scores, publications, traits, performance_metrics, sample_sets, cohorts trait_categories. Note union() removes duplicated entities, whereas bind() .","code":""},{"path":"https://maialab.org/quincunx/reference/setop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set operations on PGS Catalog objects — setop","text":"","code":"union(x, y, ...)  intersect(x, y, ...)  setdiff(x, y, ...)  setequal(x, y, ...)"},{"path":"https://maialab.org/quincunx/reference/setop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set operations on PGS Catalog objects — setop","text":"x, y Objects either class scores, publications, traits, performance_metrics, sample_sets, cohorts trait_categories. ... arguments passed methods.","code":""},{"path":"https://maialab.org/quincunx/reference/setop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set operations on PGS Catalog objects — setop","text":"case union(), intersect(), setdiff(): object class x y. case setequal(), logical scalar.","code":""},{"path":"https://maialab.org/quincunx/reference/setop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set operations on PGS Catalog objects — setop","text":"","code":"if (FALSE) { # interactive() # Get some `scores` objects: my_scores_1 <- get_scores(c('PGS000012', 'PGS000013')) my_scores_2 <- get_scores(c('PGS000013', 'PGS000014'))  # # union() # # NB: with `union()`, PGS000013 is not repeated. union(my_scores_1, my_scores_2)@scores  # # intersect() # intersect(my_scores_1, my_scores_2)@scores  # # setdiff() # setdiff(my_scores_1, my_scores_2)@scores  # # setequal() # setequal(my_scores_1, my_scores_2) setequal(my_scores_1, my_scores_1) setequal(my_scores_2, my_scores_2) }"},{"path":"https://maialab.org/quincunx/reference/stages.html","id":null,"dir":"Reference","previous_headings":"","what":"Study stages — stages","title":"Study stages — stages","text":"dataset containing various study stages assigned samples PGS Catalog.","code":""},{"path":"https://maialab.org/quincunx/reference/stages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Study stages — stages","text":"","code":"stages"},{"path":"https://maialab.org/quincunx/reference/stages.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Study stages — stages","text":"data frame 5 stages (rows) 4 columns: stage Study stage. symbol One-letter symbol stage, comma separated combination thereof. name Stage name. definition Stage description.","code":""},{"path":"https://maialab.org/quincunx/reference/stages.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Study stages — stages","text":"https://www.pgscatalog.org/docs/ancestry","code":""},{"path":"https://maialab.org/quincunx/reference/stages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Study stages — stages","text":"","code":"stages #> # A tibble: 5 × 4 #>   stage         symbol name                                  definition          #>   <chr>         <chr>  <chr>                                 <chr>               #> 1 gwas          G      Source of Variant Associations (GWAS) \"Describes the sam… #> 2 dev           D      Score Development/Training            \"Describes the sam… #> 3 eval          E      PGS Evaluation                        \"Information about… #> 4 gwas/dev      G,D    Development                           \"Combination of th… #> 5 gwas/dev/eval G,D,E  All stages                            \"Combination of al…"},{"path":"https://maialab.org/quincunx/reference/study_to_pgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Map GWAS studies identifiers to PGS identifiers — study_to_pgs","title":"Map GWAS studies identifiers to PGS identifiers — study_to_pgs","text":"Map GWAS studies identifiers PGS identifiers.","code":""},{"path":"https://maialab.org/quincunx/reference/study_to_pgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map GWAS studies identifiers to PGS identifiers — study_to_pgs","text":"","code":"study_to_pgs(study_id, verbose = FALSE, warnings = TRUE, progress_bar = TRUE)"},{"path":"https://maialab.org/quincunx/reference/study_to_pgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map GWAS studies identifiers to PGS identifiers — study_to_pgs","text":"study_id character vector GWAS Catalog study accession identifiers, e.g., \"GCST001937\". verbose logical indicating whether function verbose different queries . warnings logical indicating whether print warnings, . progress_bar Whether show progress bar queries performed.","code":""},{"path":"https://maialab.org/quincunx/reference/study_to_pgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map GWAS studies identifiers to PGS identifiers — study_to_pgs","text":"data frame two columns: study_id pgs_id.","code":""},{"path":"https://maialab.org/quincunx/reference/study_to_pgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map GWAS studies identifiers to PGS identifiers — study_to_pgs","text":"","code":"if (FALSE) { study_to_pgs('GCST001937') study_to_pgs(c('GCST000998', 'GCST000338')) }"},{"path":"https://maialab.org/quincunx/reference/subset-cohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a cohorts object — subset-cohorts","title":"Subset a cohorts object — subset-cohorts","text":"can subset cohorts identifier position using `[` operator.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-cohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a cohorts object — subset-cohorts","text":"","code":"# S4 method for cohorts,missing,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for cohorts,numeric,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for cohorts,character,missing,missing [(x, i, j, ..., drop = FALSE)"},{"path":"https://maialab.org/quincunx/reference/subset-cohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a cohorts object — subset-cohorts","text":"x cohorts object. Position identifier name identifier . j used. ... Additional arguments used . drop used.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-cohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a cohorts object — subset-cohorts","text":"cohorts object.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-cohorts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a cohorts object — subset-cohorts","text":"","code":"if (FALSE) { # interactive() # Get a few cohorts by their symbol: my_cohorts <- get_cohorts(c('23andMe', 'BioImage', 'Rotterdam-SI', 'SGWAS'),                 progress_bar = FALSE)  # # Subsetting by position # my_cohorts[c(1, 3)]  # # Subsetting by cohort symbol (character) # my_cohorts[c('23andMe', 'SGWAS')] }"},{"path":"https://maialab.org/quincunx/reference/subset-performance_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a performance_metrics object — subset-performance_metrics","title":"Subset a performance_metrics object — subset-performance_metrics","text":"can subset performance_metrics identifier position using `[` operator.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-performance_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a performance_metrics object — subset-performance_metrics","text":"","code":"# S4 method for performance_metrics,missing,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for performance_metrics,numeric,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for performance_metrics,character,missing,missing [(x, i, j, ..., drop = FALSE)"},{"path":"https://maialab.org/quincunx/reference/subset-performance_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a performance_metrics object — subset-performance_metrics","text":"x performance_metrics object. Position identifier name identifier . j used. ... Additional arguments used . drop used.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-performance_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a performance_metrics object — subset-performance_metrics","text":"performance_metrics object.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-performance_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a performance_metrics object — subset-performance_metrics","text":"","code":"if (FALSE) { # interactive() # Get a few performance metrics: my_ppm <- get_performance_metrics(sprintf('PPM%06d', 38:42))  # # Subsetting by position # my_ppm[c(1, 4)]  # # Subsetting by performance metrics identifier (character) # my_ppm['PPM000042'] }"},{"path":"https://maialab.org/quincunx/reference/subset-publications.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a publications object — subset-publications","title":"Subset a publications object — subset-publications","text":"can subset publications identifier position using `[` operator.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-publications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a publications object — subset-publications","text":"","code":"# S4 method for publications,missing,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for publications,numeric,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for publications,character,missing,missing [(x, i, j, ..., drop = FALSE)"},{"path":"https://maialab.org/quincunx/reference/subset-publications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a publications object — subset-publications","text":"x publications object. Position identifier name identifier . j used. ... Additional arguments used . drop used.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-publications.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a publications object — subset-publications","text":"publications object.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-publications.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a publications object — subset-publications","text":"","code":"if (FALSE) { # interactive() # Get all publications in the PGS Catalog: all_pub <- get_publications(interactive = FALSE, progress_bar = FALSE)  # # Subsetting by position # all_pub[1:5]  # # Subsetting by publication identifier (character) # all_pub['PGP000001'] }"},{"path":"https://maialab.org/quincunx/reference/subset-releases.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a releases object — subset-releases","title":"Subset a releases object — subset-releases","text":"can subset releases identifier (release date) position using `[` operator.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-releases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a releases object — subset-releases","text":"","code":"# S4 method for releases,missing,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for releases,numeric,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for releases,character,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for releases,Date,missing,missing [(x, i, j, ..., drop = FALSE)"},{"path":"https://maialab.org/quincunx/reference/subset-releases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a releases object — subset-releases","text":"x releases object. Position identifier name identifier . j used. ... Additional arguments used . drop used.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-releases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a releases object — subset-releases","text":"releases object.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-releases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a releases object — subset-releases","text":"","code":"if (FALSE) { # interactive() # Get details about all PGS Catalog data releases thus far: all_releases <- get_releases(date = 'all', progress_bar = FALSE)  # # Subsetting by position # # Releases are, by default, sorted by date in descending order, thus the # first PGS Catalog release is in the last position of the returned # `all_releases` object. Here's how you can extract that first release (last # position in `all_releases`): all_releases[n(all_releases)]  # # Subsetting by date (character) # date_of_interest <- '2021-06-11' class(date_of_interest) all_releases[date_of_interest]  # # Subsetting by date (Date object) # date_of_interest <- as.Date('2021-06-11') class(date_of_interest) all_releases[date_of_interest] }"},{"path":"https://maialab.org/quincunx/reference/subset-sample_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a sample_sets object — subset-sample_sets","title":"Subset a sample_sets object — subset-sample_sets","text":"can subset sample_sets identifier position using `[` operator.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-sample_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a sample_sets object — subset-sample_sets","text":"","code":"# S4 method for sample_sets,missing,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for sample_sets,numeric,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for sample_sets,character,missing,missing [(x, i, j, ..., drop = FALSE)"},{"path":"https://maialab.org/quincunx/reference/subset-sample_sets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a sample_sets object — subset-sample_sets","text":"x sample_sets object. Position identifier name identifier . j used. ... Additional arguments used . drop used.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-sample_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a sample_sets object — subset-sample_sets","text":"sample_sets object.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-sample_sets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a sample_sets object — subset-sample_sets","text":"","code":"if (FALSE) { # interactive() # Get a few sample sets: my_pss <- get_sample_sets(sprintf('PSS%06d', 42:48))  # # Subsetting by position # my_pss[c(1, 3)]  # # Subsetting by sample set identifier (character) # my_pss['PSS000042'] }"},{"path":"https://maialab.org/quincunx/reference/subset-scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a scores object — subset-scores","title":"Subset a scores object — subset-scores","text":"can subset scores identifier position using `[` operator.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a scores object — subset-scores","text":"","code":"# S4 method for scores,missing,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for scores,numeric,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for scores,character,missing,missing [(x, i, j, ..., drop = FALSE)"},{"path":"https://maialab.org/quincunx/reference/subset-scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a scores object — subset-scores","text":"x scores object. Position identifier name identifier . j used. ... Additional arguments used . drop used.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a scores object — subset-scores","text":"scores object.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a scores object — subset-scores","text":"","code":"if (FALSE) { # interactive() # Get a few polygenic scores: my_scores <- get_scores(sprintf('PGS%06d', 10:14), progress_bar = FALSE)  # # Subsetting by position # my_scores[c(1, 3, 5)]@scores  # # Subsetting by PGS identifier (character) # my_scores[c('PGS000011', 'PGS000014')]@scores }"},{"path":"https://maialab.org/quincunx/reference/subset-trait_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a trait_categories object — subset-trait_categories","title":"Subset a trait_categories object — subset-trait_categories","text":"can subset trait_categories trait category (string) position using `[` operator.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-trait_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a trait_categories object — subset-trait_categories","text":"","code":"# S4 method for trait_categories,missing,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for trait_categories,numeric,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for trait_categories,character,missing,missing [(x, i, j, ..., drop = FALSE)"},{"path":"https://maialab.org/quincunx/reference/subset-trait_categories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a trait_categories object — subset-trait_categories","text":"x trait_categories object. Position identifier name identifier . j used. ... Additional arguments used . drop used.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-trait_categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a trait_categories object — subset-trait_categories","text":"trait_categories object.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-trait_categories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a trait_categories object — subset-trait_categories","text":"","code":"if (FALSE) { # interactive() # Get details about all trait categories: all_trait_categories <- get_trait_categories(progress_bar = FALSE)  # # Subsetting by position # all_trait_categories[1:5]  # # Subsetting by trait category (character) # all_trait_categories['Liver enzyme measurement'] }"},{"path":"https://maialab.org/quincunx/reference/subset-traits.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a traits object — subset-traits","title":"Subset a traits object — subset-traits","text":"can subset traits identifier position using `[` operator.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-traits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a traits object — subset-traits","text":"","code":"# S4 method for traits,missing,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for traits,numeric,missing,missing [(x, i, j, ..., drop = FALSE)  # S4 method for traits,character,missing,missing [(x, i, j, ..., drop = FALSE)"},{"path":"https://maialab.org/quincunx/reference/subset-traits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a traits object — subset-traits","text":"x traits object. Position identifier name identifier . j used. ... Additional arguments used . drop used.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-traits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a traits object — subset-traits","text":"traits object.","code":""},{"path":"https://maialab.org/quincunx/reference/subset-traits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a traits object — subset-traits","text":"","code":"if (FALSE) { # interactive() # Get a few traits: my_traits <- get_traits(trait_term = 'stroke', exact_term = FALSE,                progress_bar = FALSE)  # # Subsetting by position # my_traits[1]  # # Subsetting by EFO trait identifier (character) # my_traits['EFO_0000712'] }"},{"path":"https://maialab.org/quincunx/reference/sure.html","id":null,"dir":"Reference","previous_headings":"","what":"Are you sure? — sure","title":"Are you sure? — sure","text":"function asks interactively permission continue . can specify custom message question also different messages positive negative answer.","code":""},{"path":"https://maialab.org/quincunx/reference/sure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are you sure? — sure","text":"","code":"sure(   before_question = NULL,   after_saying_no = NULL,   after_saying_yes = NULL,   default_answer = NULL )"},{"path":"https://maialab.org/quincunx/reference/sure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Are you sure? — sure","text":"before_question String message printed question. after_saying_no String message printed answering ''. after_saying_yes String message printed answering 'yes'. default_answer String answer question, run non-interactive mode.","code":""},{"path":"https://maialab.org/quincunx/reference/sure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are you sure? — sure","text":"logical indicating answer 'yes'/'y' (TRUE) otherwise (FALSE).","code":""},{"path":"https://maialab.org/quincunx/reference/sure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Are you sure? — sure","text":"run function non-interactive mode, pass automatic answer default_answer: 'yes' ''.","code":""},{"path":"https://maialab.org/quincunx/reference/trait_categories-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a set of PGS Catalog Trait Categories — trait_categories-class","title":"An S4 class to represent a set of PGS Catalog Trait Categories — trait_categories-class","text":"trait_categories object consists two tables (slots) combined form relational database subset PGS Catalog trait categories. score observation (row) trait_categories table (first table).","code":""},{"path":"https://maialab.org/quincunx/reference/trait_categories-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a set of PGS Catalog Trait Categories — trait_categories-class","text":"trait_categories table trait categories. Columns: trait_category Trait category name. traits table associated traits. Columns: trait_category Trait category name. efo_id EFO identifier. trait Trait name. description Detailed description trait EFO. url External link EFO entry.","code":""},{"path":"https://maialab.org/quincunx/reference/trait_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the S4 trait_categories object. — trait_categories","title":"Constructor for the S4 trait_categories object. — trait_categories","text":"Constructor S4 trait_categories object.","code":""},{"path":"https://maialab.org/quincunx/reference/trait_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the S4 trait_categories object. — trait_categories","text":"","code":"trait_categories(   trait_categories = s4trait_categories_trait_categories_tbl(),   traits = s4trait_categories_traits_tbl() )"},{"path":"https://maialab.org/quincunx/reference/trait_categories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the S4 trait_categories object. — trait_categories","text":"trait_categories s4trait_categories_trait_categories_tbl tibble. traits s4trait_categories_traits_tbl tibble.","code":""},{"path":"https://maialab.org/quincunx/reference/trait_categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for the S4 trait_categories object. — trait_categories","text":"object class trait_categories.","code":""},{"path":"https://maialab.org/quincunx/reference/traits-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a set of PGS Catalog Traits — traits-class","title":"An S4 class to represent a set of PGS Catalog Traits — traits-class","text":"traits object consists six slots, table (tibble), combined form relational database subset PGS Catalog traits. trait observation (row) traits table --- main table. tables column efo_id primary key.","code":""},{"path":"https://maialab.org/quincunx/reference/traits-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a set of PGS Catalog Traits — traits-class","text":"traits table traits. Columns: efo_id EFO identifier. parent_efo_id EFO identifier parent trait. is_child trait obtained child trait? trait Trait name. description Detailed description trait EFO. url External link EFO entry. pgs_ids table associated polygenic score identifiers. Columns: efo_id EFO identifier. parent_efo_id EFO identifier parent trait. is_child trait obtained child trait? pgs_id Polygenic Score (PGS) identifier. child_pgs_ids table polygenic score identifiers associated   child traits. Columns: efo_id EFO identifier. parent_efo_id EFO identifier parent trait. is_child trait obtained child trait? child_pgs_id Polygenic Score (PGS) identifiers associated child traits. trait_categories table associated trait categories. Columns: efo_id EFO identifier. parent_efo_id EFO identifier parent trait. is_child trait obtained child trait? trait_category Trait category name. trait_synonyms table associated trait synonyms. Columns: efo_id EFO identifier. parent_efo_id EFO identifier parent trait. is_child trait obtained child trait? trait_synonyms Trait synonyms. trait_mapped_terms table associated external references,   identifiers terms. Columns: efo_id EFO identifier. parent_efo_id EFO identifier parent trait. is_child trait obtained child trait? trait_mapped_terms Trait mapped terms.","code":""},{"path":"https://maialab.org/quincunx/reference/traits.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the S4 traits object. — traits","title":"Constructor for the S4 traits object. — traits","text":"Constructor S4 traits object.","code":""},{"path":"https://maialab.org/quincunx/reference/traits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the S4 traits object. — traits","text":"","code":"traits(   traits = s4traits_traits_tbl(),   pgs_ids = s4traits_pgs_ids_tbl(),   child_pgs_ids = s4traits_child_pgs_ids_tbl(),   trait_categories = s4traits_trait_categories_tbl(),   trait_synonyms = s4traits_trait_synonyms_tbl(),   trait_mapped_terms = s4traits_trait_mapped_terms_tbl() )"},{"path":"https://maialab.org/quincunx/reference/traits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the S4 traits object. — traits","text":"traits s4traits_traits_tbl tibble. pgs_ids s4traits_pgs_ids_tbl tibble. child_pgs_ids s4traits_child_pgs_ids_tbl tibble. trait_categories s4traits_trait_categories_tbl tibble. trait_synonyms s4traits_trait_synonyms_tbl tibble. trait_mapped_terms s4traits_trait_mapped_terms_tbl tibble.","code":""},{"path":"https://maialab.org/quincunx/reference/traits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for the S4 traits object. — traits","text":"object class traits.","code":""},{"path":"https://maialab.org/quincunx/reference/user_agent_id.html","id":null,"dir":"Reference","previous_headings":"","what":"User agent identification — user_agent_id","title":"User agent identification — user_agent_id","text":"Generates S3 request object defined package httr, used identify package user agent requests PGS REST API. user agent identification string : \"quincunx: R Client PGS REST API\".","code":""},{"path":"https://maialab.org/quincunx/reference/user_agent_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"User agent identification — user_agent_id","text":"","code":"user_agent_id()"},{"path":"https://maialab.org/quincunx/reference/user_agent_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"User agent identification — user_agent_id","text":"S3 request object defined package httr.","code":""},{"path":"https://maialab.org/quincunx/reference/write_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a PGS Catalog object to xlsx — write_xlsx","title":"Export a PGS Catalog object to xlsx — write_xlsx","text":"function exports PGS Catalog object Microsoft Excel xlsx file. table (slot) saved sheet.","code":""},{"path":"https://maialab.org/quincunx/reference/write_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a PGS Catalog object to xlsx — write_xlsx","text":"","code":"write_xlsx(x, file = stop(\"`file` must be specified\"))"},{"path":"https://maialab.org/quincunx/reference/write_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a PGS Catalog object to xlsx — write_xlsx","text":"x scores, publications, traits, performance_metrics, sample_sets, cohorts, trait_categories releases object. file file name write .","code":""},{"path":"https://maialab.org/quincunx/reference/write_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a PGS Catalog object to xlsx — write_xlsx","text":"return value, called side effect.","code":""},{"path":"https://maialab.org/quincunx/news/index.html","id":"quincunx-015","dir":"Changelog","previous_headings":"","what":"quincunx 0.1.5","title":"quincunx 0.1.5","text":"read_scoring_file() updated work version 2.0 PGS scoring file format.","code":""}]
